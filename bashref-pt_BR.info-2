This is bashref-pt_BR.info, produced by texi2any version 6.0 from
bashref-ed.4.3-pt_BR.texi.

Este texto é uma breve descrição das características que estão presentes
no shell Bash (versão 4.3, 02 de fevereiro de 2014).

   Esta é a Edição 4.3, mais recentemente atualizada em 02 de fevereiro
de 2014, do ‘The GNU Bash Reference Manual’, para ‘Bash’, Versão 4.3.

   Direitos autorais © 2015 da versão modificada traduzida para o
português do Brasil: Jamenson Ferreira Espindula de Almeida Melo.

   Direitos autorais © 1988–2014 da versão original escrita em inglês:
Free Software Foundation, Inc.

   Na produção deste documento, buscou-se obter o máximo de qualidade
possível, em respeito ao leitor.  Entretanto, apesar de perseguida, a
perfeição é algo difícil de ser alcançada.  Por esse motivo, erros podem
ter passado despercebidos.  Qualquer ajuda no sentido de identificá-los
é muito bem vinda, porém o leitor deveria estar consciente de que este
documento é distribuido ‘sem qualquer garantia’, implícita e/ou
explícita.

     É concedida permissão para copiar, distribuir e/ou modificar este
     Manual de Referência do Bash, edição 4.3, versão traduzida para a
     língua portuguesa sob os termos da Licença de Documentação Livre
     GNU, versão 1.3 ou qualquer versão posterior publicada pela Free
     Software Foundation; sem Seções Invariantes, sem Textos de Capa
     Frontal e sem Textos de Quarta Capa.  Uma cópia da licença está
     incluída na seção intitulada “Licença de Documentação Livre GNU”.

     Permission is granted to copy, distribute and/or modify this Bash
     Reference Manual, edition 4.3, version translated into brazilian
     portuguese under the terms of the Licença de Documentação Livre
     GNU, Version 1.3 or any later version published by the Free
     Software Foundation; with no Invariant Sections, no Front-Cover
     Texts, and no Back-Cover Texts.  A copy of the license is included
     in the section entitled “GNU Free Documentation Licence”.
INFO-DIR-SECTION Basics
START-INFO-DIR-ENTRY
* Bash: (bash).                     The GNU Bourne-Again SHell.
END-INFO-DIR-ENTRY


File: bashref-pt_BR.info,  Node: A Pilha de Diretório,  Next: Controlando o Prompt,  Prev: Vetores,  Up: Características de Bash

6.8 A Pilha de Diretório
========================

* Menu:

* Comandos Internos da Pilha de Diretório::		Comandos internos do Bash para
					manipular a pilha de diretório.

A pilha de diretório é uma lista de diretórios recentemente visitados.
O comando interno ‘pushd’ adiciona diretório à pilha conforme ele muda o
diretório atual, e o comando interno ‘popd’ remove os diretórios
especificados da pilha e muda o diretório atual para o diretório
removido.  O comando interno ‘dirs’ exibe o conteúdo da pilha de
diretório.

   O conteúdo da pilha de diretório também é visível como o valor da
variável de shell ‘DIRSTACK’.


File: bashref-pt_BR.info,  Node: Comandos Internos da Pilha de Diretório,  Up: A Pilha de Diretório

6.8.1 Comandos Internos da Pilha de Diretório
---------------------------------------------

‘dirs’
          dirs [-clpv] [+N | -N]

     Exibe a lista dos diretórios atualmente lembrados.  Os diretórios
     são adicionados à lista com o comando ‘pushd’; o comando ‘popd’
     remove diretórios da lista.

     ‘-c’
          Limpa a pilha de diretório deletando todos os elementos.
     ‘-l’
          Produz uma listagem utilizando nomes de caminho completos; o
          formato padrão de listagem utiliza um til para denotar o
          diretório home.
     ‘-p’
          Faz com ‘dirs’ imprima a pilha de diretório com uma entrada
          por linha.
     ‘-v’
          Faz com que ‘dirs’ imprima a pilha de diretório com uma
          entrada por linha, prefixando cada entrada com seu índice na
          pilha.
     ‘+N’
          Exibe o Nésimo diretório (contando-se a partir da esquerda da
          lista impressa por ‘dirs’ quando invocado sem opções),
          iniciando com zero.
     ‘-N’
          Exibe o Nésimo diretório (contando-se a partir da direita da
          lista impressa por ‘dirs’ quando invocado sem opções),
          iniciando com zero.

‘popd’
          popd [-n] [+N | -N]

     Remove a entrada topo da pilha de diretório, e muda (‘cd’) para o
     novo diretório topo.  Quando nenhum argumento é dado, ‘popd’ remove
     o diretório topo da pilha e realiza um ‘cd’ para o novo diretório
     topo.  Os elementos são numerados a partir do 0 iniciando no
     primeiro diretório listado com ‘dirs’; isto é, ‘popd’ é equivalente
     a ‘popd +0’.

     ‘-n’
          Suprime a mudança normal de diretório quando da remoção de
          diretórios da pilha, de forma que somente a pilha é
          manipulada.
     ‘+N’
          Remove o Nésimo diretório (contando-se a partir da esquerda da
          lista impressa por ‘dirs’), iniciando com zero.
     ‘-N’
          Remove o Nésimo diretório (contando-se a partir da direita da
          lista impressa por ‘dirs’), iniciando com zero.

‘pushd’
          pushd [-n] [+N | -N | DIR]

     Salva o diretório atual o topo da pilha de diretório e então muda
     (‘cd’) para DIR.  Sem argumentos, ‘pushd’ permuta os dois
     diretórios topo.

     ‘-n’
          Suprime a mudança normal de diretório quando da adição de
          diretórios à pilha, de forma que somente a pilha é manipulada.
     ‘+N’
          Traz o Nésimo diretório (contando-se a partir da esquerda da
          lista impressa por ‘dirs’, iniciando com zero) para o topo da
          lista rotacionando a pilha.
     ‘-N’
          Traz o Nésimo diretório (contando-se a partir da esquerda da
          lista impressa por ‘dirs’, iniciando com zero) para o topo da
          lista rotacionando a pilha.
     ‘DIR’
          Faz com que o diretório de trabalho atual seja o topo da
          pilha, tornando-o o novo diretório atual, como se tal
          diretório tivesse sido fornecido como um argumento para o
          comando interno ‘cd’.


File: bashref-pt_BR.info,  Node: Controlando o Prompt,  Next: O Shell Restrito,  Prev: A Pilha de Diretório,  Up: Características de Bash

6.9 Controlando o Prompt
========================

O valor da variável ‘PROMPT_COMMAND’ é examinado um pouco antes que Bash
imprima cada prompt primário.  Se ‘PROMPT_COMMAND’ estiver configurada e
tiver um valor não nulo, então o valor é executado exatamente como se
tal valor tivesse sido digitado na linha de comando.

   Adicionalmente, a tabela seguinte descreve os caracteres especiais os
quais podem aparecer nas variáveis de prompt ‘PS1’ até ‘PS4’:

‘\a’
     Um carácter de sino.
‘\d’
     A data, no formato "Dia da Semana Mês Dia" (por exemplo, "Terça
     Maio 26").
‘\D{FORMAT}’
     O FORMAT é passado para ‘strftime’(3) e o resultado é inserido na
     sequência de caracteres de prompt; um FORMAT vazio resulta em uma
     representação de hora específica do local.  As chaves são exigidas.
‘\e’
     Um carácter de escape.
‘\h’
     O nome da máquina, até o primeiro ‘.’.
‘\H’
     O nome da máquina.
‘\j’
     O número de tarefas atualmente gerenciadas pelo shell.
‘\l’
     O nome de base do nome de dispositivo de terminal do shell.
‘\n’
     Uma linha nova.
‘\r’
     Um retorno de carro.
‘\s’
     O nome do shell, o nome de base de ‘$0’ (a porção seguinte à barra
     final).
‘\t’
     A hora, no formato 24 horas HH:MM:SS
‘\T’
     A hora, no formato 12 horas HH:MM:SS
‘\@’
     A hora, no formato 12 horas am/pm
‘\A’
     A hora, no formato 24 horas HH:MM
‘\u’
     O nome de usuário do usuário atual.
‘\v’
     A versão de Bash (por exemplo, 2.00)
‘\V’
     A versão de lançamento de Bash, versão + nível de correção (por
     exemplo, 2.00.0)
‘\w’
     O diretório de trabalho atual, com ‘$HOME’ abreviada com um til
     (utiliza a variável ‘$PROMPT_DIRTRIM’).
‘\W’
     O nome de base de ‘$PWD’, com ‘$HOME’ abreviada com um til.
‘\!’
     O número de histórico desse comando.
‘\#’
     O número de comando desse comando.
‘\$’
     Se o uid efetivo for 0, ‘#’, do contrário ‘$’.
‘\NNN’
     O carácter cujo código ASCII for o valor octal NNN.
‘\\’
     Uma barra invertida.
‘\[’
     Inicia uma sequência de caracteres não imprimíveis.  Isso poderia
     ser utilizado para embutir uma sequência de controle de terminal no
     prompt.
‘\]’
     Finaliza uma sequência de caracteres não imprimíveis.

   O número de comando e o número de histórico são usualmente
diferentes: o número de histórico de um comando é a posição dele na
lista de histórico, a qual pode incluir comandos restaurados a partir do
arquivo de histórico (veja-se *note Facilidades do Histórico de Bash::),
enquanto que o número de comando é a posição na sequência de comandos
executada durante a atual sessão do shell.

   Após a string ser decodificada, ela é expandida via expansão de
parâmetro, substituição de comando, expansão aritmética, e remoção de
aspas, sujeito ao valor da opção de shell ‘promptvars’ (veja-se *note
Comandos Internos ao Bash::).


File: bashref-pt_BR.info,  Node: O Shell Restrito,  Next: O Modo POSIX de Bash,  Prev: Controlando o Prompt,  Up: Características de Bash

6.10 O Shell Restrito
=====================

Se Bash for inicializado com o nome ‘rbash’, ou a opção ‘--restricted’
ou ‘-r’ for fornecida na invocação, então o shell se torna restrito.  Um
shell restrito é utilizado para configurar um ambiente mais controlado
que o shell padrão.  Um shell restrito se comporta identicamente a
‘bash’ com exceção que o seguinte é proibido ou não realizado:

   • Mudança de diretórios com o comando interno ‘cd’.
   • Configurar ou desconfigurar os valor das variáveis ‘SHELL’, ‘PATH’,
     ‘ENV’, ou ‘BASH_ENV’.
   • Especificação de nomes de comandos contendo barras.
   • Especificação de um nome de arquivo contendo uma barra como um
     argumento para o comando interno ‘.’
   • Especificação de um nome de arquivo contendo uma barra como um
     argumento para a opção ‘-p’ para o comando interno ‘hash’.
   • Importação de definições de função a partir do ambiente de shell na
     inicialização.
   • Análise do valor de ‘SHELLOPTS’ a partir do ambiente de shell na
     inicialização.
   • Redirecionamento de saída utilizando-se os operadores de redireção
     ‘>’, ‘>|’, ‘<>’, ‘>&’, ‘&>’, e ‘>>’.
   • Utilização do comando interno ‘exec’ para substituir o shell com um
     outro comando.
   • Adicionar ou deletar comandos internos com as opções ‘-f’ e ‘-d’
     para o comando interno ‘enable’.
   • Utilizar o comando interno ‘enable’ para habilitar comandos
     internos de shell desabilitados.
   • Especificar a opção ‘-p’ para o comando interno ‘command’.
   • Desligar o modo restrito com ‘set +r’ ou ‘set +o restricted’.

   Essas restrições são aplicadas após quaisquer arquivos de
inicialização serem lidos.

   Quando um comando que for encontrado como sendo um script de shell é
executado (veja-se *note Scripts de Shell::), ‘rbash’ desliga quaisquer
restrições no shell gerado para executar o script.


File: bashref-pt_BR.info,  Node: O Modo POSIX de Bash,  Prev: O Shell Restrito,  Up: Características de Bash

6.11 O Modo POSIX de Bash
=========================

Inicializar Bash com a opção de linha de comando ‘--posix’, ou executar
‘set -o posix’ enquanto Bash estiver em execução, fará com que Bash se
conforme mais proximamente ao padrão POSIX, modificando o comportamento
para coincidir com aquele especificado por POSIX em áreas onde o padrão
Bash difere.

   Quando invocado como ‘sh’, Bash entra no modo POSIX após a leitura
dos arquivos de inicialização.

   A seguinte lista é aquilo que é modificado quando ‘modo POSIX’ está
em efeito:

  1. Quando um comando na tabela hash não existe mais, Bash
     re-pesquisará ‘$PATH’ para encontrar a localização nova.  Isso
     também está disponível com ‘shopt -s checkhash’.

  2. A mensagem impressa pelo código de controle de tarefa e comandos
     internos quando uma tarefa sai com um código diferente de zero é
     ‘Done(status)’.

  3. A mensagem impressa pelo código de controle de tarefa e comandos
     internos quando uma tarefa é parada é ‘Stopped(SIGNAME)’, onde
     SIGNAME é, por exemplo, ‘SIGTSTP’.

  4. O comando interno ‘bg’ utiliza o formato exigido para descrever
     cada tarefa colocada em segundo plano, o qual não inclui uma
     indicação de quando a tarefa é a tarefa atual ou prévia.

  5. As palavras reservadas que aparecerem em um contexto onde palavras
     reservadas são reconhecidas não se sujeitam a expansão de apelidos.

  6. As expansões POSIX ‘PS1’ e ‘PS2’ de ‘!’ para o número de histórico
     e ‘!!’ para ‘!’ são habilitadas, e a expansão de parâmetro é
     realizada sobre os valores de ‘PS1’ e ‘PS2’, independentemente da
     configuração da opção ‘promptvars’.

  7. Os arquivos de inicialização POSIX são executados (‘$ENV’) ao invés
     dos arquivos normais de Bash.

  8. A expansão de til somente é realizada sobre atribuições precedendo
     um nome de comando, ao invés de sobre todas as declarações de
     atribuição na linha.

  9. O comando interno ‘command’ não previne comandos internos, que
     tomem declarações de atribuição como argumentos, da expansão deles
     como declarações de atribuição; quando não em modo POSIX, comandos
     internos de atribuição perdem as suas propriedades de expansão de
     declaração de atribuição, quando precedidos por ‘command’.

  10. O arquivo de histórico padrão é ‘~/.sh_history’ (isso é o valor
     padrão de ‘$HISTFILE’).

  11. A saída de ‘kill -l’ imprime todos os nomes de sinal em uma linha
     única, separados por espaços, sem o prefixo ‘SIG’.

  12. O comando interno ‘kill’ não aceita nomes de sinal com o prefixo
     ‘SIG’.

  13. Os shell não interativos saem se FILENAME em ‘.’  FILENAME não
     seja encontrado.

  14. Os shells não interativos saem se um erro de sintaxe em uma
     expansão aritmética resultar em uma expressão inválida.

  15. Os shells não interativos saem se existir um erro de sintaxe em um
     script lido com os comandos internos ‘.’ ou ‘source’, ou em uma
     sequência de caracteres processada pelo comando interno ‘eval’.

  16. Os operadores de redireção não realizam expansão de nome de
     arquivo sobre a palavra na redireção a menos que o shell seja
     interativo.

  17. Os operadores de redireção não realizam partição de palavra sobre
     a palavra na redireção.

  18. Os nomes de função devem necessariamente ser ‘name’s válidos de
     shell.  Isto é, eles não podem conter outros caracteres que não
     letras, dígitos, e sublinhados, e não podem iniciar com um dígito.
     Declarar uma função com um nome inválido causa um erro fatal de
     sintaxe em shells não interativos.

  19. Os nomes de função não podem ser os mesmos que os de algum dos
     comandos internos POSIX especiais.

  20. Os comandos internos POSIX especiais são encontrados antes das
     funções de shell durante a procura de comando.

  21. A palavra reservada ‘time’ pode ser utilizada por ela mesma como
     um comando.  Quando utilizada dessa maneira, ela exibe estatísticas
     de temporização para o shell e seus filhos completados.  A variável
     ‘TIMEFORMAT’ controla o formato da informação de temporização.

  22. Quando da análise e expansão de uma expansão ${…} que aparece
     dentro de aspas duplas, aspas simples não mais são especiais e não
     podem ser utilizadas para encapsular uma chave em fechamento ou
     outro carácter especial, a menos que o operador seja um daqueles
     definidos para realizar a remoção de padrão.  Nesse caso, as aspas
     simples não tem de aparecer como pares coincididos.

  23. O analisador não reconhece ‘time’ como uma palavra reservada se o
     próximo token inicia com um ‘-’.

  24. Se um comando interno POSIX especial retorna um código de erro, um
     shell não interativo sai.  Os erros fatais são aqueles listados no
     padrão POSIX, e incluem coisas como a análise de opções incorretas,
     erros de redireção, erros de atribuição a variável para atribuições
     que precedem o nome de comando, e assim por diante.

  25. Um shell não interativo sai com um código de erro se um erro de
     atribuição a variável ocorrer quando nenhum nome de comando seguir
     as declarações de atribuição.  Um erro de atribuição a variável
     ocorre, por exemplo, quando da tentativa de atribuir um valor para
     uma variável somente leitura.

  26. Um shell não interativo sai com um código de erro se um erro de
     atribuição a variável ocorrer em uma declaração de atribuição
     precedendo um comando interno especial, porém não com qualquer
     outro comando simples.

  27. Um shell não interativo sai com um código de erro se a variável de
     iteração em uma declaração ‘for’ ou a variável de seleção em uma
     declaração ‘select’ for uma variável somente leitura.

  28. A substituição de processo não está disponível.

  29. Enquanto a indireção de variável estiver disponível, ela não pode
     ser aplicada aos parâmetros especiais ‘#’ e ‘?’.

  30. As declarações de atribuição precedendo comandos internos POSIX
     especiais persistem no ambiente de shell após o comando interno
     completar.

  31. As declarações de atribuição precedendo as chamadas de função de
     shell persistem no ambiente de shell após a função retornar, como
     se um comando interno POSIX especial tivesse sido executado.

  32. Os comandos internos ‘export’ e ‘readonly’ exibem suas saídas no
     formato exigido por POSIX.

  33. O comando interno ‘trap’ exibe nomes de sinal sem o prefixo ‘SIG’.

  34. O comando interno ‘trap’ não verifica o primeiro argumento para
     uma possível especificação de sinal e reverte o manipulador de
     sinal para a disposição original se estiver, a menos que argumento
     consista unicamente de dígitos e for um número válido de sinal.  Se
     usuários desejarem reconfigurar o manipulador para um dado sinal
     para a disposição original, então eles deveriam utilizar ‘-’ como o
     primeiro argumento.

  35. Os comandos internos ‘.’ e ‘source’ não pesquisam o diretório
     atual em busca de argumento de nome de arquivo se o argumento não
     for encontrado pesquisando-se ‘PATH’.

  36. Os sub-shells criados para executar substituições de comando
     herdam o valor da opção ‘-e’ do shell pai.  Quando não no modo
     POSIX, Bash limpa a opção ‘-e’ em tais sub-shells.

  37. A expansão de apelido sempre está habilitada, mesmo em shells não
     interativos.

  38. Quando o comando interno ‘alias’ exibe definições de apelidos, ele
     não os exibe com um ‘alias ’ no início, a menos que a opção ‘-p’
     seja fornecida.

  39. Quando o comando interno ‘set’ for invocado sem opções, ele não
     exibe definições e nomes de função de shell.

  40. Quando o comando interno ‘set’ for invocado sem opções, ele exibe
     valores de variáveis sem aspas, a menos que eles contenham
     meta-caracteres de shell, mesmo se o resultado contém caracteres
     não imprimíveis.

  41. Quando o comando interno ‘cd’ for invocado no modo LOGICAL, e o
     nome de caminho construído a partir de ‘$PWD’e o nome de diretório
     fornecido como um argumento não se refere a um diretório existente,
     ‘cd’ falhará, ao invés de retornar ao modo PHYSICAL.

  42. O comando interno ‘pwd’ verifica se o valor que ele imprime é o
     mesmo que o diretório atual, mesmo se não for pedido a ele para
     checar o sistema de arquivo com a opção ‘-P’.

  43. Quando da listagem do histórico, o comando interno ‘fc’ não inclui
     uma indicação de quando ou não uma entrada de histórico foi
     modificada.

  44. O editor padrão utilizado por ‘fc’ é ‘ed’.

  45. Os comandos internos ‘type’ e ‘command’ não reportarão um arquivo
     não executável como tendo sido encontrado, apesar que o shell
     tentará executar tal arquivo se ele for o único arquivo assim
     nominado encontrado no ‘$PATH’.

  46. O modo de edição ‘vi’ invocará o editor ‘vi’ diretamente quando o
     comando ‘v’ for executado, ao invés de verificar ‘$VISUAL’ e
     ‘$EDITOR’.

  47. Quando a opção ‘xpg_echo’ estiver habilitada, Bash não tenta
     interpretar quaisquer argumentos para ‘echo’ como opções.  Cada
     argumento é exibido, após os caracteres de escape serem
     convertidos.

  48. O comando interno ‘ulimit’ utiliza um tamanho de bloco de 512
     bytes para as opções ‘-c’ e ‘-f’.

  49. A chegada de ‘SIGCHLD’ quando um coletor estiver configurado sobre
     ‘SIGCHLD’ não interrompe o comando interno ‘wait’ e faz com que ele
     retorne imediatamente.  O comando coletor é executado uma vez para
     cada filho que sai.

  50. O comando interno ‘read’ pode ser interrompido por um sinal para o
     qual um coletor tenha sido configurado.  Se Bash recebe um sinal
     coletado enquanto executando ‘read’, então o manipulador de coletor
     executa e ‘read’, retorna um código de saída maior que 128.

   Existe outro comportamento POSIX que Bash não implementa por padrão
mesmo quando no modo POSIX.  Especificamente:

  1. O comando interno ‘fc’ verifica ‘$EDITOR’ como um programa para
     editar entradas de histórico se ‘FCEDIT’ estiver desconfigurada, no
     lugar de diretamente considerar como padrão ‘ed’.  ‘fc’ utiliza
     ‘ed’ se ‘EDITOR’ estiver desconfigurada.

  2. Conforme apontado acima, Bash exige que a opção ‘xpg_echo’ esteja
     habilitada para que o comando interno ‘echo’ seja completamente
     conformante.

   Bash pode ser configurado para ser conformante com POSIX por padrão,
especificando-se ‘--enable-strict-posix-default’ para ‘configure’ quando
da construção (veja-se *note Características Opcionais::).


File: bashref-pt_BR.info,  Node: Controle de Tarefa,  Next: Edição de Linha de Comando,  Prev: Características de Bash,  Up: Top

7 Controle de Tarefa
********************

Este capítulo discute o que é o controle de tarefas, como ele funciona,
e como Bash te permite acessar as facilidades desse controle.

* Menu:

* Fundamentos do Controle de Tarefa::		Como o controle de tarefas funciona.
* Comandos Internos do Controle de Tarefa::	Os comandos internos do Bash utilizados
				para interagir com o controle de
				tarefas.
* Variáveis do Controle de Tarefa::	Variáveis que o Bash utiliza para
				personalizar o controle de tarefas.


File: bashref-pt_BR.info,  Node: Fundamentos do Controle de Tarefa,  Next: Comandos Internos do Controle de Tarefa,  Up: Controle de Tarefa

7.1 Fundamentos do Controle de Tarefa
=====================================

O controle de tarefas se refere à habilidade de parar (suspender)
seletivamente a execução de processos e continuar (resumir) a execução
deles num ponto mais tarde.  Um usuário tipicamente emprega essa
facilidade via uma interface interativa fornecida conjuntamente pelo
driver de terminal do núcleo do sistema operacional e por Bash.

   O shell associa um JOB com cada canal de comunicação.  O shell mantém
uma tabela das tarefas atualmente em execução, as quais podem ser
listadas com o comando ‘jobs’.  Quando Bash inicia uma tarefa
assincronamente, ele imprime uma linha que se parece com isto:
     [1] 25647
indicando que essa tarefa é a tarefa número 1 e que o ID de processo do
último processo no canal de comunicação associado com essa tarefa é
25647.  Bash utiliza a abstração de JOB como uma base para o controle de
tarefa.

   Para facilitar a implementação da interface de usuário para o
controle de tarefa, o sistema operacional mantém a noção de ID de grupo
de processo de terminal atual.  Os membros desse grupo de processos
(processos cujo ID de grupo de processo seja igual ao atual ID de grupo
de processo de terminal) recebem sinais gerados por teclado tais como
‘SIGINT’.  Diz-se que esses processos estão no primeiro plano.  Os
processos de segundo plano são aqueles cujo ID de grupo de processo
difere do ID de grupo de processo do terminal; tais processos estão
imunes aos sinais gerados por teclado.  Apenas aos processos de primeiro
plano é permitido ler a partir de ou, se o usuário especifica com ‘stty
tostop’, escrever para o terminal.  Aos processos de segundo plano que
tentam ler a partir (escrever para quando ‘stty tostop’ está em efeito)
do terminal é enviado um sinal ‘SIGTTIN’ (‘SIGTTOU’) pelo driver de
terminal do kernel, o qual, a menos que capturado, suspende o processo.

   Se o sistema operacional no qual Bash está em execução suporta
controle de tarefa, então Bash contém facilidades para utilizá-lo.
Digitar-se o carácter SUSPEND (tipicamente ‘^Z’, Control-Z) enquanto um
processo está em execução faz com que esse processo seja parado e
retorne o controle para Bash.  O usuário então manipula o estado dessa
tarefa, utilizando o comando ‘bg’ para continuá-lo no primeiro plano, ou
o comando ‘kill’ para matá-lo.  Um ‘^Z’ tem efeito imediatamente, e tem
o efeito colateral adicional de fazer com que saída pendente e
autocompletar serem descartados.

   Existe um número de maneiras de se referir a uma tarefa no shell.  O
carácter ‘%’ introduz uma especificação de tarefa (JOBSPEC).

   Um número de tarefa ‘n’ pode ser referenciado como ‘%n’.  Os símbolos
‘%%’ e ‘%+’ se referem à noção do shell da tarefa atual, a qual é a
última tarefa parada enquanto ela estava no primeiro plano ou
inicializada no segundo plano.

   Um único ‘%’ (sem acompanhamento da especificação de tarefa) também
se refere à tarefa atual.  A tarefa previa pode ser referenciada
utilizando-se ‘%-’.  Se existir apenas uma tarefa única, então ‘%+’ e
‘%-’ podem ambos serem utilizados para se referir àquela tarefa.  Na
saída relativa à tarefas (por exemplo, a saída do comando ‘jobs’), a
tarefa atual sempre é rotulada com um ‘+’, e a tarefa prévia com um ‘-’.

   Uma tarefa também pode ser referenciada utilizando-se um prefixo do
nome utilizado para inicializá-la, ou utilizando-se uma parte da
sequência de caracteres que aparece na sua linha de comando.  Por
exemplo, ‘%ce’ se refere à tarefa ‘ce’ parada.  Utilizando-se ‘%?ce’,
por outro lado, se refere a qualquer tarefa contendo a sequência de
caracteres ‘ce’ em sua linha de comando.  Se o prefixo ou parte da
sequencia de caracteres coincide com mais que uma tarefa, então Bash
reporta um erro.

   Em poucas palavras, uma tarefa pode ser utilizada para se trazer para
o primeiro plano: ‘%1’ é um sinônimo para ‘fg %1’, trazendo a tarefa 1
do segundo plano para o primeiro plano.  Similarmente, ‘%1 &’ suspende a
tarefa 1 no primeiro plano, equivalente a ‘bg %1’.

   O shell aprende imediatamente quando uma tarefa muda de estado.
Normalmente, Bash aguarda até que esteja prestes a imprimir um prompt
antes de reportar modificações em um estado da tarefa, de forma a não
interromper qualquer outra entrada.  Se a opção ‘-b’ para o comando
interno ‘set’ estiver habilitada, então reporta tais modificações
imediatamente (veja-se *note O Comando Interno Set::).  Qualquer coletor
sobre ‘SIGCHLD’ é executado para cada processo filho que sai.

   Se uma tentativa de sair de Bash for feita enquanto tarefas estão
paradas, (ou em execução, se a opção ‘checkjobs’ estiver habilitada –
veja-se *note O Comando Interno Shopt::), então o shell imprime uma
mensagem de alerta, e se a opção ‘checkjobs’ estiver habilitada, lista
as tarefas e suas situações.

   O comando ‘jobs’ pode então ser utilizado para inspecionar os estados
das tarefas.  Se uma segunda tentativa de sair for feita, sem um comando
interveniente, então Bash não imprime outro alerta, e quaisquer tarefas
paradas são terminadas.


File: bashref-pt_BR.info,  Node: Comandos Internos do Controle de Tarefa,  Next: Variáveis do Controle de Tarefa,  Prev: Fundamentos do Controle de Tarefa,  Up: Controle de Tarefa

7.2 Comandos Internos do Controle de Tarefa
===========================================

‘bg’
          bg [JOBSPEC …]

     Continua a execução de cada tarefa JOBSPEC suspensa no segundo
     plano, como se ela tivesse sido inicializada com ‘&’.  Se JOBSPEC
     não for fornecida, então a tarefa atual é utilizada.  O código de
     retorno é zero, a menos que esse comando interno seja executado
     quando o controle de tarefa não esteja habilitado, ou, quando
     executado com o controle de tarefa habilitado, qualquer JOBSPEC não
     foi encontrado ou especifica uma tarefa que foi inicializada sem
     controle de tarefa.

‘fg’
          fg [JOBSPEC]

     Continua a execução da tarefa JOBSPEC no primeiro plano e a faz a
     tarefa atual.  Se JOBSPEC não for fornecida, então a tarefa atual é
     utilizada.  O código de retorno é aquele do comando colocado no
     primeiro plano, ou diferente de zero se executado quando o controle
     de tarefa estiver desabilitado ou, quando executado com o controle
     de tarefa habilitado, JOBSPEC não especificar uma tarefa válida ou
     JOBSPEC especifica uma tarefa que foi inicializada sem controle de
     tarefa.

‘jobs’
          jobs [-lnprs] [JOBSPEC]
          jobs -x COMMAND [ARGUMENTS]

     A primeira forma lista as tarefas ativas.  As opções tem os
     seguintes significados:

     ‘-l’
          Lista IDs de processos em adição à informação normal.

     ‘-n’
          Exibe informação somente sobre tarefas que tiveram estado
          modificado desde quando o usuário foi notificado mais
          recentemente do estado delas.

     ‘-p’
          Lista somente o ID de processo do líder de grupo de processo
          da tarefa.

     ‘-r’
          Exibe apenas tarefas em execução.

     ‘-s’
          Exibe apenas tarefas paradas.

     Se JOBSPEC for dada, então a saída é restrita à informação sobre
     aquela tarefa.  Se JOBSPEC não for fornecida, então a situação de
     todas as tarefas é listada.

     Se a opção ‘-x’ for fornecida, então ‘jobs’ substitui qualquer
     JOBSPEC encontrado em COMMAND ou ARGUMENTS com o correspondente ID
     de grupo de processo, e executa COMMAND, passando a ele ARGUMENTs,
     retornando seu código de saída.

‘kill’
          kill [-s SIGSPEC] [-n SIGNUM] [-SIGSPEC] JOBSPEC or PID
          kill -l [EXIT_STATUS]

     Envia um sinal especificado por SIGSPEC ou SIGNUM para o processo
     nomeado pela especificação de tarefa JOBSPEC ou ID de processo PID.
     SIGSPEC é ou um nome de sinal sem distinção entre maiúsculas e
     minúsculas, tal como ‘SIGINT’ (com ou sem o prefixo ‘SIG’) ou um
     número de sinal; SIGNUM é um número de sinal.  Se SIGSPEC e SIGNUM
     não estiverem presentes, então ‘SIGTERM’ é utilizado.  A opção ‘-l’
     lista os nomes de sinal.  Se quaisquer argumentos forem fornecidos
     quando ‘-l’ for dada, então os nomes dos sinais correspondentes aos
     argumentos são listados, e o código de retorno é zero.  EXIT_STATUS
     é um número que especifica um número de sinal ou a situação de
     saída de um processo terminado por um sinal.  O código de retorno é
     zero se pelo menos um sinal foi enviado com sucesso, ou diferente
     de zero se um erro ocorre ou uma opção inválida é encontrada.

‘wait’
          wait [-n] [JOBSPEC or PID …]

     Aguarda até que o processo filho especificado por cada ID de
     processo PID ou especificação de tarefa JOBSPEC saia e retorna a
     situação de saída do último comando aguardado.  Se uma
     especificação de tarefa for dada, então todos os processos na
     tarefa são aguardados.  Se nenhum argumento for dado, então todos
     os processos filho atualmente ativos são aguardados, e o código de
     retorno é zero.  Se a opção ‘-n’ for fornecida, então ‘wait’
     aguarda qualquer tarefa terminar e retorna sua situação de saída.
     Se nem JOBSPEC nem PID especifica um processo filho ativo do shell,
     então o código de retorno é 127.

‘disown’
          disown [-ar] [-h] [JOBSPEC …]

     Sem opções, remove cada JOBSPEC da tabela de tarefas ativas.  Se a
     opção ‘-h’ for dada, então a tarefa não é removida da tabela, porém
     é marcada, de forma que ‘SIGHUP’ não é enviado para a tarefa se o
     shell recebe um ‘SIGHUP’.  Se JOBSPEC não estiver presente, e nem a
     opção ‘-a’ nem a ‘-r’ forem fornecidas, então a tarefa atual é
     utilizada.  Se nenhuma JOBSPEC for fornecida, então a opção ‘-a’
     significa remover ou marcar todas as tarefas; a opção ‘-r’ sem um
     argumento JOBSPEC restringe a operação a tarefas em execução.

‘suspend’
          suspend [-f]

     Para a execução deste shell até que ele receba um sinal ‘SIGCONT’.
     Um shell de login não pode ser parado; a opção ‘-f’ pode ser
     utilizada para anular isso e forçar a suspensão.

   Quando o controle de tarefa não está ativo, os comandos internos
‘kill’ e ‘wait’ não aceitam argumentos JOBSPEC.  Eles devem
necessariamente ser alimentados com IDs de processos.


File: bashref-pt_BR.info,  Node: Variáveis do Controle de Tarefa,  Prev: Comandos Internos do Controle de Tarefa,  Up: Controle de Tarefa

7.3 Variáveis do Controle de Tarefa
===================================

‘auto_resume’
     Essa variável controla como o shell interage com o usuário e o
     controle de tarefa.  Se essa variável existir, então os comandos
     simples de palavra única sem redireções são tratados como
     candidatos para o reinício de uma tarefa existente.  Não existe
     ambiguidade que seja permitida; se existe mais que uma tarefa
     iniciando com a sequência de caracteres digitada, então a mais
     recentemente acessada tarefa será selecionada.  O nome de uma
     tarefa parada, nesse contexto, é a linha de comando utilizada para
     iniciá-la.  Se essa variável for configurada para o valor ‘exact’,
     então a sequência de caracteres fornecida deve necessariamente
     coincidir exatamente com o nome de uma tarefa parada; se
     configurada para ‘substring’, então a sequência de caracteres
     fornecida precisa coincidir com uma parte da sequência de
     caracteres do nome de uma tarefa parada.  O valor de ‘substring’,
     provê funcionalidade análoga para o ID de tarefa ‘%?’ (veja-se
     *note Fundamentos do Controle de Tarefa::).  Se configurada para
     qualquer outro valor, então a sequência de caracteres fornecida
     deve necessariamente ser um prefixo de um nome da tarefa parada;
     isso provê funcionalidade análoga para o ID de tarefa ‘%’.


File: bashref-pt_BR.info,  Node: Edição de Linha de Comando,  Next: Utilizando o Histórico Interativamente,  Prev: Controle de Tarefa,  Up: Top

8 Edição de Linha de Comando
****************************

Este capítulo descreve as características básicas da interface de edição
de linha de comando GNU.  A edição de linha de comando é provida pela
biblioteca Readline, a qual é utilizada por vários programas diferentes,
incluindo Bash.  A edição de linha de comando está habilitada por padrão
quando da utilização de um shell interativo, a menos que a opção
‘--noediting’ seja fornecida na invocação de shell.  A edição de linha
também é utilizada quando da utilização da opção ‘-e’ para o comando
interno ‘read’ (veja-se *note Comandos Internos ao Bash::).  Por padrão,
os comandos de edição de linha são similares àqueles de Emacs.  Uma
interface de edição de linha ao estilo do vi também está disponível.  A
edição de linha pode ser habilitada a qualquer tempo utilizando-se as
opções ‘-o emacs’ ou ‘-o vi’ para o comando interno ‘set’ (veja-se *note
O Comando Interno Set::), ou desabilitadas utilizando-se as opções ‘+o
emacs’ ou ‘+o vi’ para ‘set’.

* Menu:

* Introduction and Notation::	Notação utilizada neste texto.
* Interação com Readline::	O conjunto minimo de comandos para se
				editar uma linha.
* Arquivo Init de Readline::		Personalizando Readine a partir da visão
				do usuário.
* Comandos de Readline Vinculáveis::	Uma descrição da maioria dos comandos de
				Readline disponíveis para vinculação.
* Modo vi de Readline::		Uma descrição curta de como fazer com
				que Readline se comporte como o editor
				vi.
* Complementação Programável::	Como especificar as completações
				possíveis para um comando específico.
* Comandos Internos à Complementação Programável::	Comandos internos para
					especificar como completar
					argumentos para um comando
					particular.
* Um Exemplo de Complementação Programável::	Uma função de shell exemplo para
					gerar possíveis completações.


File: bashref-pt_BR.info,  Node: Introduction and Notation,  Next: Interação com Readline,  Up: Edição de Linha de Comando

8.1 Introdução à Edição de Linha
================================

Os parágrafos seguintes descrevem a notação utilizada para representar
toques de tecla.

   O texto ‘C-k’ é lido como ‘Control-K’ e descreve o carácter produzido
quando a tecla <k> é teclada enquanto a tecla Control está mantida
pressionada.

   O texto ‘M-k’ é lido como ‘Meta-K’ e descreve o carácter produzido
quando a tecla Meta (se você tiver uma) é mantida pressionada, e a tecla
<k> é teclada.  A tecla Meta é rotulada como <ALT> em muitos teclados.
Em teclados com duas tecladas rotuladas como <ALT> (usualmente em ambos
os lados da barra de espaços), o <ALT> no lado esquerdo é geralmente
configurado para funcionar como uma tecla Meta.  A tecla <ALT> na
direita também pode ser configurada para funcionar como uma tecla Meta
ou pode ser configurada como algum outro modificador, tal como uma tecla
Compose para a digitação de caracteres acentuados.

   Se você não tiver uma tecla Meta ou <ALT>, ou outra tecla funcionando
como uma tecla Meta, o pressionamento de tecla idêntico pode ser gerado
digitando-se <ESC> _primeiro_, e então digitando <k>.  Qualquer dos
processos é conhecido como “metafying” a tecla <k>.

   O texto ‘M-C-k’ é lido como ‘Meta-Control-k’ e descreve o carácter
produzido por “metafying” ‘C-k’.

   Adicionalmente, várias teclas tem seus próprios nomes.
Especificamente, <DEL>, <ESC>, <LFD>, <SPC>, <RET>, e <TAB> todas
significam elas mesmas quando vistas neste texto, ou em um arquivo init
(veja-se *note Arquivo Init de Readline::).  Se no seu teclado falta uma
tecla <LFD>, a digitação de <C-j> produzirá o carácter desejado.  A
tecla <RET> pode ser rotulada como <Return> ou <Enter> em alguns
teclados.


File: bashref-pt_BR.info,  Node: Interação com Readline,  Next: Arquivo Init de Readline,  Prev: Introduction and Notation,  Up: Edição de Linha de Comando

8.2 Interação com Readline
==========================

Frequentemente, durante uma sessão interativa, você digita uma linha
longa de texto, apenas para se dar conta de que a primeira palavra
naquela linha está escrita errada.  A biblioteca Readline te dá um
conjunto de comandos para manipular o texto a medida que você o digita,
te permitindo simplesmente consertar seu erro, e não te forçando a
redigitar a maioria da linha.  Utilizando esses comandos de edição, você
movimenta o cursor para o local que necessita de correção, e deleta ou
insere o texto das correções.  Então, que você estiver satisfeito com a
linha, você simplesmente pressiona <RET>.  Você não precisa estar ao
final da linha para pressionar <RET>.; a linha inteira é aceita
independentemente da localização do cursor dentro da linha.

* Menu:

* Mínimo Essencial sobre Readline::	O mínimo que você precisa saber sobre
				Readline.
* Comandos de Movimento em Readline::	Movimentando-se ao longo da linha de
				entrada.
* Comandos Readline para Killing (``Recortar'')::	Como deletar
texto, e como resgatá-lo.
* Argumentos em Readline::		Dando argumentos numéricos a comandos.
* Searching::			Procurando ao longo das linhas
				anteriores.


File: bashref-pt_BR.info,  Node: Mínimo Essencial sobre Readline,  Next: Comandos de Movimento em Readline,  Up: Interação com Readline

8.2.1 Mínimo Essencial sobre Readline
-------------------------------------

Para colocar caracteres em uma linha, simplesmente digite-os.  O
carácter digitado aparece onde o cursor estava, e então o cursor se
movimenta um espaço para a direita.  Se você errar a digitação de um
carácter, você pode utilizar o seu carácter de apagamento para voltar e
deletar o carácter digitado errado.

   Algumas vezes você pode digitar um carácter errado, e não se dar
conta do erro até que você tenha digitado vários outros caracteres.
Nesse caso, você pode digitar ‘C-b’ para movimentar o cursor para a
esquerda, e então corrigir seu erro.  Posteriormente, você pode mover o
cursor para a direita com ‘C-f’.

   Quando você adiciona texto no meio de uma linha, você notará que os
caracteres do lado direito do cursor são "empurrados" para dar espaço
para o texto que você acabou de inserir.  Da mesma maneira, quando você
deleta texto sob o cursor, os caracteres do lado direito do cursor são
"puxados" para preencher o espaço em braco criado pela remoção do texto.
Segue uma lista do essencial para a edição do texto de uma linha de
entrada.

‘C-b’
     Movimenta um carácter para trás.
‘C-f’
     Movimenta um carácter para frente.
<DEL> ou <Backspace>
     Apaga o carácter a esquerda do cursor.
‘C-d’
     Apaga o carácter embaixo do cursor.
Printing characters
     Insere o carácter na linha na posição do cursor.
‘C-_’ ou ‘C-x C-u’
     Desfaz o comando de edição mais recente.  Você pode desfazer todo o
     comando até uma linha vazia.

(Dependendo da sua configuração, a tecla <Backspace> está configurada
para apagar o carácter a esquerda do cursor e a tecla <DEL> configurada
para apagar o carácter embaixo do cursor, como ‘C-d’, em vez do carácter
a esquerda do cursor).


File: bashref-pt_BR.info,  Node: Comandos de Movimento em Readline,  Next: Comandos Readline para Killing (``Recortar''),  Prev: Mínimo Essencial sobre Readline,  Up: Interação com Readline

8.2.2 Comandos de Movimento em Readline
---------------------------------------

A tabela acima descreve os toques mais básicos que você precisa com o
objetivo de editar a linha de entrada.  Para a sua conveniência, muitos
outros comandos foram adicionados juntamente a ‘C-b’, ‘C-f’, ‘C-d’, e
<DEL>.  Aqui estão alguns comandos para movimentar-se mais rapidamente
ao longo da linha.

‘C-a’
     Movimenta para o início da linha.
‘C-e’
     Movimenta para o final da linha.
‘M-f’
     Movimenta uma palavra para frente, onde uma palavra é composta de
     letras e dígitos.
‘M-b’
     Movimenta uma palavra para trás.
‘C-l’
     Limpa a tela, reimprimindo a linha atual no topo.

   Perceba como ‘C-f’ movimenta o cursor um carácter para frente,
enquanto que ‘M-f’ movimenta o cursor uma palavra para frente.  É uma
convenção não escrita que o pressionamento de teclas de controle opera
sobre caracteres enquanto que o pressionamento de tecla meta opera sobre
palavras.


File: bashref-pt_BR.info,  Node: Comandos Readline para Killing (``Recortar''),  Next: Argumentos em Readline,  Prev: Comandos de Movimento em Readline,  Up: Interação com Readline

8.2.3 Comandos Readline para Killing (“Recortar”)
-------------------------------------------------

“Killing” texto significa retirar o texto da linha, porém salvá-lo fora
para uso posterior, usualmente com “yanking” (reinserir) o texto na
linha.  ("Recortar" e "colar" são jargão mais recente para ‘kill’ e
‘yank’).

   Se a descrição para um comando diz que ele ‘kills’ texto, então você
pode ter certeza que você pode ter o texto de volta em um local
diferente (ou o mesmo) depois.

   Quando você utiliza um comando kill, o texto é salvo em um
“kill-ring”.  Qualquer número de kills consecutivos salva todo o texto
killed junto, de forma que quando você yank o texto de volta, você obtém
o texto todo.  O "kill ring" não é específico de linha; o texto que você
"matou" em uma linha digitada previamente está disponível para ser
"arrancado" de volta mais tarde, quando você estiver digitando outra
linha.

   Aqui está a lista de comandos para recortar "killing" texto.

‘C-k’
     Recorta o texto a partir da posição atual do cursor até o final da
     linha.

‘M-d’
     Recorta a partir do cursor até o final da palavra atual, ou, se
     entre palavras, até o final da próxima palavra.  Os limites de
     palavra são os mesmos que aqueles utilizados por ‘M-f’.

‘M-<DEL>’
     Recorta a partir do cursor o início da palavra atual, ou, se entre
     palavras, até o início da palavra anterior.  Os limites de palavra
     são os mesmos que aqueles utilizados por ‘M-b’.

‘C-w’
     Recorta a partir do cursor até o espaço em braco anterior.  Isso é
     diferente de ‘M-<DEL>’, pois os limites de palavra diferem.

   Aqui está como "arrancar" (“yank”) o texto de volta para a linha.
Yanking significa copiar o texto mais recentemente "killed" a partir da
área intermediária de memória "kill".

‘C-y’
     "Yank" o texto mais recentemente "killed" de volta na área
     intermediária de memória no cursor.

‘M-y’
     Rotaciona o "kill-ring", e "yank" o novo topo.  Você somente pode
     fazer isso se o comando anterior for ‘C-y’ ou ‘M-y’.


File: bashref-pt_BR.info,  Node: Argumentos em Readline,  Next: Searching,  Prev: Comandos Readline para Killing (``Recortar''),  Up: Interação com Readline

8.2.4 Argumentos em Readline
----------------------------

Você pode passar argumentos numéricos aos comandos Readline.  Algumas
vezes o argumento atua como um contador de repetição, outras é o sinal
do argumento que é significante.  Se você passar um argumento negativo
para um comando o qual normalmente atua na direção para frente, então
esse comando atuará na direção para trás.  Por exemplo, para "kill"
texto de volta para o começo da linha, você pode digitar ‘M-- C-k’.

   A maneira geral de passar argumentos numéricos para um comando é
digitar meta dígitos antes do comando.  Se o primeiro "dígito" digitado
for um sinal de menos (‘-’), então o sinal do argumento será negativo.
Uma vez que você tenha digitado um meta dígito para iniciar o argumento,
você pode digitar o restante dos dígitos, e então o comando.  Por
exemplo, para dar o argumento 10 para o comando ‘C-d’, você poderia
digitar ‘M-1 0 C-d’,, o qual deletaria os próximos dez caracteres na
linha de entrada.


File: bashref-pt_BR.info,  Node: Searching,  Prev: Argumentos em Readline,  Up: Interação com Readline

8.2.5 Buscando Comandos no Histórico
------------------------------------

Readline provê comandos para a busca ao longo do histórico de comando
(veja-se *note Facilidades do Histórico de Bash::) por linhas contendo a
sequência de caracteres especificada.  Existem dois modos “incremental”
e “não-incremental”.

   As buscas incrementais iniciam antes que o usuário tenha finalizado a
digitação da sequência de caracteres de busca.  A medida que cada
carácter da sequência de caracteres de busca é digitado, Readline exibe
a próxima entrada a partir do histórico que coincida com a sequência de
caracteres digitada até agora.  Uma busca incremental exige apenas
tantos caracteres quantos necessários para encontrar a entrada de
histórico desejada.  Para pesquisar por uma sequência de caracteres
particular para trás no histórico, digite ‘C-r’.  Digitando-se ‘C-s’
pesquisa-se para frente no histórico.  Os caracteres presentes no valor
da variável ‘isearch-terminators’ são utilizados para terminar um
pesquisa incremental.  Se a essa variável não foi atribuído um valor,
então os caracteres <ESC> e ‘C-J’ terminarão uma pesquisa incremental.
‘C-g’ abortará uma pesquisa incremental e restaurará a linha original.
Quando a pesquisa é terminada, a entrada de histórico contendo a
sequência de caracteres de busca se torna a linha atual.

   Para encontrar outras entradas coincidentes na lista de histórico,
digite ‘C-r’ ou ‘C-s’, conforme apropriado.  Isso pesquisará para trás
ou para frente no histórico pela próxima entrada que coincida com a
sequência de caracteres de pesquisa digitada até agora.  Qualquer outras
sequência de tecla vinculada a um comando Readline terminará a pesquisa
e executará aquele comando.  Por exemplo, um <RET> (enter) terminará a
pesquisa e aceitará a linha, por conseguinte executando o comando a
partir da lista de histórico.  Um comando de movimento terminará a
pesquisa, tornará a última linha encontrada a linha atual, e iniciar a
edição.

   Readline se lembra da última sequência de caracteres de pesquisa
incremental.  Se dois ‘C-r’s forem digitados sem quaisquer caracteres
intervenientes que definam uma nova sequência de caracteres de busca,
então qualquer sequência de caracteres de busca guardada é utilizada.

   As buscas não incrementais leem a sequência de caracteres de pesquisa
inteira antes de iniciar a busca por linhas de histórico coincidentes.
A sequência de caracteres de busca pode ser digitada pelo usuário ou ser
parte do conteúdo da linha atual.


File: bashref-pt_BR.info,  Node: Arquivo Init de Readline,  Next: Comandos de Readline Vinculáveis,  Prev: Interação com Readline,  Up: Edição de Linha de Comando

8.3 Arquivo Init de Readline
============================

Apesar que a biblioteca Readline vem com um conjunto de vínculos de
tecla estilo Emacs instalado por padrão, é possível se utilizar um
conjunto diferente de vínculos de tecla.  Qualquer usuário pode
personalizar programas que utilizem Readline colocando comandos em um
arquivo “inputrc”, convencionalmente dentro de seu diretório "home".  O
nome desse arquivo é tomado do valor da variável de shell ‘INPUTRC’.  Se
essa variável estiver desconfigurada, então o padrão é ‘~/.inputrc’.  Se
esse arquivo não existir ou não puder ser lido, então o padrão final é
‘/etc/inputrc’.

   Quando um programa que utiliza a biblioteca Readline inicializa, o
arquivo init é lido, e as vinculações de tecla são configuradas.

   Adicionalmente, o comando ‘C-x C-r’ relê esse arquivo init, assim
incorporando quaisquer modificações que você eventualmente possa ter
feito nele.

* Menu:

* Sintaxe do Arquivo Init de Readline::	Sintaxe para os comandos no arquivo
				inputrc.
* Construtores Condicionais Init::	Vinculações de tecla condicionais no
				arquivo inputrc.
* Arquivo Init de Exemplo::		Um arquivo inputrc de exemplo.


File: bashref-pt_BR.info,  Node: Sintaxe do Arquivo Init de Readline,  Next: Construtores Condicionais Init,  Up: Arquivo Init de Readline

8.3.1 Sintaxe do Arquivo Init de Readline
-----------------------------------------

Existem somente umas poucas construções básicas permitidas no arquivo
init de Readline.  As linhas em branco são ignoradas.  As linhas
iniciando com um ‘#’ são comentários.  As linhas começando com um ‘$’
indicam construções condicionais (veja-se *note Construtores
Condicionais Init::).  Outras linhas denotam configurações de variáveis
e vinculações de teclas.

Configurações de Variáveis

     Você pode modificar o comportamento em tempo de execução de
     Readline alterando os valores de variáveis em Readline utilizando o
     comando ‘set’ dentro do arquivo init.  A sintaxe é simples:

          set VARIABLE VALUE

     Aqui, por exemplo, está como alternar da vinculação padrão de tecla
     estilo Emacs para utilizar comandos de edição de linha ‘vi’:

          set editing-mode vi

     Os nomes de variáveis e valores, onde apropriado, são reconhecidos
     sem levar em consideração maiúsculas e minúsculas.  Os nomes de
     variável não reconhecidos são ignorados.

     As variáveis booleanas (aquelas que podem ser configuradas para
     ligada ou desligada) são configuradas para ligada se o valor for
     nulo ou vazio, ON (sem levar em consideração maiúsculas e
     minúsculas), ou 1.  Qualquer outro valor resulta na variável sendo
     configurada para desligada.

     O comando ‘bind -V’ lista os nomes e valores atuais da variável
     Readline.  Veja-se *note Comandos Internos ao Bash::.

     Uma grande parte do comportamento em tempo de execução é
     modificável com as seguintes variáveis.

     ‘bell-style’
          Controla o que acontece quando Readline deseja soar o alerta
          sonoro do terminal.  Se configurado para ‘none’, então
          Readline nunca soa o alerta.  Se configurada para ‘visible’,
          então Readline utiliza um alerta visível se um estiver
          disponível.  Se configurado para ‘audible’ (o padrão),
          Readline tenta soar o alerta sonoro do terminal.

     ‘bind-tty-special-chars’
          Se configurado para ‘on’, Readline tenta vincular os
          caracteres de controle tratados especialmente pelo controlador
          de terminal do kernel para o equivalente Readline deles.

     ‘colored-stats’
          Se configurado para ‘on’, Readline exibe as completações
          possíveis utilizando cores diferentes para indicar o tipo de
          arquivo delas.  As definições de cor são tomadas do valor da
          variável de ambiente ‘LS_COLORS’.  O padrão é ‘off’.

     ‘comment-begin’
          A sequência de caracteres a inserir no inicio da linha quando
          o comando ‘insert-comment’ for executado.  O valor padrão é
          ‘"#"’.

     ‘completion-display-width’
          O número de colunas de tela utilizado para exibir possíveis
          coincidências quando da realização de completação.  O valor é
          ignorado se for menor que 0 ou maior que a largura de tela do
          terminal.  Um valor de 0 fará com que coincidências sejam
          exibidas uma por linha.  O valor pré-definido é -1.

     ‘completion-ignore-case’
          Se configurado para ‘on’, Readline realiza coincidência de
          nome de arquivo e completação em uma forma que não leva em
          consideração maiúsculas e minúsculas.  O valor pré-definido é
          ‘off’.

     ‘completion-map-case’
          Se configurado para ‘on’, e COMPLETION-IGNORE-CASE estiver
          habilitada, então Readline trata hifens (‘-’) e sublinhados
          (‘_’) como equivalentes, quando da realização de coincidência
          e completação, sem levar em consideração maiúsculas e
          minúsculas, de nome de arquivo.

     ‘completion-prefix-display-length’
          O comprimento em caracteres do prefixo comum de uma lista de
          completações possíveis que é exibida sem modificação.  Quando
          configurado para um valor maior que zero, os prefixos comuns
          maiores que esse valor são substituídos com uma elipse, quando
          da exibição de completações possíveis.

     ‘completion-query-items’
          O número das completações possíveis que determina quando o
          usuário é questionado se a lista de possibilidades deveria ser
          exibida.  Se o número de completações possíveis for maior que
          esse valor, então Readline perguntará ao usuário se ou não
          deseja visualizá-las; do contrário, elas simplesmente são
          listadas.  Essa variável deve necessariamente ser configurada
          para um número inteiro maior que ou igual a 0.  Um valor
          negativo significa que Readline nunca deveria perguntar.  O
          limite pré-definido é ‘100’.

     ‘convert-meta’
          Se configurado para ‘on’, então Readline converterá caracteres
          com o oitavo bit ligado para uma sequência de tecla ASCII,
          descartando o oitavo bit e prefixando um carácter <ESC>,
          convertendo-os para um sequência de tecla meta-prefixada.  O
          valor pré-definido é ‘on’.

     ‘disable-completion’
          Se configurado para ‘On’, Readline inibirá a completação de
          palavra.  Os caracteres de completação será inseridos na linha
          como se tivessem sido mapeados para ‘self-insert’.  O valor
          pré-definido é ‘off’.

     ‘editing-mode’
          A variável ‘editing-mode’ controla qual conjunto pré-definido
          de vinculações de tecla é utilizado.  Por predefinição,
          Readline inicializa no modo de edição Emacs, onde os toques de
          tecla são mais similares ao Emacs.  Essa variável pode ser
          configurada para ou ‘emacs’ ou ‘vi’.

     ‘echo-control-characters’
          Quando configurado para ‘on’, em sistemas operacionais que
          indicam que os suportam, Readline ecoa um carácter
          correspondente a um sinal gerado a partir do teclado.  O valor
          pré-definido é ‘on’.

     ‘enable-keypad’
          Quando configurado para ‘on’, Readline tentará habilitar o
          teclado numérico da aplicação quando ele for chamado.  Alguns
          sistemas necessitam disso para habilitar as teclas
          direcionais.  O valor pré-definido é ‘off’.

     ‘enable-meta-key’
          Quando configurado para ‘on’, Readline tentará habilitar
          qualquer tecla meta modificadora que o terminal alegue
          suportar, quando for chamado.  Em muitos terminais, a tecla
          meta é utilizada para enviar caracteres de oito bits.  O valor
          pré-definido é ‘on’.

     ‘expand-tilde’
          Se configurado para ‘on’, a expansão de til é realizada quando
          Readline tenta a completação de palavra.  O valor pré-definido
          é ‘off’.

     ‘history-preserve-point’
          Se configurado para ‘on’, o código de histórico tenta colocar
          o ponto (a posição atual do cursor) na mesma localização em
          cada linha de histórico recuperada com ‘previous-history’ ou
          ‘next-history’.  O valor pré-definido é ‘off’.

     ‘history-size’
          Configura o número máximo de entradas de histórico salvas na
          lista de histórico.  Se configurada para zero, então quaisquer
          entradas de histórico existentes são deletadas e nenhuma
          entrada nova é salva.  Se configurada para um valor menor que
          zero, então o número de entradas de histórico não é limitada.
          Por predefinição, o número de entradas de histórico não é
          limitada.

     ‘horizontal-scroll-mode’
          Essa variável pode ser configurada para ou ‘on’ ou ‘off’.  A
          configuração dela para ‘on’ significa que o texto das linhas
          sendo editadas passará na tela horizontalmente em uma única
          linha de tela quando forem maiores que a largura da tela, em
          vez de acondicioná-lo em uma nova linha de tela.  Por
          predefinição, essa variável é configurada para ‘off’.

     ‘input-meta’
          Se configurado para ‘on’, Readline habilitará a entrada de
          oito bits (não limpará o oitavo bit nos caracteres que lê),
          independentemente do que o terminal alega que pode suportar.
          O valor pré-definido é ‘off’.  O nome ‘meta-flag’ é um
          sinônimo para essa variável.

     ‘isearch-terminators’
          A sequência de caracteres dos caracteres que deveriam terminar
          uma pesquisa incremental sem executar subsequentemente o
          carácter como um comando (veja-se *note Searching::).  Se a
          essa variável não tiver sido dado um valor, então os
          caracteres <ESC> e ‘C-J’ terminarão uma pesquisa incremental.

     ‘keymap’
          Configura a ideia de Readline acerca do mapa de teclas atual
          para os comandos de vinculação de tecla.  Os nomes aceitáveis
          de ‘keymap’ são ‘emacs’, ‘emacs-standard’, ‘emacs-meta’,
          ‘emacs-ctlx’, ‘vi’, ‘vi-move’, ‘vi-command’, e ‘vi-insert’.
          ‘vi’ é equivalente a ‘vi-command’; ‘emacs’ é equivalente a
          ‘emacs-standard’.  O valor pré-definido é ‘emacs’.  O valor da
          variável ‘editing-mode’ também afeta o mapa de teclas
          pré-definido.

     ‘keyseq-timeout’
          Especifica a duração que Readline aguardará por um carácter
          quando da leitura de uma sequência de tecla ambígua (aquela
          que pode formar uma sequência de tecla completa utilizando a
          entrada lida até agora, ou pode tomar entrada adicional para
          completar uma sequência de tecla mais longa).  Se nenhuma
          entrada é recebida dentro do intervalo de tempo, então
          Readline utilizará a sequência de tecla mais curta, porém
          completa.  Readline utiliza esse valor para determinar quando
          ou não a entrada está disponível na fonte atual de entrada
          (por predefinição ‘rl_instream’).  O valor é especificado em
          milissegundos, de forma que um valor de 1000 significa que
          Readline aguardará um segundo por entrada adicional.  Se essa
          variável não estiver configurada para um valor menor que ou
          igual a zero, ou para um valor não numérico, então Readline
          aguardará até que outra tecla seja pressionada para decidir
          qual sequência de tecla completar.  O valor pré-definido é
          ‘500’.

     ‘mark-directories’
          Se configurado para ‘on’, então os nomes completados de
          diretórios terão uma barra acrescentada.  O valor pré-definido
          é ‘on’.

     ‘mark-modified-lines’
          Essa variável, quando configurada para ‘on’, faz com que
          Readline exiba um asterisco (‘*’) no inicio de linhas de
          histórico que tenham sido modificadas.  Essa variável está
          ‘off’ por predefinição.

     ‘mark-symlinked-directories’
          Se configurada para ‘on’, então os nomes completados que sejam
          vínculos simbólicos para diretórios terão uma barra
          acrescentada (sujeita ao valor de ‘mark-directories’).  O
          valor pré-definido é ‘off’.

     ‘match-hidden-files’
          Essa variável, quando configurada para ‘on’, faz com que
          Readline coincida arquivos cujos nomes iniciem com um ‘.’
          (arquivos ocultos) quando da realização de completação de nome
          de arquivo.  Se configurada para ‘off’, então o ‘.’ inicial
          deve necessariamente ser fornecido pelo usuário no nome de
          arquivo para ser completado.  Essa variável está ‘on’ por
          predefinição.

     ‘menu-complete-display-prefix’
          Se configurada para ‘on’, então a completação de menu exibe o
          prefixo comum da lista de possíveis completações (as quais
          podem estar vazias) antes de circular ao longo da lista.  O
          valor pré-definido é ‘off’.

     ‘output-meta’
          Se configurada para ‘on’, então Readline exibirá caracteres
          com o oitavo bit configurado diretamente, em vez de uma
          sequência de escape meta prefixada.  O valor pré-definido é
          ‘off’.

     ‘page-completions’
          Se configurada para ‘on’, então Readline utiliza um paginador
          interno estilo ‘more’ para exibir uma tela completa de
          possíveis completações por vez.  Essa variável está ‘on’ por
          predefinição.

     ‘print-completions-horizontally’
          Se configurada para ‘on’, então Readline exibirá as
          completações com as coincidências ordenadas horizontalmente em
          ordem alfabética, em vez de o fazer tela abaixo.  O valor
          pré-definido é ‘off’.

     ‘revert-all-at-newline’
          Se configurada para ‘on’, então Readline desfazerá todas as
          modificações para as linhas de histórico antes do retorno
          quando ‘accept-line’ for executada.  Por predefinição, as
          linhas de histórico podem ser modificadas e reter listas
          individuais de desfazer entre chamadas a ‘readline’.  O valor
          pré-definido é ‘off’.

     ‘show-all-if-ambiguous’
          Isso altera o comportamento pré-definido das funções de
          completação.  Se configurada para ‘on’, então as palavras as
          quais tenham mais que uma completação possível fazem com que
          as coincidências sejam listadas imediatamente, em vez de soar
          o alarme sonoro.  O valor pré-definido é ‘off’.

     ‘show-all-if-unmodified’
          Isso altera o comportamento pré-definido das funções de
          completação de uma maneira similar a SHOW-ALL-IF-AMBIGUOUS.
          Se configurada para ‘on’, então as palavras as quais tenham
          mais que uma completação possível sem qualquer possível
          completação parcial (as completações possíveis não
          compartilham um prefixo comum) fazem com que as coincidências
          sejam listadas imediatamente, em vez de soar o alarme sonoro.
          O valor pré-definido é ‘off’.

     ‘show-mode-in-prompt’
          Se configurado para ‘on’, então adiciona um carácter ao inicio
          do prompt, indicando o modo de edição: emacs (‘@’); comando vi
          (‘:’); ou inserção vi (‘+’).  O valor pré-definido é ‘off’.

     ‘skip-completed-text’
          Se configurada para ‘on’, então isso altera o comportamento
          pré-definido de completação quando da inserção, na linha, de
          uma coincidência única.  Essa facilidade está ativa somente
          quando da realização de completação no meio de uma palavra.
          Se habilitada, Readline não insere caracteres a partir da
          completação que coincidam com caracteres após o ponto na
          palavra sendo completada, de forma que as porções da palavra
          seguintes ao cursor não são duplicadas.  Por exemplo, se
          habilitada, a tentativa de completação quando o cursor estiver
          após o ‘e’ em ‘Makefile’ resultará em ‘Makefile’, em vez de
          ‘Makefilefile’, presumindo que exista uma única completação
          possível.  O valor pré-definido é ‘off’.

     ‘visible-stats’
          Se configurada para ‘on’, então um carácter denotando um tipo
          do arquivo é acrescentado ao nome do arquivo, quando da
          listagem das completações possíveis.  O valor pré-definido é
          ‘off’.

Key Bindings
     A sintaxe para controle das vinculações de tecla no arquivo init é
     simples.  Primeiro, você precisa encontrar o nome do comando que
     você deseja modificar.  As seções seguintes contém tabelas de nome
     de comando, a vinculação padrão, se existente, e uma breve
     descrição do que o comando faz.

     Uma vez que você saiba o nome do comando, simplesmente coloque em
     uma linha no arquivo init o nome da tecla a qual você deseja
     vincular o comando, uma vírgula, e então o nome do comando.  Não
     pode existir espaço em branco entre o nome da tecla e a vírgula –
     isso será interpretado como sendo parte do nome da tecla.  O nome
     da tecla pode ser expresso em diferentes maneiras, dependendo do
     que você acha mais confortável.

     Adicionalmente a nomes de comando, Readline permite que teclas
     sejam vinculadas a uma sequência de caracteres que é inserida
     quando a tecla for pressionada (uma MACRO).

     O comando ‘bind -p’ exibe nomes de função Readline e vinculações em
     um formato que pode ser colocado diretamente em um arquivo de
     inicialização.  veja-se *note Comandos Internos ao Bash::.

     KEYNAME: FUNCTION-NAME or MACRO
          KEYNAME é o nome de uma tecla escrito em Inglês.  Por exemplo:
               Control-u: universal-argument
               Meta-Rubout: backward-kill-word
               Control-o: "> output"

          No exemplo acima, ‘C-u’ é vinculada à função
          ‘universal-argument’, ‘M-DEL’ é vinculada à função
          ‘backward-kill-word’, e ‘C-o’ é vinculada para executar a
          macro expressa no lado direito (isto é, para inserir o texto
          ‘> output’ na linha).

          Um número de nomes simbólicos de caracteres são reconhecidos
          quando do processamento dessa sintaxe de vinculação de tecla:
          DEL, ESC, ESCAPE, LFD, NEWLINE, RET, RETURN, RUBOUT, SPACE,
          SPC, and TAB.

     "KEYSEQ": FUNCTION-NAME or MACRO
          KEYSEQ se difere de KEYNAME acima na medida em que sequências
          de caracteres que denotam uma sequência de tecla inteira podem
          ser especificadas, colocando-se a sequência de tecla entre
          aspas duplas.  Alguns escapes de tecla estilo GNU Emacs podem
          ser utilizados, como no seguinte exemplo, porém os nomes
          especiais de caracteres não são reconhecidos.

               "\C-u": universal-argument
               "\C-x\C-r": re-read-init-file
               "\e[11~": "Function Key 1"

          No exemplo acima, ‘C-u’ é novamente vinculada à função
          ‘universal-argument’ (da mesma forma que o foi no primeiro
          exemplo), ‘‘C-x’ ‘C-r’’ é vinculada à função
          ‘re-read-init-file’, e ‘<ESC> <[> <1> <1> <~>’ é vinculada
          para inserir o texto ‘Function Key 1’.

     As seguintes sequências de escape estilo GNU Emacs estão
     disponíveis quando da especificação de sequência de tecla:

     ‘\C-’
          prefixo control
     ‘\M-’
          prefixo meta
     ‘\e’
          um carácter de escape
     ‘\\’
          barra invertida
     ‘\"’
          <">, uma marca de aspa dupla
     ‘\'’
          <'>, uma aspa simples ou apóstrofo

     Adicionalmente às sequências de escape estilo GNU Emacs, um segundo
     conjunto de escapes de barra invertida está disponível:

     ‘\a’
          alerta sonoro (sino)
     ‘\b’
          backspace
     ‘\d’
          delete
     ‘\f’
          alimentar formulário
     ‘\n’
          nova linha
     ‘\r’
          retorno de carro
     ‘\t’
          tab horizontal
     ‘\v’
          tab vertical
     ‘\NNN’
          o carácter de oito bits cujo valor é o valor octal NNN (um a
          três dígitos)
     ‘\xHH’
          o carácter de oito bit cujo valor é o valor hexadecimal HH (um
          ou dois dígitos hexadecimais)

     Quando da entrada de texto de uma macro, aspas simples ou duplas
     devem necessariamente ser utilizadas para indicar uma definição de
     macro.  Texto sem aspas é presumido que seja um nome de função.  No
     corpo da macro, os escapes de barra invertida descritos acima são
     expandidos.  Barra invertida encapsulará qualquer outro carácter no
     texto da macro, incluindo ‘"’ e ‘'’.  Por exemplo, o seguinte
     vinculamento fará com que ‘‘C-x’ \’ insira uma única ‘\’ na linha:
          "\C-x\\": "\\"


File: bashref-pt_BR.info,  Node: Construtores Condicionais Init,  Next: Arquivo Init de Exemplo,  Prev: Sintaxe do Arquivo Init de Readline,  Up: Arquivo Init de Readline

8.3.2 Construtores Condicionais Init
------------------------------------

Readline implementa uma facilidade similar em espírito às
características de compilação condicional do preprocessador C, o qual
permite que as configurações de variáveis e vinculações de tecla sejam
realizadas como resultado de testes.  Existem quatro diretivas de
analisador utilizadas.

‘$if’
     O construtor ‘$if’ permite que vinculações sejam feitas baseadas no
     modo de edição, o terminal sendo utilizado, ou a aplicação
     utilizando Readline.  O texto do teste estende para o fim da linha;
     nenhum carácter é exigido para isolá-lo.

     ‘mode’
          A forma ‘mode=’ da diretiva ‘$if’ é utilizada para testar se
          Readline está no modo ‘emacs’ ou ‘vi’.  Isso pode ser
          utilizado conjuntamente com o comando ‘set keymap’, por
          exemplo, para configurar vinculações nos mapas de teclas
          ‘emacs-standard’ e ‘emacs-ctlx’ somente se Readline for
          inicializado em modo ‘emacs’.

     ‘term’
          A forma ‘term=’ pode ser utilizada para incluir vinculações de
          tecla específicas para determinado terminal, talvez para
          vincular as saídas de sequências de tecla pelas teclas de
          função do terminal.  A palavra no lado direito do ‘=’ é
          testada contra ambas o nome completo do terminal e a porção do
          nome do terminal antes do primeiro ‘-’.  Isso permite que
          ‘sun’ coincida com ambos ‘sun’ e ‘sun-cmd’, por exemplo.

     ‘application’
          O construtor APPLICATION é utilizado para incluir
          configurações específicas para determinada aplicação.  Cada
          programa utilizando a biblioteca Readline configura o
          APPLICATION NAME, e você pode testar para um valor em
          particular.  Isso poderia ser utilizado para vincular
          sequências de tecla a funções úteis para um programa
          específico.  Por exemplo, o seguinte comando adiciona uma
          sequência de tecla que encapsula a palavra atual ou a prévia
          no Bash:
               $if Bash
               # Encapsula a palavra atual ou a prévia
               "\C-xq": "\eb\"\ef\""
               $endif

‘$endif’
     Esse comando, conforme visto no exemplo anterior, termina um
     comando ‘$if’.

‘$else’
     Os comandos nesta ramificação da diretiva ‘$if’ são executados se o
     teste falhar.

‘$include’
     Essa diretiva toma um único nome de arquivo como um argumento e lê
     comandos e vinculações a partir daquele arquivo.  Por exemplo, a
     seguinte diretiva lê a partir de ‘/etc/inputrc’:
          $include /etc/inputrc


File: bashref-pt_BR.info,  Node: Arquivo Init de Exemplo,  Prev: Construtores Condicionais Init,  Up: Arquivo Init de Readline

8.3.3 Arquivo Init de Exemplo
-----------------------------

Eis aqui um exemplo de um arquivo INPUTRC.  Isso ilustra vinculação de
tecla, atribuição de variável e sintaxe condicional.

     # Este arquivo controla o comportamento de edição de entrada de linha
     # para programas que utilizam a biblioteca GNU Readline.   Programas
     # existentes são FTP, Bash e GDB.
     #
     # Você pode re-ler o arquivo inputrc com C-x C-r.
     # As linhas começando com '#' são comentários.
     #
     # Primeiro, incluir quaisquer vinculações para todo o sistema e
     # atribuições de variável a partir de /etc/Inputrc
     $include /etc/Inputrc

     #
     # Configura várias vinculações para o modo emacs.

     set editing-mode emacs

     $if mode=emacs

     Meta-Control-h:	backward-kill-word	Texto após o nome de função é ignorado

     #
     # Teclas de setas direcionais no modo mini teclado
     #
     #"\M-OD":        backward-char
     #"\M-OC":        forward-char
     #"\M-OA":        previous-history
     #"\M-OB":        next-history
     #
     # Teclas de setas direcionais no modo ANSI
     #
     "\M-[D":        backward-char
     "\M-[C":        forward-char
     "\M-[A":        previous-history
     "\M-[B":        next-history
     #
     # Teclas de setas direcionais no modo mini teclado de 8 bits
     #
     #"\M-\C-OD":       backward-char
     #"\M-\C-OC":       forward-char
     #"\M-\C-OA":       previous-history
     #"\M-\C-OB":       next-history
     #
     # Teclas de setas direcionais no modo ANSI de 8 bits
     #
     #"\M-\C-[D":       backward-char
     #"\M-\C-[C":       forward-char
     #"\M-\C-[A":       previous-history
     #"\M-\C-[B":       next-history

     C-q: quoted-insert

     $endif

     # Uma vinculação estilo antigo.   Isso chega a ser o padrão.
     TAB: complete

     # Macros que são convenientes para interação de shell
     $if Bash
     # editar o caminho
     "\C-xp": "PATH=${PATH}\e\C-e\C-a\ef\C-f"
     # preparar para digitar uma palavra entre aspas --
     # insere aspas duplas abrindo e fechando
     # e move para logo após a aspa de abrir
     "\C-x\"": "\"\"\C-b"
     # insere uma barra invertida (testando escapes de barra invertida
     # em sequências e macros)
     "\C-x\\": "\\"
     # Encapsula a palavra atual e a prévia
     "\C-xq": "\eb\"\ef\""
     # Adiciona uma vinculação para atualizar/redesenhar a linha, a qual é
     # desvinculada
     "\C-xr": redraw-current-line
     # Editar variável na linha atual.
     "\M-\C-v": "\C-a\C-k$\C-y\M-\C-e\C-a\C-y="
     $endif

     # utiliza um alerta visível se um estiver disponível
     set bell-style visible

     # não reduz caracteres para 7 bits quando da leitura
     set input-meta on

     # permite que caracteres iso-latin1 sejam inseridos em vez de
     # convertidos para sequências de meta prefixo
     set convert-meta off

     # exibe caracteres com o oitavo bit configurado diretamente em vez de os
     # exibir como caracteres meta prefixados
     set output-meta on

     # se existirem mais que 150 complementações possíveis para uma palavra,
     # pergunta ao usuário se esse deseja ver todas elas
     set completion-query-items 150

     # Para FTP
     $if Ftp
     "\C-xg": "get \M-?"
     "\C-xt": "put \M-?"
     "\M-.": yank-last-arg
     $endif


File: bashref-pt_BR.info,  Node: Comandos de Readline Vinculáveis,  Next: Modo vi de Readline,  Prev: Arquivo Init de Readline,  Up: Edição de Linha de Comando

8.4 Comandos de Readline Vinculáveis
====================================

* Menu:

* Comandos Para Movimentação::		Movendo-se ao longo da linha.
* Commands For History::	Posicionando-se em linhas anteriores.
* Commands For Text::		Comandos para modificação de texto.
* Commands For Killing::	Comandos para killing e yanking.
* Numeric Arguments::		Especificando argumentos numéricos,
contadores de repetição.
* Commands For Completion::	Fazendo com que Readline faça a
digitação para você.
* Macros (``Sequências de Comandos'') de Teclado::		Salvando
e re-executando caracteres
digitados.
* Miscellaneous Commands::	Outros comandos em geral.

Esta seção descreve os comandos Readline que podem ser vinculados à
sequências de tecla.  Você pode listar as suas vinculações de tecla
executando ‘bind -P’ ou, para um formato mais conciso, adequado para um
arquivo INPUTRC, ‘bind -p’.  (veja-se *note Comandos Internos ao
Bash::).  Os nomes de comando sem uma sequência de tecla que as
acompanhe são desvinculados por padrão.

   Nas seguintes descrições, “point” se refere à posição atual do
cursor, e “mark” se refere à posição do cursor salva pelo comando
‘set-mark’.  O testo entre o ponto e a marca é referenciado como sendo a
“region”.


File: bashref-pt_BR.info,  Node: Comandos Para Movimentação,  Next: Commands For History,  Up: Comandos de Readline Vinculáveis

8.4.1 Comandos Para Movimentação
--------------------------------

‘beginning-of-line (C-a)’
     Move para o início da linha atual.

‘end-of-line (C-e)’
     Move para o fim da linha.

‘forward-char (C-f)’
     Move um carácter para frente.

‘backward-char (C-b)’
     Move um carácter para trás.

‘forward-word (M-f)’
     Move para frente para o fim da próxima palavra.  Palavras são
     compostas de letras e dígitos.

‘backward-word (M-b)’
     Move para trás para o início da palavra atual ou da anterior.
     Palavras são compostas de letras e dígitos.

‘shell-forward-word ()’
     Move para frente para o fim da próxima palavra.  Palavras são
     delimitadas por meta caracteres de shell não encapsulados.

‘shell-backward-word ()’
     Move para trás para o início da palavra atual ou da anterior.
     Palavras são delimitadas por meta caracteres de shell não
     encapsulados.

‘clear-screen (C-l)’
     Limpa a tela e redesenha a linha atual, deixando a linha atual no
     topo da tela.

‘redraw-current-line ()’
     Atualiza a linha atual.  Por padrão, isso é desvinculado.


File: bashref-pt_BR.info,  Node: Commands For History,  Next: Commands For Text,  Prev: Comandos Para Movimentação,  Up: Comandos de Readline Vinculáveis

8.4.2 Comandos Para Manipular O Histórico
-----------------------------------------

‘accept-line (Newline or Return)’
     Aceita a linha independentemente de onde o cursor estiver.  Se essa
     linha não estiver vazia, adiciona ela à lista de histórico de
     acordo com a configuração das variáveis ‘HISTCONTROL’ e
     ‘HISTIGNORE’.  Se essa linha for uma linha de histórico modificada,
     então restaura a linha de histórico ao estado original dela.

‘previous-history (C-p)’
     Move "para trás" ao longo da lista de histórico, resgatando o
     comando anterior.

‘next-history (C-n)’
     Move "para frente" ao longo da lista de histórico, resgatando o
     próximo comando.

‘beginning-of-history (M-<)’
     Move para a primeira linha no histórico.

‘end-of-history (M->)’
     Move para o final do histórico de entrada, isto é, a linha
     atualmente sendo fornecida.

‘reverse-search-history (C-r)’
     Pesquisa na direção reversa iniciando na linha atual e movendo
     "para cima" ao longo do histórico conforme necessário.  Isso é uma
     pesquisa incremental.

‘forward-search-history (C-s)’
     Pesquisa para frente iniciando na linha atual e movendo "para
     baixo" ao longo do histórico conforme necessário.  Isso é uma
     pesquisa incremental.

‘non-incremental-reverse-search-history (M-p)’
     Pesquisa na direção reversa iniciando na linha atual e movendo
     "para cima" ao longo do histórico conforme necessário utilizando
     uma pesquisa não incremental para uma sequência de caracteres
     fornecida pelo usuário.

‘non-incremental-forward-search-history (M-n)’
     Pesquisa para frente iniciando na linha atual e movendo "para
     baixo" ao longo do histórico conforme necessário utilizando uma
     pesquisa não incremental para uma sequência de caracteres fornecida
     pelo usuário.

‘history-search-forward ()’
     Pesquisa para frente ao longo do histórico por uma sequência de
     caracteres entre o início da linha atual e o ponto.  A sequência de
     caracteres de pesquisa deve necessariamente coincidir no início de
     uma linha de histórico.  Isso é uma pesquisa não incremental.  Por
     padrão, esse comando é desvinculado.

‘history-search-backward ()’
     Pesquisa na direção reversa ao longo do histórico por uma sequência
     de caracteres entre o início da linha atual e o ponto.  A sequência
     de caracteres de pesquisa deve necessariamente coincidir no início
     de uma linha de histórico.  Isso é uma pesquisa não incremental.
     Por padrão, esse comando é desvinculado.

‘history-substr-search-forward ()’
     Pesquisa para frente ao longo do histórico por uma sequência de
     caracteres entre o início da linha atual e o ponto.  A sequência de
     caracteres de pesquisa pode coincidir em qualquer lugar em uma
     linha de histórico.  Isso é uma pesquisa não incremental.  Por
     padrão, esse comando é desvinculado.

‘history-substr-search-backward ()’
     Pesquisa na direção reversa ao longo do histórico por uma sequência
     de caracteres entre o início da linha atual e o ponto.  A sequência
     de caracteres de pesquisa pode coincidir em qualquer lugar em uma
     linha de histórico.  Isso é uma pesquisa não incremental.  Por
     padrão, esse comando é desvinculado.

‘yank-nth-arg (M-C-y)’
     Insere o primeiro argumento ao comando anterior (normalmente a
     segunda palavra na linha anterior) no ponto.  Com um argumento N,
     insere a Nésima palavra a partir do comando anterior (as palavras
     no comando anterior começam com palavra 0).  Um argumento negativo
     insere a Nésima palavra a partir do final do comando anterior.  Tão
     logo o argumento N seja computado, o argumento é extraído como se a
     expansão de histórico ‘!N’ tivesse sido especificada.

‘yank-last-arg (M-. or M-_)’
     Insere o último argumento para o comando anterior (a última palavra
     da entrada de histórico anterior).  Com um argumento numérico, se
     comporta exatamente como ‘yank-nth-arg’.  As chamadas sucessivas a
     ‘yank-last-arg’ movem para trás ao longo da lista de histórico,
     inserindo a última palavra (ou a palavra especificada pelo
     argumento à primeira chamada) de cada linha em sequência.  Qualquer
     argumento numérico fornecido a essas chamadas sucessivas determina
     a direção a se mover ao longo do histórico.  Um argumento negativo
     permuta a direção ao longo do histórico (para trás ou para frente).
     As facilidades de expansão de histórico são utilizadas para extrair
     o último argumento, como se a expansão de histórico ‘!$’ tivesse
     sido especificada.


File: bashref-pt_BR.info,  Node: Commands For Text,  Next: Commands For Killing,  Prev: Commands For History,  Up: Comandos de Readline Vinculáveis

8.4.3 Comandos Para Modificação de Texto
----------------------------------------

‘end-of-file (usually C-d)’
     O carácter que indica o final de arquivo conforme configurado, por
     exemplo, por ‘stty’.  Se esse carácter for lido quando não
     existirem caracteres na linha, e o ponto estiver no início da
     linha, Readline o interpreta como o fim da entrada e retorna EOF.

‘delete-char (C-d)’
     Deleta o carácter no ponto.  Se essa função estiver vinculada ao
     mesmo carácter como o carácter EOF do tty, como ‘C-d’ comumente
     está, veja acima para os efeitos.

‘backward-delete-char (Rubout)’
     Deleta o carácter por trás do cursor.  Um argumento numérico
     significa kill ("recortar") os caracteres ao invés de deletá-los.

‘forward-backward-delete-char ()’
     Deleta o carácter sob o cursor, a menos que o cursor esteja no fim
     da linha, caso no qual o carácter por trás do cursor é deletado.
     Por padrão, isso não é vinculado a uma tecla.

‘quoted-insert (C-q or C-v)’
     Adiciona o próximo carácter digitado à linha literal.  Isso é como
     inserir sequências de tecla como ‘C-q’, por exemplo.

‘self-insert (a, b, A, 1, !, …)’
     Insere a si mesmo.

‘transpose-chars (C-t)’
     Arrasta o carácter antes do cursor para frente por sobre o carácter
     no cursor, movendo o cursor para frente também.  Se o ponto de
     inserção estiver no final da linha, então isso transpõe os últimos
     dois carácteres da linha.  Argumentos negativos não tem efeito.

‘transpose-words (M-t)’
     Arrasta a palavra antes do ponto e cola a palavra após o ponto,
     movendo o ponto e colando aquela palavra também.  Se o ponto de
     inserção estiver no fim da linha, isso transpõe as últimas duas
     palavras na linha.

‘upcase-word (M-u)’
     Torna a palavra atual (ou seguinte) em maiúscula.  Com um argumento
     negativo, torna um letras maiúsculas a palavra anterior, porém não
     move o cursor.

‘downcase-word (M-l)’
     Torna a palavra atual (ou seguinte) em minúscula.  Com um argumento
     negativo, torna um letras minúsculas a palavra anterior, porém não
     move o cursor.

‘capitalize-word (M-c)’
     Torna a primeira letra da palavra atual (ou seguinte) em maiúscula.
     Com um argumento negativo, torna em maiúscula a primeira letra da
     palavra anterior, porém não move o cursor.

‘overwrite-mode ()’
     Permuta para o modo de sobrescrita.  Com um argumento numérico
     positivo explícito, passa para o modo de sobrescrita.  Com um
     argumento numérico não positivo explícito, passa para o modo de
     inserção.  Esse comando afeta somente o modo ‘emacs’; o modo ‘vi’
     faz sobrescrita diferentemente.  Cada chamada a ‘readline()’ inicia
     no modo de inserção.

     No modo de sobrescrita, os carácteres vinculados ao ‘self-insert’
     substituem o texto no ponto em vez de empurrar o texto para a
     direita.  Os caracteres vinculados a ‘backward-delete-char’
     substituem o carácter antes do ponto com um espaço.

     Por padrão, esse comando é desvinculado.


File: bashref-pt_BR.info,  Node: Commands For Killing,  Next: Numeric Arguments,  Prev: Commands For Text,  Up: Comandos de Readline Vinculáveis

8.4.4 Killing (“Recortando”) And Yanking (“Colando”)
----------------------------------------------------

‘kill-line (C-k)’
     Kill ("recorta") o texto desde o ponto até o fim da linha.

‘backward-kill-line (C-x Rubout)’
     Kill ("recorta") para trás até o início da linha.

‘unix-line-discard (C-u)’
     Kill ("recorta") desde o cursor até o início da linha atual.

‘kill-whole-line ()’
     Kill ("recorta") todos os caracteres na linha atual, não importando
     onde o ponto está.  Por padrão, isso está desvinculado.

‘kill-word (M-d)’
     Kill ("recorta") a partir do ponto até o fim da palavra atual, ou
     se entre palavras, até o fim da próxima palavra.  Os limites de
     palavra são os mesmos que ‘forward-word’.

‘backward-kill-word (M-<DEL>)’
     Kill ("recorta") a palavra por trás do ponto.  Os limites de
     palavra são os mesmos que ‘backward-word’.

‘shell-kill-word ()’
     Kill ("recorta") a partir do ponto até o fim da palavra atual, ou
     se entre palavras, até o fim da próxima palavra.  Os limites de
     palavra são os mesmos que ‘shell-forward-word’.

‘shell-backward-kill-word ()’
     Kill ("recorta") a palavra por trás do ponto.  Os limites de
     palavra são os mesmos que ‘shell-backward-word’.

‘unix-word-rubout (C-w)’
     Kill ("recorta") a palavra por trás do ponto, utilizando espaço em
     branco como um limite de palavra.  O texto recortado é salvo na
     área auxiliar chamada kill-ring.

‘unix-filename-rubout ()’
     Kill ("recorta") a palavra por trás do ponto, utilizando espaço em
     branco e o carácter barra como os limites de palavra.  O texto
     recortado é salvo na área auxiliar chamada kill-ring.

‘delete-horizontal-space ()’
     Deleta todos os espaços e tabs ao redor do ponto.  Por padrão, isso
     está desvinculado.

‘kill-region ()’
     Kill ("recorta") o texto na região atual.  Por padrão, esse comando
     está desvinculado.

‘copy-region-as-kill ()’
     Copia o texto na região para a área de memória intermediária de
     recorte, de maneira que o texto possa ser yanked ("colado") em
     algum outro lugar.  Por padrão, esse comando está desvinculado.

‘copy-backward-word ()’
     Copia a palavra antes do ponto para a área de memória intermediária
     de recorte.  Os limites de palavra são os mesmos que
     ‘backward-word’.  Por padrão, esse comando está desvinculado.

‘copy-forward-word ()’
     Copia a palavra seguinte ao ponto para a área de memória
     intermediária de recorte.  Os limites de palavra são os mesmos que
     ‘forward-word’.  Por padrão, esse comando está desvinculado.

‘yank (C-y)’
     Yank ("cola") o topo da área auxiliar de recorte na área de memória
     intermediária no ponto.

‘yank-pop (M-y)’
     Rotaciona a área auxiliar de recorte, e yank ("cola") o novo topo.
     Você somente pode fazer isso se o comando prévio for ‘yank’ ou
     ‘yank-pop’.


File: bashref-pt_BR.info,  Node: Numeric Arguments,  Next: Commands For Completion,  Prev: Commands For Killing,  Up: Comandos de Readline Vinculáveis

8.4.5 Especificando Argumentos Numéricos
----------------------------------------

‘digit-argument (M-0, M-1, … M--)’
     Adiciona esse dígito ao argumento já em acumulação, ou inicia um
     novo argumento.  ‘M--’ inicia um argumento negativo.

‘universal-argument ()’
     Essa é uma outra maneira de especificar um argumento.  Se esse
     comando for seguido por um ou mais dígitos, opcionalmente com um
     sinal de menos inicial, aqueles dígitos define o argumento.  Se o
     comando for seguido por dígitos, a execução de ‘universal-argument’
     novamente finaliza o argumento numérico, porém do contrário é
     ignorado.  Como um caso especial, se esse comando for imediatamente
     seguido por um carácter que nem seja um dígito nem um sinal de
     menos, então o contador de argumento para o próximo comando é
     multiplicado por quatro.  O contador de argumento é inicialmente
     um, de forma que a execução dessa função pela primeira vez faz com
     que o argumento contabilize quatro; uma segunda vez faz com que o
     argumento contabilize dezesseis; e assim por diante.  Por padrão,
     isso não é vinculado a uma tecla.


File: bashref-pt_BR.info,  Node: Commands For Completion,  Next: Macros (``Sequências de Comandos'') de Teclado,  Prev: Numeric Arguments,  Up: Comandos de Readline Vinculáveis

8.4.6 Deixando Readline Digitar Por Você
----------------------------------------

‘complete (<TAB>)’
     Tenta realizar a complementação sobre o teste antes do ponto.  A
     atual complementação realizada é específica da aplicação.  Bash
     tenta a complementação tratando o texto como uma variável (se o
     texto se inicia com ‘$’); nome de usuário (se o texto se inicia com
     ‘~’); nome de máquina (se o texto se inicia com ‘@’); ou comando
     (incluindo apelidos e funções) em sequência.  Se nenhuma dessas
     produzir uma coincidência, então a complementação de nome de
     arquivo é tentada.

‘possible-completions (M-?)’
     Lista as possíveis complementações do texto antes do ponto.  Quando
     da exibição das complementações, Readline configura o número de
     colunas utilizadas para exibir para o valor de
     ‘completion-display-width’; o valor da variável de ambiente
     ‘COLUMNS’; ou a largura da tela, nessa exata ordem.

‘insert-completions (M-*)’
     Insere todas as complementações do texto antes do ponto que
     poderiam ter sido geradas por ‘possible-completions’.

‘menu-complete ()’
     Semelhante a ‘complete’, porém substitui a palavra a ser completada
     com uma coincidência única a partir da lista de possíveis
     complementações.  A execução repetida de ‘menu-complete’ passeia ao
     longo da lista de possíveis complementações, inserindo cada
     coincidência em sequência.  No fim da lista de complementações, o
     alarme sonoro é soado (objeto da configuração de ‘bell-style’) e o
     texto original é restaurado.  Um argumento de N movimenta N
     posições para frente na lista de coincidências; um argumento
     negativo pode ser utilizado para mover para trás ao longo da lista.
     Esse comando é entendido para ser vinculado à tecla <TAB>, porém
     está desvinculado por padrão.

‘menu-complete-backward ()’
     Idêntico a ‘menu-complete’, porém movimenta para trás ao longo da
     lista de possíveis complementações, como se a ‘menu-complete’
     tivesse sido dado um argumento negativo.

‘delete-char-or-list ()’
     Deleta o carácter sob o cursor se não estiver no início oi final da
     linha (como ‘delete-char’).  Se estiver no fim da linha, se
     comporta identicamente a ‘possible-completions’.  Esse comando está
     desvinculado por padrão.

‘complete-filename (M-/)’
     Tenta a complementação de nome de arquivo sobre o texto antes do
     ponto.

‘possible-filename-completions (C-x /)’
     Lista as possíveis complementações do texto antes do ponto,
     tratando-as como um nome de arquivo.

‘complete-username (M-~)’
     Tenta complementação sobre o texto antes do ponto, tratando-o como
     um nome de usuário.

‘possible-username-completions (C-x ~)’
     Lista as possíveis complementações do texto antes do ponto,
     tratando-as como um nome de usuário.

‘complete-variable (M-$)’
     Tenta complementação sobre texto antes do ponto, tratando-o como
     uma variável de shell.

‘possible-variable-completions (C-x $)’
     Lista as possíveis complementações do texto antes do ponto,
     tratando-as como uma variável de shell.

‘complete-hostname (M-@)’
     Tenta complementação sobre o texto antes do ponto, tratando-o como
     um nome de máquina.

‘possible-hostname-completions (C-x @)’
     Lista as possíveis complementações do texto antes do ponto,
     tratando-as como um nome de máquina.

‘complete-command (M-!)’
     Tenta complementação sobre o texto antes do ponto, tratando-o como
     um nome de comando.  A complementação de comando tenta coincidir o
     texto contra apelidos, palavras reservadas, funções de shell,
     comandos internos do shell, e, finalmente, nomes de arquivos
     executáveis, nessa ordem.

‘possible-command-completions (C-x !)’
     Lista as possíveis complementações do texto antes do ponto,
     tratando-as como um nome de comando.

‘dynamic-complete-history (M-<TAB>)’
     Tenta complementação sobre o texto antes do ponto, comparando o
     texto contra linhas originadas da lista de histórico para possíveis
     coincidências de complementação.

‘dabbrev-expand ()’
     Tenta complementação de menu sobre o texto antes do ponto,
     comparando o texto contra linhas originadas da lista de histórico
     para possíveis coincidências de complementação.

‘complete-into-braces (M-{)’
     Realiza complementação de nome de arquivo e insere a lista das
     complementações possíveis encapsuladas em chaves, de maneira que a
     lista esteja disponível para o shell (veja-se *note Expansão de
     Chave::).


File: bashref-pt_BR.info,  Node: Macros (``Sequências de Comandos'') de Teclado,  Next: Miscellaneous Commands,  Prev: Commands For Completion,  Up: Comandos de Readline Vinculáveis

8.4.7 Macros (“Sequências de Comandos”) de Teclado
--------------------------------------------------

‘start-kbd-macro (C-x ()’
     Inicia o salvamento de caracteres digitados na macro de teclado
     atual.

‘end-kbd-macro (C-x ))’
     Para o salvamento de caracteres digitados na macro de teclado atual
     e salva a definição.

‘call-last-kbd-macro (C-x e)’
     Re-executa a última macro de teclado definida, fazendo com que os
     caracteres na macro apareçam como se digitados ao teclado.

‘print-last-kbd-macro ()’
     Imprime a última macro de teclado definida em uma formato adequado
     para o arquivo INPUTRC.


File: bashref-pt_BR.info,  Node: Miscellaneous Commands,  Prev: Macros (``Sequências de Comandos'') de Teclado,  Up: Comandos de Readline Vinculáveis

8.4.8 Alguns Comandos Variados
------------------------------

‘re-read-init-file (C-x C-r)’
     Lê o conteúdo do arquivo INPUTRC, e incorpora quaisquer vinculações
     ou atribuições à variáveis encontradas.

‘abort (C-g)’
     Aborta o comando de edição atual e soa o alarme sonoro do terminal
     (objeto da configuração de ‘bell-style’).

‘do-uppercase-version (M-a, M-b, M-X, …)’
     Se o carácter de meta campo X for minúsculo, executa o comando que
     está vinculado ao correspondente carácter maiúsculo.

‘prefix-meta (<ESC>)’
     "Metifica" o próximo carácter digitado.  Isso é para teclados sem a
     tecla meta.  Digitar-se ‘<ESC> f’ é equivalente a se digitar ‘M-f’.

‘undo (C-_ or C-x C-u)’
     Desfazer incremental, relembrado separadamente para cada linha.

‘revert-line (M-r)’
     Desfazer todas as modificações feitas para esta linha.  Isso é como
     se executar o comando ‘undo’ suficientes vezes para se voltar ao
     início.

‘tilde-expand (M-&)’
     Realiza a expansão de til sobre a palavra atual.

‘set-mark (C-@)’
     Configura a marca para o ponto.  Se um argumento numérico for
     fornecido, então a marca é configurada para aquela posição.

‘exchange-point-and-mark (C-x C-x)’
     Troca o ponto pela marca.  A posição atual do cursor é configurada
     para a posição salva, e a posição anterior do cursor é salva como a
     marca.

‘character-search (C-])’
     Um carácter é lido e o ponto é movido para a próxima ocorrência
     daquele carácter.  Um contador negativo busca pelas ocorrências
     prévias.

‘character-search-backward (M-C-])’
     Um carácter é lido e o ponto é movido para a ocorrência prévia
     daquele carácter.  Um contador negativo busca pelas ocorrências
     subsequentes.

‘skip-csi-sequence ()’
     Lê caracteres suficientes para consumir uma sequência multi tecla
     como aquelas definidas para teclas como Home e End.  Tais
     sequências iniciam com um Indicador de Sequência de Controle (ISC),
     geralmente ESC-[.  Se essa sequência estiver vinculada à "\e[",
     então as teclas que produzem tais sequências não terão efeito, a
     menos que explicitamente vinculadas a um comando readline, em vez
     de inserir caracteres perdidos na área de memória intermediária de
     edição.  Isso está desvinculado por padrão, porém usualmente
     vinculado a ESC-[.

‘insert-comment (M-#)’
     Sem um argumento numérico, o valor da variável ‘comment-begin’ é
     inserido no início da linha atual.  Se um argumento numérico for
     fornecido, esse comando atua como um alternador: se os caracteres
     no início da linha não coincidirem com o valor de ‘comment-begin’,
     então o valor é inserido; do contrário, os caracteres em
     ‘comment-begin’, são deletados desde o início da linha.  Em
     qualquer caso, a linha é aceita como se um newline tivesse sido
     digitado.  O valor padrão de ‘comment-begin’ faz com que esse
     comando torne a linha atual um comentário de shell.  Se um
     argumento numérico, faz com que o carácter de comentário seja
     removido, a linha será executada pelo shell.

‘dump-functions ()’
     Imprime todas as funções e suas vinculações de tecla para o fluxo
     de saída de Readline.  Se um argumento numérico for fornecido,
     então a saída é formatada de tal maneira que ela pode se tornar
     parte de um arquivo INPUTRC.  Esse comando é desvinculado por
     padrão.

‘dump-variables ()’
     Imprime todas as variáveis configuráveis e seus valores para o
     fluxo de saída de Readline.  Se um argumento numérico for
     fornecido, então a saída é formatada de tal maneira que ela pode
     ser parte de um arquivo INPUTRC.  Esse comando é desvinculado por
     padrão.

‘dump-macros ()’
     Imprime todas as sequências de tecla Readline vinculadas à macro e
     as sequências de caracteres que elas produzem como saída.  Se um
     argumento numérico for fornecido, a saída é formatada de tal
     maneira que ela pode ser parte de um arquivo INPUTRC.  Esse comando
     é desvinculado por padrão.

‘glob-complete-word (M-g)’
     A palavra antes do ponto é tratada como um modelo para a expansão
     de nome de caminho, com um asterisco adicionado implicitamente.
     Esse modelo é utilizado para gerar a lista de nomes de arquivo de
     coincidentes para complementações possíveis.

‘glob-expand-word (C-x *)’
     A palavra antes do ponto é tratada como um modelo para a expansão
     de nome de caminho, e a lista de nomes de arquivos coincidentes é
     inserida, substituindo a palavra.  Se um argumento numérico for
     fornecido, então um ‘*’ é acrescentado antes da expansão de nome de
     caminho.

‘glob-list-expansions (C-x g)’
     A lista de expansões que deveria ter sido gerada por
     ‘glob-expand-word’ é exibida, e a linha é redesenhada.  Se um
     argumento numérico for fornecido, então um ‘*’ é acrescentado antes
     da expansão de nome de caminho.

‘display-shell-version (C-x C-v)’
     Exibe informação de versão acerca da instância atual de Bash.

‘shell-expand-line (M-C-e)’
     Expande a linha como o shell faz.  Isso realiza expansão de
     histórico e de apelido bem como todas as expansões de palavras do
     shell (veja-se *note Expansões de Shell::).

‘history-expand-line (M-^)’
     Realiza expansão de histórico sobre a linha atual.

‘magic-space ()’
     Realiza expansão de histórico sobre a linha atual e insere um
     espaço (veja-se *note History Interaction::).

‘alias-expand-line ()’
     Realiza expansão de apelido sobre a linha atual (veja-se *note
     Apelidos::).

‘history-and-alias-expand-line ()’
     Realiza expansão de apelido e de histórico sobre a linha atual.

‘insert-last-argument (M-. or M-_)’
     Um sinônimo para ‘yank-last-arg’.

‘operate-and-get-next (C-o)’
     Aceita a linha atual para execução e traz a próxima linha relativa
     à linha atual a partir do histórico para edição.  Qualquer
     argumento é ignorado.

‘edit-and-execute-command (C-x C-e)’
     Invoca um editor sobre a linha de comando atual, e executa e
     resultado como comandos de shell.  Bash tenta invocar ‘$VISUAL’,
     ‘$EDITOR’, e ‘emacs’ como o editor, nessa ordem.


File: bashref-pt_BR.info,  Node: Modo vi de Readline,  Next: Complementação Programável,  Prev: Comandos de Readline Vinculáveis,  Up: Edição de Linha de Comando

8.5 Modo vi de Readline
=======================

Enquanto a biblioteca Readline não tem um conjunto completo de funções
de edição ‘vi’, ela contém o suficiente para permitir a edição simples
da linha.  O modo ‘vi’ de Readline se comporta conforme especificado no
padrão POSIX.

   Com o objetivo de trocar interativamente entre os modos de edição
‘emacs’ e ‘vi’, utilize os comandos ‘set -o emacs’ e ‘set -o vi’
(veja-se *note O Comando Interno Set::).  O padrão de Readline é o modo
‘emacs’.

   Quando você entra uma linha no modo ‘vi’, você já está colocado no
modo de "inserção", como se você tivesse digitado um ‘i’.  Pressionar-se
<ESC> troca-se para o modo de "comando", onde você pode editar o texto
da linha com as teclas de movimento padrão do ‘vi’, mover para as linhas
de histórico prévias com ‘k’ e linhas subsequentes com ‘j’, e assim por
diante.


File: bashref-pt_BR.info,  Node: Complementação Programável,  Next: Comandos Internos à Complementação Programável,  Prev: Modo vi de Readline,  Up: Edição de Linha de Comando

8.6 Complementação Programável
==============================

Quando a complementação de palavra for tentada para um argumento a um
comando para o qual uma especificação de complementação (uma COMPSPEC)
tiver sido definida utilizando-se o comando interno ‘complete’ (veja-se
*note Comandos Internos à Complementação Programável::), as facilidades
de complementação programáveis são invocadas.

   Primeiro, o nome do comando é identificado.  Se uma compspec tiver
sido definida para aquele comando, então a compspec é utilizada para
gerar a lista das complementações possíveis para a palavra.  Se a
palavra do comando for a sequência de caracteres vazia (complementação
tentada no início de uma linha vazia), então qualquer compspec definida
com a opção ‘-E’ para ‘complete’ é utilizada.  Se a palavra de comando
for um nome de caminho completo, uma compspec para o nome de caminho
completo é pesquisada primeiramente.  Se nenhuma compspec for encontrada
para o nome de caminho completo, então uma tentativa é feita para
encontrar uma compspec para a porção seguinte à barra final.  Se essas
buscas não resultarem em uma compspec, então qualquer compspec definida
com a opção ‘-D’ para ‘complete’ é utilizada como o padrão.

   Uma vez que uma compspec tenha sido encontrada, ela é utilizada para
gerar a lista de palavras coincidentes.  Se uma compspec não for
encontrada, a complementação padrão de Bash descrita abaixo (veja-se
*note Commands For Completion::) é realizada.

   Primeiro, as ações especificadas pela compspec são utilizadas.
Somente coincidências as quais sejam prefixadas pela palavra sendo
completada são retornadas.  Quando a opção ‘-f’ ou a ‘-d’ forem
utilizadas para complementação de nome de arquivo ou de nome de
diretório, a variável de shell ‘FIGNORE’ é utilizada para filtrar as
coincidências.  Veja-se *note Variáveis do Bash::, para uma descrição de
‘FIGNORE’.

   Quaisquer complementações especificadas por um modelo de expansão de
nome de arquivo para a opção ‘-G’ são geradas depois.  As palavras
geradas pelo modelo precisam coincidir com a palavra sendo
complementada.  A variável de shell ‘GLOBIGNORE’ não é utilizada para
filtrar as coincidências, porém a variável de shell ‘FIGNORE’ é
utilizada.

   Depois, a sequência de caracteres especificada como um argumento para
a opção ‘-W’ é considerada.  A sequência de caracteres é primeiro
dividida utilizando os caracteres na variável especial ‘IFS’ como
delimitadores.  O encapsulamento do shell é respeitado.  Cada palavra é
então expandida utilizando a expansão de chave, expansão de til,
expansão de parâmetro e variável, substituição de comando, e expansão
aritmética, conforme descrito abaixo (veja-se *note Expansões de
Shell::).  Os resultados são divididos utilizando-se as regras descritas
acima (veja-se *note Divisão de Palavra::).  Os resultados da expansão
são coincididos no prefixo contra a palavra sendo complementada, e as
palavras coincidentes se tornam as complementações possíveis.  Após
essas coincidências terem sido geradas, qualquer função de shell ou
comando especificado com as opções ‘-F’ e ‘-C’ é invocado.  Quando o
comando ou função é invocada, às variáveis ‘COMP_LINE’, ‘COMP_POINT’,
‘COMP_KEY’, e ‘COMP_TYPE’ são atribuídos valores conforme descrito acima
(veja-se *note Variáveis do Bash::).  Se uma função de shell está sendo
invocada, as variáveis ‘COMP_WORDS’ e ‘COMP_CWORD’ também são
configuradas.  Quando a função ou comando é invocado, o primeiro
argumento ($1) é o nome do comando cujos argumentos estão sendo
complementados, o segundo argumento ($2) é a palavra sendo
complementada, e o terceiro argumento ($3) é a palavra que precede a
palavra sendo complementada na linha de comando atual.  Não é realizada
nenhuma filtragem das complementações geradas contra a palavra sendo
complementada; a função ou comando tem liberdade completa na geração de
coincidências.

   Qualquer função especificada com ‘-F’ é invocada primeiro.  A função
pode utilizar quaisquer das facilidades de shell, incluindo os comandos
internos ‘compgen’ e ‘compopt’ descritos abaixo (veja-se *note Comandos
Internos à Complementação Programável::), para gerar as coincidências.
É necessário colocar as complementações possíveis na variável de vetor
‘COMPREPLY’, uma por elemento do vetor.

   Depois, qualquer comando especificado com a opção ‘-C’ é invocado em
um ambiente equivalente a substituição de comando.  O comando deveria
imprimir uma lista de complementações, uma por linha, para a saída
padrão.  Barra invertida pode ser utilizada para encapsular um newline,
se necessário.

   Após todas as complementações possíveis serem geradas, qualquer
filtro especificado com a opção ‘-X’ é aplicado à lista.  O filtro é um
modelo como o utilizado para a expansão de nome de caminho; um ‘&’ no
modelo é substituído com o texto da palavra sendo complementada.  Um ‘&’
literal pode ser encapsulado com uma barra invertida; a barra invertida
é removida antes da tentativa de coincidência.  Qualquer complementação
que coincida com o modelo será removida da lista.  Um ‘!’ inicial nega o
modelo; nesse caso, qualquer complementação não coincidente com o modelo
será removida.

   Finalmente, qualquer prefixo e sufixo especificado com as opções ‘-P’
e ‘-S’ são adicionados a cada membro da lista de complementação, e o
resultado é retornado para o código de complementação de Readline como a
lista das complementações possíveis.

   Se as ações previamente aplicadas não gerarem quaisquer
coincidências, e a opção ‘-o dirnames’ foi fornecida para ‘complete’
quando o compspec foi definido, então uma complementação de nome de
diretório é tentada.

   Se a opção ‘-o plusdirs’ foi fornecida a ‘complete’ quando o compspec
foi definido, então a complementação de nome de diretório é tentada e
quaisquer coincidências são adicionadas aos resultados das outras ações.

   Por padrão, se uma compspec for encontrada, o que quer que ela gere é
retornado ao código de complementação como o conjunto completo das
complementações possíveis.  As complementações padrão de Bash não são
tentadas, e o padrão Readline de complementação de nome de arquivo é
desabilitado.  Se a opção ‘-o bashdefault’ foi fornecida a ‘complete’
quando a compspec foi definida, então as complementações padrão de Bash
são tentadas se a compspec não gerar coincidências.  Se a opção ‘-o
default’ foi fornecida a ‘complete’ quando a compspec foi definida,
então a complementação padrão de Readline será realizada se a compspec
(e, se tentada, as complementações padrão de Bash) não gerarem
coincidências.

   Quando uma compspec indica que a complementação de nome de diretório
é desejada, as funções de complementação programáveis forçam Readline a
adicionar uma barra aos nomes complementados os quais são links
simbólicos a diretórios, sujeitos ao valor da variável de Readline
MARK-DIRECTORIES, não importando a configuração da variável de Readline
MARK-SYMLINKED-DIRECTORIES.

   Existe algum suporte para complementações dinamicamente modificantes.
Isso é útil geralmente quando utilizado em combinação com uma
complementação padrão especificada com ‘-D’.  É possível para funções de
shell executadas como manipuladores de complementação para indicar que a
complementação deveria ser retentada retornando um código de saída de
124.  Se uma função de shell retorna 124, e modifica a compspec
associada com o comando sobre o qual a complementação está sendo tentada
(fornecido como o primeiro argumento quando a função for executada), a
complementação programável reinicia do início, com uma tentativa de
encontra uma nova compspec para aquele comando.  Isso permite que um
conjunto de complementações seja construído dinamicamente conforme a
complementação seja tentada, em vez de serem carregadas todas de uma
vez.

   Por exemplo, presumindo-se que existe uma biblioteca de compspecs,
cada uma mantida em um arquivo correspondente ao nome do comando, a
seguinte função de complementação padrão carregaria complementações
dinamicamente:

     _completion_loader()
     {
         . "/etc/bash_completion.d/$1.sh" >/dev/null 2>&1 && return 124
     }
     complete -D -F _completion_loader -o bashdefault -o default


File: bashref-pt_BR.info,  Node: Comandos Internos à Complementação Programável,  Next: Um Exemplo de Complementação Programável,  Prev: Complementação Programável,  Up: Edição de Linha de Comando

8.7 Comandos Internos à Complementação Programável
==================================================

Três comandos internos estão disponíveis para manipular as facilidades
de complementação programáveis: uma para especificar como os argumentos
a um comando particular são para ser complementados, e dois para
modificar a complementação conforme ela está ocorrendo.

‘compgen’
          compgen [OPTION] [WORD]

     Gera coincidências de complementação possíveis para WORD de acordo
     com as OPTIONs, o qual pode ser qualquer opção aceita pelo comando
     interno ‘complete’ com exceção de ‘-p’ e ‘-r’, e escreve as
     coincidências para a saída padrão.  Quando da utilização das opções
     ‘-F’ ou ‘-C’, as várias variáveis de shell configuradas pelas
     facilidades de complementação programáveis, enquanto disponíveis,
     não terão valores úteis.

     As coincidências serão geradas da mesma maneira como se o código de
     complementação programável as tivesse gerado diretamente a partir
     da especificação de complementação com os mesmos flags.  Se WORD
     for especificada, somente aquelas complementação que coincidirem
     com WORD serão exibidas.

     O valor de retorno é verdadeiro, a menos que uma opção inválida
     seja fornecida, ou nenhuma coincidência seja gerada.

‘complete’
          complete [-abcdefgjksuv] [-o COMP-OPTION] [-DE] [-A ACTION] [-G GLOBPAT] [-W WORDLIST]
          [-F FUNCTION] [-C COMMAND] [-X FILTERPAT]
          [-P PREFIX] [-S SUFFIX] NAME [NAME …]
          complete -pr [-DE] [NAME …]

     Especifica como argumentos a cada NAME deveriam ser complementados.
     Se a opção ‘-p’ for fornecida, ou se nenhuma opção for fornecida,
     as especificações de complementação existentes são impressas de uma
     maneira a permitir que sejam reutilizadas como entrada.  A opção
     ‘-r’ remove uma especificação de complementação para cada NAME, ou,
     se nenhum NAME for fornecido, todas as especificações de
     complementação.  A opção ‘-D’ indica que as opções remanescentes e
     ações deveriam se aplicar à complementação "padrão" de comando;
     isto é, a complementação tentada sobre um comando para o qual
     nenhuma complementação tenha sido definida previamente.  A opção
     ‘-E’ indica que as opções restantes e ações deveriam se aplicar a
     complementação "vazia" de comando; isto é, a complementação tentada
     sobre uma linha em branco.

     O processo de aplicação dessas especificações de complementação
     quando a complementação de palavra é tentada está descrita acima
     (veja-se *note Complementação Programável::).  A opção ‘-D’ tem
     precedência sobre ‘-E’.

     Outras opções, se especificadas, tem os seguintes significados.  Os
     argumentos para as opções ‘-G’, ‘-W’, e ‘-X’ (e, se necessário, as
     opções ‘-P’ e ‘-S’) deveriam estar encapsuladas para protegê-las da
     expansão antes que o comando interno ‘complete’ seja invocado.

     ‘-o COMP-OPTION’
          COMP-OPTION controla vários aspectos do comportamento de
          compspec além da simples geração de complementações.
          COMP-OPTION pode ser um de:

          ‘bashdefault’
               Realiza o restante das complementações padrão de Bash se
               o compspec não gerar coincidências.

          ‘default’
               Utiliza a complementação de nome de arquivo padrão de
               Readline se o compspec não gerar coincidências.

          ‘dirnames’
               Realiza complementação de nome de diretório se o compspec
               não gerar coincidências.

          ‘filenames’
               Informa a Readline que a compspec gera nomes de arquivo,
               de forma que possa realizar qualquer processamento
               específico de nome de arquivo (como adicionar uma barra
               aos nomes de diretório; encapsular caracteres especiais;
               ou suprimir espaços em branco ao final).  Essa opção é
               concebida para ser utilizada com funções de shell
               especificadas com ‘-F’.

          ‘noquote’
               Informa a Readline para não encapsular as palavras
               complementadas se elas forem nomes de arquivo (o
               encapsulamento de nomes de arquivo é o padrão).

          ‘nospace’
               Informa a Readline para não acrescentar um espaço (o
               padrão) a palavras complementadas no fim da linha.

          ‘plusdirs’
               Após quaisquer coincidências definidas pela compspec
               serem geradas, a complementação de nome de diretório é
               tentada e quaisquer coincidências são adicionadas aos
               resultados de outras ações.

     ‘-A ACTION’
          ACTION pode ser um do seguinte para gerar uma lista de
          possíveis complementações:

          ‘alias’
               Nomes de apelidos.  Também pode ser especificada como
               ‘-a’.

          ‘arrayvar’
               Nomes de variáveis vetor.

          ‘binding’
               Nomes de vinculação de tecla de Readline (veja-se *note
               Comandos de Readline Vinculáveis::).

          ‘builtin’
               Nomes de comandos internos ao shell.  Também pode ser
               especificada como ‘-b’.

          ‘command’
               Nomes de comando.  Também pode ser especificada como
               ‘-c’.

          ‘directory’
               Nomes de diretório.  Também pode ser especificada como
               ‘-d’.

          ‘disabled’
               Nomes de comandos internos ao shell desabilitados.

          ‘enabled’
               Nomes de comandos internos ao shell habilitados.

          ‘export’
               Nomes de variáveis de shell exportadas.  Também pode ser
               especificada como ‘-e’.

          ‘file’
               Nomes de arquivo.  Também pode ser especificada como
               ‘-f’.

          ‘function’
               Nomes de funções de shell.

          ‘group’
               Nomes de grupo.  Também pode ser especificada como ‘-g’.

          ‘helptopic’
               Tópicos de ajuda conforme aceitos pelo comando interno
               ‘help’ (veja-se *note Comandos Internos ao Bash::).

          ‘hostname’
               Nomes de máquina, conforme extraídos a partir do arquivo
               especificado pela variável de shell ‘HOSTFILE’ (veja-se
               *note Variáveis do Bash::).

          ‘job’
               Nomes de tarefa, se o controle de tarefa estiver ativo.
               Também pode ser especificada como ‘-j’.

          ‘keyword’
               Palavras reservadas de shell.  Também pode ser
               especificada como ‘-k’.

          ‘running’
               Nomes de tarefas em execução, se o controle de tarefas
               estiver ativo.

          ‘service’
               Nomes de serviço.  Também pode ser especificada como
               ‘-s’.

          ‘setopt’
               Argumentos válidos para a opção ‘-o’ ao comando interno
               ‘set’ (veja-se *note O Comando Interno Set::).

          ‘shopt’
               Nomes de opção do shell conforme aceitos pelo comando
               interno ‘shopt’ (veja-se *note Comandos Internos ao
               Bash::).

          ‘signal’
               Nomes de sinal.

          ‘stopped’
               Nomes de tarefas paradas, se o controle de tarefas
               estiver ativo.

          ‘user’
               Nomes de usuário.  Também pode ser especificada como
               ‘-u’.

          ‘variable’
               Nomes de todas as variáveis do shell.  Também pode ser
               especificada como ‘-v’.

     ‘-C COMMAND’
          COMMAND é executado em um ambiente de sub-shell, e a saída
          dele é utilizada como as complementações possíveis.

     ‘-F FUNCTION’
          A função de shell FUNCTION é executada no ambiente atual de
          shell.  Quando ela é executada, $1 é o nome do comando cujos
          argumentos estão sendo complementados; $2 é a palavra sendo
          complementada; e $3 é a palavra que precede a palavra sendo
          complementada, conforme descrito acima (veja-se *note
          Complementação Programável::).  Quando ela finaliza, as
          possíveis complementações são resgatadas do valor da variável
          de vetor ‘COMPREPLY’.

     ‘-G GLOBPAT’
          O modelo de expansão de nome de arquivo GLOBPAT é expandido
          para gerar as possíveis complementações.

     ‘-P PREFIX’
          PREFIX é adicionado no início de cada complementação possível,
          após todos as outras opções terem sido aplicadas.

     ‘-S SUFFIX’
          SUFFIX é adicionado no final de cada complementação possível,
          após todos as outras opções terem sido aplicadas.

     ‘-W WORDLIST’
          A WORDLIST é dividida utilizando os caracteres contidos na
          variável especial ‘IFS’ como delimitadores, e cada palavra
          resultante é expandida.  As complementações possíveis são os
          membros da lista resultante, a qual coincide com a palavra que
          está sendo complementada.

     ‘-X FILTERPAT’
          FILTERPAT é um modelo conforme utilizado para expansão de nome
          de arquivo.  É aplicado à lista das possíveis complementações
          geradas pelas opções precedentes e argumentos, e cada
          complementação coincidindo com FILTERPAT é removida da lista.
          Um ‘!’ inicial no FILTERPAT nega o modelo; nesse caso,
          qualquer complementação que não coincida com FILTERPAT é
          removida.

     O valor de retorno é verdadeiro, a menos que uma opção inválida
     seja fornecida; outra opção que não ‘-p’ ou ‘-r’ seja fornecida sem
     um argumento NAME; uma tentativa for feita de remover uma
     especificação de complementação para um NAME para o qual nenhuma
     especificação exista; ou um erro ocorrer quando do adicionamento de
     uma especificação de complementação.

‘compopt’
          compopt [-o OPTION] [-DE] [+o OPTION] [NAME]
     Modifica opções de complementação para cada NAME, de acordo com as
     OPTIONs, ou para a complementação atualmente em execução, se nenhum
     NAME for fornecido.  Se nenhuma OPTION for dada, então exibe as
     opções de complementação para cada NAME ou a complementação atual.
     Os possíveis valores de OPTION são aqueles válidos para o comando
     interno ‘complete’ descrito acima.  A opção ‘-D’ indica que as
     opções restantes deveriam se aplicar à complementação "padrão" do
     comando; isto é, a complementação tentada sobre um comando para o
     qual nenhuma complementação tenha previamente sido definida.  A
     opção ‘-E’ indica que as opções restantes deveriam se aplicar à
     complementação "vazia" do comando; isto é, complementação tentada
     sobre uma linha em branco.

     A opção ‘-D’ tem precedência sobre ‘-E’.

     O valor de retorno é verdadeiro, a menos que uma opção inválida
     seja fornecida; uma tentativa seja feita de modificar as opções
     para um NAME para o qual nenhuma especificação de complementação
     exista; ou um erro de saída ocorra.


File: bashref-pt_BR.info,  Node: Um Exemplo de Complementação Programável,  Prev: Comandos Internos à Complementação Programável,  Up: Edição de Linha de Comando

8.8 Um Exemplo de Complementação Programável
============================================

A maneira mais comum de obter funcionalidade adicional de
complementação, além das ações padrão que ‘complete’ e ‘compgen’ proveem
é utilizar uma função de shell e vinculá-la a um comando em particular
utilizando ‘complete -F’.

   A função seguinte provê complementações para o comando interno ‘cd’.
Ela é um razoável bom exemplo do que as funções de shell devem
necessariamente fazer quando utilizadas para complementação.  Esta
função utiliza a palavra passada como ‘$2’ para determinar o nome de
diretório a complementar.  Você também pode utilizar a variável de vetor
‘COMP_WORDS’; a palavra atual é indexada pela variável ‘COMP_CWORD’.

   A função depende dos comandos internos ‘complete’ e ‘compgen’ para
fazer a maioria do trabalho, adicionando somente as coisas que o ‘cd’ de
Bash faz além de aceitar nomes básicos de diretório: Expansão de til
(veja-se *note Expansão de Til::); busca por diretórios em $CDPATH; o
qual é descrito acima (veja-se *note Comandos Internos do Shell
Bourne::); e suporte básico para a opção de shell ‘cdable_vars’ (veja-se
*note O Comando Interno Shopt::).  ‘_comp_cd’ modifica o valor de IFS,
de forma que ela contém apenas um marcador "newline" para acomodar nomes
de arquivo que contenham espaços e tabs – ‘compgen’ imprime as
complementações possíveis que gera, uma por linha.

   As complementações possíveis vão para a variável e vetor COMPREPLY,
uma complementação por elemento do vetor.  O sistema de complementação
programável resgata as complementações a partir dali quando a função
retorna.

     # Uma função de complementação para o comando interno cd baseada na
     # função de complementação cd oriunda do pacote bash_completion
     _comp_cd()
     {
         local IFS=$' \t\n'    # normaliza a IFS
         local cur _skipdot _cdpath
         local i j k

         # Expansão de til, com o efeito colateral de expandir til para nome
         # de caminho completo
         case "$2" in
         \~*)    eval cur="$2" ;;
         *)      cur=$2 ;;
         esac

         # nenhum cdpath ou nome de caminho absoluto -- complementação
         # estrita de diretório
         if [[ -z "${CDPATH:-}" ]] || [[ "$cur" == @(./*|../*|/*) ]]; then
             # compgen imprime caminhos um por linha; também poderia utilizar
             # um loop while
             IFS=$'\n'
             COMPREPLY=( $(compgen -d -- "$cur") )
             IFS=$' \t\n'
         # CDPATH+diretórios no diretório atual se não no CDPATH
         else
             IFS=$'\n'
             _skipdot=false
             # pré-processa CDPATH para converter nomes nulos de diretórios
             # para .
             _cdpath=${CDPATH/#:/.:}
             _cdpath=${_cdpath//::/:.:}
             _cdpath=${_cdpath/%:/:.}
             for i in ${_cdpath//:/$'\n'}; do
                 if [[ $i -ef . ]]; then _skipdot=true; fi
                 k="${#COMPREPLY[@]}"
                 for j in $( compgen -d -- "$i/$cur" ); do
                     COMPREPLY[k++]=${j#$i/}        # extrai diretório
                 done
             done
             $_skipdot || COMPREPLY+=( $(compgen -d -- "$cur") )
             IFS=$' \t\n'
         fi

         # nomes de variável se apropriada opção de shell e nenhuma
         # complementação
         if shopt -q cdable_vars && [[ ${#COMPREPLY[@]} -eq 0 ]]; then
             COMPREPLY=( $(compgen -v -- "$cur") )
         fi

         return 0
     }

   Nós instalamos a função de complementação utilizando a opção ‘-F’ a
‘complete’:

     # Informa a readline para encapsular apropriadamente e acrescentar
     # barras ao final a diretórios; utiliza a complementação padrão de bash
     # para outros argumentos
     complete -o filenames -o nospace -o bashdefault -F _comp_cd cd

Dado que nós desejamos que Bash e Readline se encarreguem de alguns
outros detalhes para nós, nós utilizamos várias outras opções para
informar a Bash e Readline o que fazer.  A opção ‘-o filenames’ informa
a Readline que as possíveis complementações deveriam ser tratadas como
nomes de arquivos, e encapsuladas apropriadamente.  Essa opção também
fará com que Readline acrescente ao final uma barra a nomes de arquivo
que possa determinar que são diretórios (o que é o motivo pelo qual nós
talvez desejemos estender ‘_comp_cd’ para acrescentar uma barra ao final
se nós estivermos utilizando diretórios encontrados via CDPATH: Readline
não pode dizer se tais complementações são diretórios).  A opção ‘-o
nospace’ informa a Readline para não acrescentar um carácter espaço ao
nome de diretório, no caso de nós desejarmos acrescentar a ele.  A opção
‘-o bashdefault’ traz o restante das complementações "padrão Bash" –
possível complementação que Bash adiciona ao conjunto padrão de
Readline.  Essas incluem coisas como complementação de nome de comando;
complementação de variável para palavras iniciando com ‘{’;
complementações contendo modelos de expansão de nomes de caminho
(veja-se *note Expansão de Nome de Arquivo::); e assim por diante.

   Uma vez instalada utilizando ‘complete’, ‘_comp_cd’ será chamada cada
vez que nós tentarmos a complementação de palavra para um comando ‘cd’.

   Muitos exemplos mais – uma coleção extensa de complementações para a
maioria dos comandos comuns GNU, Unix, e Linux – estão disponíveis como
parte do projeto bash_completion.  Isso é instado por padrão em muitas
distribuições de GNU/Linux.  Originalmente escrito por Ian Macdonald, o
projeto agora reside em <http://bash-completion.alioth.debian.org/>.
Existem portagens para outros sistemas, tais como Solaris e Mac OS X.

   Uma versão antiga do pacote bash_completion é distribuída com bash no
subdiretório ‘examples/complete’.


File: bashref-pt_BR.info,  Node: Utilizando o Histórico Interativamente,  Next: Instalando o Bash,  Prev: Edição de Linha de Comando,  Up: Top

9 Utilizando o Histórico Interativamente
****************************************

Este capítulo descreve como utilizar a biblioteca GNU History
interativamente, a partir do ponto de vista do usuário.  Ele deveria ser
considerado um guia do usuário.  Para informação sobre a utilização da
biblioteca GNU History em outros programas, veja-se o Manual da
Biblioteca GNU Readline.

* Menu:

* Facilidades do Histórico de Bash::	Como Bash te permite manipular seu
histórico de comando.
* Comandos Internos ao Histórico de Bash::	Os comandos internos de Bash que
manipulam o histórico de comando.
* History Interaction::		Qual é o sentimento ao se utilizar
History como um usuário.


File: bashref-pt_BR.info,  Node: Facilidades do Histórico de Bash,  Next: Comandos Internos ao Histórico de Bash,  Up: Utilizando o Histórico Interativamente

9.1 Facilidades do Histórico de Bash
====================================

Quando a opção ‘-o history’ ao comando interno ‘set’ está habilitada
(veja-se *note O Comando Interno Set::), o shell provê acesso ao
“histórico de comandos”, a lista de comandos previamente digitados.  O
valor da variável de shell ‘HISTSIZE’ é utilizada como o número de
comandos a salvar em uma lista de histórico.  O texto dos últimos
‘$HISTSIZE’ comandos (padrão 500) é salvo.  O shell armazena cada
comando em uma lista de histórico prévia a expansão de parâmetro e
variável, porém após a expansão de histórico ser realizada, objeto dos
valores das variáveis de shell ‘HISTIGNORE’ e ‘HISTCONTROL’.

   Quando o shell inicializa, o histórico é inicializado a partir do
arquivo nomeado pela variável ‘HISTFILE’ (padrão ‘~/.bash_history’).  O
arquivo nomeado pelo valor de ‘HISTFILE’ é truncado, se necessário, para
conter não mais que o número de linhas especificadas pelo valor da
variável ‘HISTFILESIZE’.  Quando um shell com histórico habilitado sai,
as últimas ‘$HISTSIZE’ linhas são copiadas a partir da lista de
histórico para o arquivo nominado por ‘$HISTFILE’.  Se a opção de shell
‘histappend’ for configurada (veja-se *note Comandos Internos ao
Bash::), então as linhas são acrescentadas ao final do arquivo de
histórico, do contrário o arquivo de histórico é sobrescrito.  Se
‘HISTFILE’ for desconfigurada, ou se o arquivo de histórico estiver sem
permissão de escrita, então o histórico não é salvo.  Após o salvamento
do histórico, o arquivo de histórico é truncado para conter não mais que
‘$HISTFILESIZE’ linhas.  Se ‘HISTFILESIZE’ estiver desconfigurada, ou
configurada para "null", para um valor não numérico ou um valor numérico
menor que zero, então o arquivo de histórico não é truncado.

   Se a ‘HISTTIMEFORMAT’ estiver configurada, então a informação de
marca temporal associada com cada entrada de histórico é escrita no
arquivo de histórico, marcada com o carácter de comentário de histórico.
Quando o arquivo de histórico é lido, as linhas iniciando com o carácter
de comentário de histórico seguidas imediatamente por um dígito são
interpretadas como marcas temporais para a linha de histórico prévia.

   O comando interno ‘fc’ pode ser utilizado para listar ou editar e
re-executar uma porção da lista de histórico.  O comando interno
‘history’ pode ser utilizado para exibir ou modificar a lista de
histórico e manipular o arquivo de histórico.  Quando da utilização da
edição de linha de comando, os comandos de busca estão disponíveis em
cada modo de edição que provê acesso à lista de histórico (veja-se *note
Commands For History::).

   O shell permite controle sobre quais comandos são salvos na lista de
histórico.  As variáveis ‘HISTCONTROL’ e ‘HISTIGNORE’ podem ser
configuradas para fazer com que o shell salve somente um subconjunto dos
comandos fornecidos.  A opção de shell ‘cmdhist’, se habilitada, faz com
que o shell tente salvar cada linha de um comando multilinha na mesma
entrada de histórico, adicionando ponto e vírgula onde for necessário
para preservar a correção sintática.  A opção de shell ‘lithist’ faz com
o shell salve o comando com marcadores "newline" embutidos, em vez de
ponto e vírgula.  O comando interno ‘shopt’ é utilizado para configurar
essas opções.  Veja-se *note Comandos Internos ao Bash::, para uma
descrição de ‘shopt’.


File: bashref-pt_BR.info,  Node: Comandos Internos ao Histórico de Bash,  Next: History Interaction,  Prev: Facilidades do Histórico de Bash,  Up: Utilizando o Histórico Interativamente

9.2 Comandos Internos ao Histórico de Bash
==========================================

Bash provê dois comandos internos os quais manipulam a lista de
histórico e o arquivo de histórico.

‘fc’
          fc [-e ENAME] [-lnr] [FIRST] [LAST]
          fc -s [PAT=REP] [COMMAND]

     A primeira forma seleciona um intervalo de comandos, desde FIRST
     até LAST, da lista de histórico e exibe ou edita e os re-executa.
     FIRST e LAST podem ser especificadas como uma sequência de
     caracteres (para localizar o mais recente comando iniciando com
     aquela sequência de caracteres) ou como um número (um índice na
     lista de histórico, onde um número negativo é utilizado como uma
     compensação a partir do número atual de comando).  Se LAST não for
     especificado, então é configurado para FIRST.  Se FIRST não for
     especificado, então é configurado para o comando prévio para edição
     e −16 para listagem.  Se o sinalizador ‘-l’ for dado, então os
     comandos são listados na saída padrão.  O sinalizador ‘-n’ suprime
     os números de comando quando da listagem.  O sinalizador ‘-r’
     reverte a ordem da listagem.  Do contrário, o editor dado por ENAME
     é invocado sobre um arquivo contendo aqueles comandos.  Se ENAME
     não for dado, então o valor da seguinte expansão de variável é
     utilizado: ‘${FCEDIT:-${EDITOR:-vi}}’.  Isso diz para utilizar o
     valor da variável ‘FCEDIT’ se configurado, ou o valor da variável
     ‘EDITOR’ se essa estiver configurada, ou ‘vi’ se nenhuma delas
     estiver configurada.  Quando a edição estiver completa, os comandos
     editados são ecoados e executados.

     Na segunda forma, COMMAND é re-executado após cada instância de PAT
     no comando selecionado ser substituída por REP.  COMMAND é
     interpretado do mesmo jeito que FIRST acima.

     Um apelido útil para se utilizar com o comando ‘fc’ é ‘r='fc -s'’,
     de maneira que digitar ‘r cc’ executa o último comando iniciando
     com ‘cc’ e digitar ‘r’ re-executa o último comando (veja-se *note
     Apelidos::).

‘history’
          history [N]
          history -c
          history -d OFFSET
          history [-anrw] [FILENAME]
          history -ps ARG

     Sem opções, exibe a lista de histórico com números de linha.  As
     linhas prefixadas com um ‘*’ foram modificadas.  Um argumento de N
     lista somente as últimas N linhas.  Se a variável de shell
     ‘HISTTIMEFORMAT’ estiver configurada e não nula, então ela é
     utilizada como uma sequência de caracteres de formato para STRFTIME
     exibir a marca temporal associada com cada entrada de histórico
     exibida.  Nenhum espaço em branco interveniente é impresso entre a
     marca temporal formatada e a linha de histórico.

     As opções, se fornecidas, tem os seguintes significados:

     ‘-c’
          Limpa a lista de histórico.  Isso pode ser combinado com as
          outras opções para substituir a lista de histórico
          completamente.

     ‘-d OFFSET’
          Deleta a entrada de histórico na posição OFFSET.  OFFSET
          deveria ser especificado conforme aparece quando o histórico é
          exibido.

     ‘-a’
          Acrescenta ao final as novas linhas de histórico (linhas de
          histórico entradas desde o início da sessão atual de Bash) ao
          arquivo de histórico.

     ‘-n’
          Acrescenta as linhas de histórico ainda não lidas a partir do
          arquivo de histórico à atual lista de histórico.  Essas são
          linhas adicionadas ao arquivo de histórico desde o início da
          sessão atual de Bash.

     ‘-r’
          Lê o arquivo de histórico e adiciona seu conteúdo à lista de
          histórico.

     ‘-w’
          Escreve a atual lista de histórico ao arquivo de histórico.

     ‘-p’
          Realiza substituição de histórico sobre os ARGs e exibe o
          resultado na saída padrão, sem armazenar os resultados na
          lista de histórico.

     ‘-s’
          Os ARGs são adicionados ao final da lista de histórico como
          uma entrada única.

     Quando qualquer das opções ‘-w’, ‘-r’, ‘-a’, ou ‘-n’ é utilizada,
     se FILENAME for dado, então ele é utilizado como o arquivo de
     histórico.  Se não, então o valor da variável ‘HISTFILE’ é
     utilizada.


File: bashref-pt_BR.info,  Node: History Interaction,  Prev: Comandos Internos ao Histórico de Bash,  Up: Utilizando o Histórico Interativamente

9.3 Expansão de Histórico
=========================

A biblioteca History provê uma característica de expansão de histórico
que é semelhante à expansão de histórico provida por ‘csh’.  Esta seção
descreve a sintaxe utilizada para manipular a informação de histórico.

   As expansões de histórico introduzem palavras originadas da lista de
histórico no fluxo de entrada, tornando fácil repetir comandos, inserir
os argumentos ao comando anterior na linha de entrada atual, ou corrigir
erros em comandos anteriores rapidamente.

   A expansão de histórico tem lugar em duas partes.  A primeira é para
determinar qual linha a partir da lista de histórico deveria ser
utilizada durante a substituição.  A segunda é selecionar porções
daquela linha para inclusão na atual.  A linha selecionada a partir do
histórico é chamada o “evento”, e as porções daquela linha sobre as
quais se atua são chamadas “palavras”.  Vários “modificadores” estão
disponíveis para manipular as palavras selecionadas.  A linha é quebrada
em palavras no mesmo estilo que Bash faz, de forma que várias palavras
envolvidas por aspas são consideradas uma palavra.  As expansões de
histórico são introduzidas pela aparência do carácter de expansão de
histórico, o qual é ‘!’ por padrão.  Somente ‘\’ e ‘'’ podem ser
utilizados para encapsular o carácter de expansão de histórico.

   Várias opções de shell configuráveis com o comando interno ‘shopt’
(veja-se *note Comandos Internos ao Bash::) podem ser utilizados para
adaptar o comportamento da expansão de histórico.  Se a opção de shell
‘histverify’ estiver habilitada, e Readline estiver sendo utilizada,
então as substituições de histórico não são passadas imediatamente ao
analisador do shell.  Em vez disso, a linha expandida é recarregada na
área de memória intermediária de edição de Readline para modificações
mais amplas.  Se Readline estiver sendo utilizada, e a opção de shell
‘histreedit’ estiver habilitada, então uma expansão falha de histórico
será recarregada na área de memória intermediária de edição de Readline
para correção.

   A opção ‘-p’ ao comando interno ‘history’ pode ser utilizada para se
ver qual expansão de histórico fará antes de utilizá-la.  A opção ‘-s’
ao comando interno ‘history’ pode ser utilizada para adicionar comandos
ao final da lista de histórico sem atualmente executá-los, de forma que
eles estejam disponíveis para rechamadas subsequentes.  Isso é útil
geralmente em conjunção com Readline.

   O shell permite controle dos vários caracteres utilizados pelo
mecanismo de expansão de histórico com a variável ‘histchars’, conforme
explanado acima (veja-se *note Variáveis do Bash::).  O shell utiliza o
carácter de comentário de histórico para assinalar marcas temporais
quando da escrita do arquivo de histórico.

* Menu:

* Designadores de Evento::	Como especificar qual linha de histórico
utilizar.
* Designadores de Palavra::	Especificando quais palavras são de interesse.
* Modificadores::		Modificando os resultados da substituição.


File: bashref-pt_BR.info,  Node: Designadores de Evento,  Next: Designadores de Palavra,  Up: History Interaction

9.3.1 Designadores de Evento
----------------------------

Um designador de evento é uma referência a uma entrada de linha de
comando na lista de histórico.  A menos que a referência seja absoluta,
os eventos são relativos à posição atual na lista de histórico.

‘!’
     Inicia uma substituição de histórico, exceto quando seguida por um
     espaço, tab, o final da linha, ‘=’ ou ‘(’ (quando a opção de shell
     ‘extglob’ estiver habilitada utilizando-se o comando interno
     ‘shopt’).

‘!N’
     Refere-se à linha de comando N.

‘!-N’
     Refere-se ao comando N linhas atrás.

‘!!’
     Refere-se ao comando prévio.  Isso é um sinônimo para ‘!-1’.

‘!STRING’
     Refere-se ao comando mais recente precedente à posição atual na
     lista de histórico iniciando com STRING.

‘!?STRING[?]’
     Refere-se ao comando mais recente precedente à posição atual na
     lista de histórico contendo STRING.  O ‘?’ ao final pode ser
     omitido se a STRING for seguida imediatamente por um marcador
     newline.

‘^STRING1^STRING2^’
     Substituição rápida.  Repete o último comando, substituindo STRING1
     com STRING2.  Equivalente a ‘!!:s/STRING1/STRING2/’.

‘!#’
     A linha de comando inteira digitada longe.


File: bashref-pt_BR.info,  Node: Designadores de Palavra,  Next: Modificadores,  Prev: Designadores de Evento,  Up: History Interaction

9.3.2 Designadores de Palavra
-----------------------------

Os designadores de palavra são utilizados para selecionar palavras
desejadas a partir do evento.  Um ‘:’ separa a especificação de evento
do designador de palavra.  Pode ser omitido se o designador de palavra
se inicia com um ‘^’, ‘$’, ‘*’, ‘-’, ou ‘%’.  As palavras são numeradas
a partir do inicio da linha, com a primeira palavra sendo denotada por 0
(zero).  As palavras são inseridas na linha atual separadas por espaços
únicos.

   Por exemplo,

‘!!’
     designa o comando precedente.  Quando você digita isso, o comando
     precedente é repetido literalmente.

‘!!:$’
     designa o último argumento do comando precedente.  Isso pode ser
     abreviado para ‘!$’.

‘!fi:2’
     designa o segundo argumento do comando mais recente iniciando com
     as letras ‘fi’.

   Aqui estão os designadores de palavra:

‘0 (zero)’
     A ‘0’enésima palavra.  Para muitas aplicações, isso é a palavra do
     comando.

‘N’
     A Nésima palavra.

‘^’
     O primeiro argumento; isto é, palavra 1.

‘$’
     O último argumento.

‘%’
     A palavra coincidida pela mais recente busca ‘?STRING?’.

‘X-Y’
     Um intervalo de palavras; ‘-Y’ abrevia ‘0-Y’.

‘*’
     Todas as palavras, exceto a ‘0’enésima.  Isso é um sinônimo para
     ‘1-$’.  É um erro utilizar ‘*’ se existir apenas uma palavra no
     evento; a sequência de caracteres vazia é retornada nesse caso.

‘X*’
     Abrevia ‘X-$’

‘X-’
     Abrevia ‘X-$’ como ‘X*’, porém omite a última palavra.

   Se um designador de palavra for fornecido sem uma especificação de
evento, então o comando prévio é utilizado como o evento.


File: bashref-pt_BR.info,  Node: Modificadores,  Prev: Designadores de Palavra,  Up: History Interaction

9.3.3 Modificadores
-------------------

Após o designador opcional de palavra, você pode adicionar uma sequência
de um ou mais dos seguintes modificadores, cada um precedido por ‘:’.

‘h’
     Remove um componente final de nome de caminho, deixando somente a
     cabeça.

‘t’
     Remove todos os componentes finais de nome de caminho, deixando a
     cauda.

‘r’
     Remove um sufixo inicial da forma ‘.SUFFIX’, deixando o nome de
     base.

‘e’
     Remove tudo, menos o sufixo final.

‘p’
     Imprime o comando novo, porém não o executa.

‘q’
     Encapsula as palavras substituídas, encapsulando substituições
     adicionais.

‘x’
     Encapsula as palavras substituídas como com ‘q’, porém quebra em
     palavras nos espaços, tabs, e nos marcadores newline.

‘s/OLD/NEW/’
     Substitui NEW para a primeira ocorrência de OLD na linha de evento.
     Qualquer delimitador pode ser utilizado no lugar de ‘/’.  O
     delimitador pode ser encapsulado em OLD e NEW com uma barra
     invertida única.  Se ‘&’ aparece em NEW, então ele é substituído
     por OLD.  Uma barra invertida única encapsulará o ‘&’.  O
     delimitador final é opcional se ele for o último carácter na linha
     de entrada.

‘&’
     Repete a substituição prévia.

‘g’
‘a’
     Faz com que mudanças sejam aplicadas sobre a linha de evento
     inteira.  Utilizado em conjunção com ‘s’, como em ‘gs/OLD/NEW/’, ou
     com ‘&’.

‘G’
     Aplica o modificador ‘s’ seguinte uma vez a cada palavra no evento.


File: bashref-pt_BR.info,  Node: Instalando o Bash,  Next: Relatando Bugs,  Prev: Utilizando o Histórico Interativamente,  Up: Top

10 Instalando o Bash
********************

Este capítulo provê instruções básicas para a instalação de Bash nas
várias plataformas suportadas.  A distribuição suporta os sistemas
operacionais GNU, quase cada versão de Unix, e vários sistemas não Unix
tais como BeOS e Interix.  Outras portagens independentes existem para
MS-DOS, OS/2, e plataformas Windows.

* Menu:

* Instalação Básica::	Instruções de instalação.
* Compiladores e Opções::	Como configurar opções especiais para
				vários sistemas.
* Compilando Para Múltiplas Arquiteturas::	Como compilar Bash para
						mais que um tipo de
						sistema a partir da
						mesma árvore de fonte.
* Nomes de Instalação::	Como configurar os vários caminhos utilizados
			pela instalação.
* Especificando o Tipo do Sistema::	Como configurar Bash para um sistema
				particular.
* Compartilhando Padrões::	Como compartilhar valores padrão de configuração
			entre programas GNU.
* Controles de Operação::	Opções reconhecidas pelo programa de
			configuração.
* Características Opcionais::	Como habilitar e desabilitar características
			opcionais quando da construção de Bash.


File: bashref-pt_BR.info,  Node: Instalação Básica,  Next: Compiladores e Opções,  Up: Instalando o Bash

10.1 Instalação Básica
======================

Estas são instruções de instalação para Bash.

   A maneira mais simples de compilar Bash é:

  1. mudar (‘cd’) para o diretório contendo o código fonte e digitar
     ‘./configure’ para configurar Bash para o seu sistema.  Se você
     estiver utilizando ‘csh’ em uma versão antiga de System V, pelo
     contrário talvez você precise digitar ‘sh ./configure’ para
     prevenir ‘csh’ de tentar executar o próprio ‘configure’.

     A execução de ‘configure’ leva algum tempo.  Enquanto em execução,
     ele imprime mensagens dizendo quais características ele está
     verificando.

  2. Digite ‘make’ para compilar Bash e construir o script de
     relatamento de erro ‘bashbug’.

  3. Opcionalmente, digite ‘make tests’ para executar a suíte de teste
     do Bash.

  4. Digite ‘make install’ para instalar ‘bash’ e ‘bashbug’.  Isso
     também instalará as páginas de manual e arquivo Info.

   O script de shell ‘configure’ tenta adivinhar os valores corretos
para várias variáveis dependentes de sistema utilizadas durante a
compilação.  Ele utiliza tais valores para criar um ‘Makefile’ em cada
diretório do pacote (o diretório topo, dos diretórios ‘builtins’, ‘doc’,
e ‘support’, cada diretório sob ‘lib’, e vários outros).  O script
também cria um arquivo ‘config.h’ contendo definições dependentes de
sistema.  Finalmente, ele cria um script de shell chamado
‘config.status’ que você pode executar no futuro para recriar a
configuração atual, um arquivo ‘config.cache’ que salva os resultados de
seus testes para acelerar a reconfiguração, e um arquivo ‘config.log’
contendo saída do compilador (útil principalmente para depurar
‘configure’).  Se em certo ponto ‘config.cache’ contém resultados que
você não deseja manter, então você pode remover ou editá-lo.

   Para descobrir mais sobre as opções e argumentos que o script
‘configure’ entende, digite

     bash-2.04$ ./configure --help

no prompt do Bash no seu diretório de fonte do Bash.

   Se você precisar fazer coisas fora do usual para compilar Bash, por
favor tente compreender como ‘configure’ poderia verificar quando ou não
fazer tais coisas, e envie as instruções ou diffs, via mensagem, para
<bash-maintainers@gnu.org> de forma que possam ser consideradas para o
próximo lançamento.

   O arquivo ‘configure.ac’ é utilizado para criar ‘configure’ por um
programa chamado Autoconf.  Você somente precisa de ‘configure.ac’ se
você desejar modificá-lo ou regenerar ‘configure’ utilizando uma versão
mais nova de Autoconf.  Se você fizer isso, tenha certeza de que você
está utilizando Autoconf versão 2.50 ou superior.

   Você pode remover os binários do programa e arquivos de objeto do
diretório de código fonte digitando ‘make clean’.  Para remover também
os arquivos que ‘configure’ criou (de forma que você pode compilar Bash
para um tipo diferente de computador), digite ‘make distclean’.


File: bashref-pt_BR.info,  Node: Compiladores e Opções,  Next: Compilando Para Múltiplas Arquiteturas,  Prev: Instalação Básica,  Up: Instalando o Bash

10.2 Compiladores e Opções
==========================

Alguns sistemas exigem opções não usuais para compilação ou lincagem que
o script ‘configure’ não conhece.  Você pode dar a ‘configure’ valores
iniciais para variáveis configurando elas no ambiente.  Na utilização de
um shell compatível com Bourne, você pode fazer isso em linha de comando
como isto:

     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

   Em sistemas que tem o programa ‘env’, você pode fazê-lo assim:

     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

   O processo de configuração utiliza GCC para construir Bash se GCC
estiver disponível.


File: bashref-pt_BR.info,  Node: Compilando Para Múltiplas Arquiteturas,  Next: Nomes de Instalação,  Prev: Compiladores e Opções,  Up: Instalando o Bash

10.3 Compilando Para Múltiplas Arquiteturas
===========================================

Você pode compilar Bash para mais que uma espécie de computador ao mesmo
tempo, colocando os arquivos objeto para cada arquitetura em seus
próprios diretórios.  Para fazer isso, você deve necessariamente
utilizar uma versão de ‘make’ que suporte a variável ‘VPATH’, tal como
GNU ‘make’.  Vá (‘cd’) para o diretório onde você deseja que os
executáveis e arquivos objeto estejam e execute o script ‘configure’ a
partir do diretório fonte.  Você talvez precise fornecer o argumento
‘--srcdir=PATH’ para informar a ‘configure’ onde estão os arquivos
fonte.  ‘configure’ automaticamente verifica o código fonte no diretório
que ‘configure’ está e em ‘..’.

   Se você tiver que utilizar um ‘make’ que não suporte a variável
‘VPATH’, então você pode compilar Bash para uma arquitetura por vez no
diretório de código fonte.  Após você ter instalado Bash para uma
arquitetura, utilize ‘make distclean’ antes de reconfigurar para uma
outra arquitetura.

   Alternativamente, se o seu sistema suporta links simbólicos, você
pode utilizar o script ‘support/mkclone’ para criar uma árvore de
construção a qual tem link simbólicos de volta a cada arquivo no
diretório fonte.  Aqui está um exemplo que cria um diretório de
construção no diretório atual a partir de um diretório fonte
‘/usr/gnu/src/bash-2.0’:

     bash /usr/gnu/src/bash-2.0/support/mkclone -s /usr/gnu/src/bash-2.0 .

O script ‘mkclone’ exige Bash, assim você deve necessariamente já ter
construído Bash para pelo menos uma arquitetura antes que você possa
criar diretórios de construção para outras arquiteturas.


File: bashref-pt_BR.info,  Node: Nomes de Instalação,  Next: Especificando o Tipo do Sistema,  Prev: Compilando Para Múltiplas Arquiteturas,  Up: Instalando o Bash

10.4 Nomes de Instalação
========================

Por padrão, ‘make install’ instalará em ‘/usr/local/bin’,
‘/usr/local/man’, etc.  Você pode especificar um outro prefixo de
instalação diferente de ‘/usr/local’ dando a ‘configure’ a opção
‘--prefix=PATH’, ou especificando um valor para a variável de ‘make’
‘DESTDIR’ quando da execução de ‘make install’.

   Você pode especificar prefixos de instalação separados para arquivos
específicos a uma arquitetura e arquivos independentes de arquitetura.
Se você der a ‘configure’ a opção ‘--exec-prefix=PATH’, então ‘make
install’ utilizará PATH como o prefixo para a instalação de programas e
bibliotecas.  Documentação e outros arquivos de dados ainda utilizarão o
prefixo regular.


File: bashref-pt_BR.info,  Node: Especificando o Tipo do Sistema,  Next: Compartilhando Padrões,  Prev: Nomes de Instalação,  Up: Instalando o Bash

10.5 Especificando o Tipo do Sistema
====================================

Talvez existam algumas características que ‘configure’ não pode
compreender automaticamente, porém precisa determinar pelo tipo de
máquina na qual Bash executará.  Usualmente ‘configure’ pode compreender
isso, mas se Bash imprime uma mensagem dizendo que não pode adivinhar o
tipo de máquina, então dê a Bash a opção ‘--host=TYPE’.  ‘TYPE’ pode ser
ou um nome curto para o tipo de sistema, tal como ‘sun4’, ou um nome
canônico com três campos: ‘CPU-COMPANY-SYSTEM’ (por exemplo,
‘i386-unknown-freebsd4.2’).

   Veja-se o arquivo ‘support/config.sub’ para os valores possíveis de
cada campo.


File: bashref-pt_BR.info,  Node: Compartilhando Padrões,  Next: Controles de Operação,  Prev: Especificando o Tipo do Sistema,  Up: Instalando o Bash

10.6 Compartilhando Padrões
===========================

Se você desejar configurar valor padrão para os scripts ‘configure’ para
compartilhar, você pode criar um script local de shell chamado
‘config.site’ o qual te dá valores padrão para variáveis como ‘CC’,
‘cache_file’, e ‘prefix’.  ‘configure’ procura se
‘PREFIX/share/config.site’ existe.  Ou, você pode configurar a variável
de ambiente ‘CONFIG_SITE’ para a localização do script local.  Um
alerta: O ‘configure’ de Bash procura por um script local, porém nem
todos os scripts ‘configure’ o fazem.


File: bashref-pt_BR.info,  Node: Controles de Operação,  Next: Características Opcionais,  Prev: Compartilhando Padrões,  Up: Instalando o Bash

10.7 Controles de Operação
==========================

‘configure’ reconhece as seguintes opções para controlar como ele opera.

‘--cache-file=FILE’
     Utiliza e salva os resultados dos testes em FILE em vez de
     ‘./config.cache’.  Configure FILE para ‘/dev/null’ para desabilitar
     o caching, para a depuração de ‘configure’.

‘--help’
     Imprime um sumário das opções para ‘configure’, e sai.

‘--quiet’
‘--silent’
‘-q’
     Não imprime mensagens dizendo quais verificações estão sendo
     feitas.

‘--srcdir=DIR’
     Procura pelo código fonte de Bash no diretório DIR.  Usualmente
     ‘configure’ pode determinar esse diretório automaticamente.

‘--version’
     Imprime a versão de Autoconf utilizada para gerar o script
     ‘configure’, e sai.

   ‘configure’ também aceita algumas outras, não amplamente utilizadas,
opções clichê.  ‘configure --help’ imprime a lista completa.


File: bashref-pt_BR.info,  Node: Características Opcionais,  Prev: Controles de Operação,  Up: Instalando o Bash

10.8 Características Opcionais
==============================

O ‘configure’ de Bash tem um número de opções ‘--enable-FEATURE’, onde
FEATURE indica uma parte opcional de Bash.  Existem também várias opções
‘--with-PACKAGE’, onde PACKAGE é alguma coisa como ‘bash-malloc’ ou
‘purify’.  Para desligar o uso padrão de um pacote, utilize
‘--without-PACKAGE’.  Para configurar Bash sem uma característica que
está habilitada por padrão, utilize ‘--disable-FEATURE’.

   Aqui está uma lista completa das opções ‘--enable-’ e ‘--with-’ que o
‘configure’ de Bash reconhece.

‘--with-afs’
     Define se você está utilizando o Sistema de Arquivo Andrew oriundo
     da Transarc.

‘--with-bash-malloc’
     Utilize a versão Bash de ‘malloc’ no diretório ‘lib/malloc’.  Esse
     não é o mesmo ‘malloc’ que aparece em GNU libc, mas uma versão mais
     antiga originalmente derivada do ‘malloc’ do BSD 4.2.  Esse
     ‘malloc’ é muito rápido, porém desperdiça algum espaço em cada
     alocação.  Essa opção está habilitada por padrão.  O arquivo
     ‘NOTES’ contém uma lista dos sistemas para os quais isso deveria
     estar desligado, e ‘configure’ desabilita essa opção
     automaticamente para um número de sistemas.

‘--with-curses’
     Utiliza a biblioteca curses em vez da biblioteca termcap.  Isso
     deveria ser fornecido se o seu sistema tem uma base de dados
     termcap inadequada ou incompleta.

‘--with-gnu-malloc’
     Um sinônimo para ‘--with-bash-malloc’.

‘--with-installed-readline[=PREFIX]’
     Defina isso para fazer com que Bash vincule com uma versão
     instalada localmente de Readline em vez da versão em
     ‘lib/readline’.  Isso somente funciona com Readline 5.0 e versões
     posteriores.  Se PREFIX for ‘yes’ ou não fornecido, ‘configure’
     utiliza os valores das variáveis de make ‘includedir’ e ‘libdir’,
     as quais são subdiretórios de ‘prefix’ por padrão, para encontrar a
     versão instalada de Readline se ela não estiver nos diretórios
     padrão de sistema include e library.  Se PREFIX for ‘no’, então
     Bash vincula com a versão em ‘lib/readline’.  Se PREFIX estiver
     configurada para qualquer outro valor, então ‘configure’ a trata
     como um nome de caminho de diretório para a versão instalada de
     Readline nos subdiretórios daquele diretório (arquivos include em
     PREFIX/‘include’ e a biblioteca em PREFIX/‘lib’).

‘--with-purify’
     Defina isso para utilizar o verificador de alocação de memória
     Purify da Rational Software.

‘--enable-minimal-config’
     Isso produz um shell com características mínimas, próximo do
     histórico shell Bourne.

   Existem várias opções ‘--enable-’ que alteram como Bash é compilado e
vinculado, em vez de modificar características de tempo de execução.

‘--enable-largefile’
     Habilita o suporte para large files
     (http://www.sas.com/standards/large_file/x_open.20Mar96.html) se o
     sistema operacional exige opções especiais de compilador para
     construir programas os quais podem acessar arquivos grandes.  Isso
     está habilitado por padrão, se o sistema operacional provê suporte
     a arquivo grande.

‘--enable-profiling’
     Isso constrói um binário Bash que produz informação de perfil para
     ser processada por ‘gprof’ cada vez que for executada.

‘--enable-static-link’
     Isso faz com que Bash seja vinculado estaticamente, se ‘gcc’
     estiver sendo utilizado.  Isso poderia ser empregado para construir
     uma versão para se utilizar como o shell do root.

   A opção ‘minimal-config’ pode ser utilizada para desabilitar todas as
opções seguintes, mas ela é processada primeiro, de forma que as opções
individuais podem ser habilitadas utilizando-se ‘enable-FEATURE’.

   Todas as opções seguintes, exceto ‘disabled-builtins’,
‘directpand-default’, e ‘xpg-echo-default’, estão habilitadas por
padrão, a menos que o sistema operacional não forneça o suporte
necessário.

‘--enable-alias’
     Permite a expansão de apelido e inclui os comandos internos ‘alias’
     e ‘unalias’ (veja-se *note Apelidos::).

‘--enable-arith-for-command’
     Inclui suporte para o formato alternativo do comando ‘for’ que se
     comporta como a declaração ‘for’ da linguagem C (veja-se *note
     Construtores de Ciclos::).

‘--enable-array-variables’
     Inclui suporte para variáveis de shell vetor unidimensional
     (veja-se *note Vetores::).

‘--enable-bang-history’
     Inclui suporte para a substituição de histórico no estilo ‘csh’
     (veja-se *note History Interaction::).

‘--enable-brace-expansion’
     Inclui a expansão de chave ao estilo ‘csh’ ( ‘b{a,b}c’ ↦ ‘bac bbc’
     ).  Veja-se *note Expansão de Chave::, para uma descrição completa.

‘--enable-casemod-attributes’
     Inclui suporte para os atributos de modificação de caso no comando
     interno ‘declare’ e declarações de atribuição.  As variáveis com o
     atributo UPPERCASE, por exemplo, terão os seus valores convertidos
     para maiúsculo quando da atribuição.

‘--enable-casemod-expansion’
     Inclui suporte para as expansões de palavra de modificação de caso.

‘--enable-command-timing’
     Inclui suporte para o reconhecimento de ‘time’ como sendo uma
     palavra reservada e para a exibição de estatísticas de temporização
     para o canal de comunicação seguinte a ‘time’ (veja-se *note Canais
     de Comunicação::).  Isso permite que os canais de comunicação bem
     como as funções e comandos internos de shell sejam temporizados.

‘--enable-cond-command’
     Inclui suporte para o comando condicional ‘[[’.  (veja-se *note
     Construtores Condicionais::).

‘--enable-cond-regexp’
     Inclui suporte para se coincidir as expressões regulares POSIX
     utilizando-se o operador binário ‘=~’ no comando condicional ‘[[’.
     (veja-se *note Construtores Condicionais::).

‘--enable-coprocesses’
     Inclui suporte para co-processos e a palavra reservada ‘coproc’
     (veja-se *note Canais de Comunicação::).

‘--enable-debugger’
     Inclui suporte para o depurador bash (distribuído separadamente).

‘--enable-direxpand-default’
     Faz com a opção de shell ‘direxpand’ (veja-se *note O Comando
     Interno Shopt::) seja habilitada por padrão quando o shell
     inicializa.  Essa opção normalmente é desabilitada por padrão.

‘--enable-directory-stack’
     Inclui suporte para a pilha de diretório ao estilo ‘csh’ e os
     comandos internos ‘pushd’, ‘popd’, e ‘dirs’ (veja-se *note A Pilha
     de Diretório::).

‘--enable-disabled-builtins’
     Permite que os comandos internos sejam invocados via ‘builtin xxx’
     mesmo após ‘xxx’ tiver sido desabilitado utilizando-se ‘enable -n
     xxx’.  Veja-se *note Comandos Internos ao Bash::, para detalhes dos
     comandos internos ‘builtin’ e ‘enable’.

‘--enable-dparen-arithmetic’
     Inclui suporte para o comando ‘((…))’ (veja-se *note Construtores
     Condicionais::).

‘--enable-extended-glob’
     Inclui suporte para as características de coincidência de padrão
     estendidas descritas acima sob *note Coincidência de Modelo::.

‘--enable-extended-glob-default’
     Configura o valor padrão da opção de shell EXTGLOB, descrita acima
     sob *note O Comando Interno Shopt::, para ser habilitada.

‘--enable-glob-asciirange-default’
     Configura o valor padrão da opção de shell GLOBASCIIRANGES,
     descrita acima sob *note O Comando Interno Shopt::, para ser
     habilitada.  Isso controla o comportamento dos intervalos de
     caracteres utilizados nas expressões de chave de coincidência de
     padrão.

‘--enable-help-builtin’
     Inclui o comando interno ‘help’, o qual exibe ajuda sobre os
     comandos internos do shell e variáveis (veja-se *note Comandos
     Internos ao Bash::).

‘--enable-history’
     Inclui histórico de comando e os comandos internos ‘fc’ e ‘history’
     (veja-se *note Facilidades do Histórico de Bash::).

‘--enable-job-control’
     Isso habilita as características de controle de tarefa (*note
     Controle de Tarefa::), se o sistema operacional as suporta.

‘--enable-multibyte’
     Isso habilita suporte a caracteres multi-byte se o sistema
     operacional provê o necessário suporte.

‘--enable-net-redirections’
     Isso habilita a manipulação especial de nomes de arquivo da forma
     ‘/dev/tcp/HOST/PORT’ e ‘/dev/udp/HOST/PORT’ quando utilizados nas
     redireções (veja-se *note Redireções::).

‘--enable-process-substitution’
     Isso habilita a substituição de processo (veja-se *note
     Substituição de Processo::) se o sistema operacional provê o
     necessário suporte.

‘--enable-progcomp’
     Habilita as facilidades de completação programáveis (veja-se *note
     Complementação Programável::).  Se Readline não estiver habilitada,
     então essa opção não tem efeito.

‘--enable-prompt-string-decoding’
     Liga a interpretação de um número de caracteres encapsulados por
     barras invertidas nas sequências de caracteres de prompt ‘$PS1’,
     ‘$PS2’, ‘$PS3’, e ‘$PS4’.  Veja-se *note Controlando o Prompt::,
     para uma lista completa das sequências de encapsulamento de
     sequências de caracteres de prompt.

‘--enable-readline’
     Inclui suporte para a edição de linha de comando e histórico com a
     versão Bash da biblioteca Readline (veja-se *note Edição de Linha
     de Comando::).

‘--enable-restricted’
     Inclui suporte para a “restricted shell”.  Se isso estiver
     habilitado, então Bash, quando chamado como ‘rbash’, entra em um
     modo restrito.  Veja-se *note O Shell Restrito::, para uma
     descrição do modo restrito.

‘--enable-select’
     Inclui o comando composto ‘select’, o qual permite a geração de
     menus simples (veja-se *note Construtores Condicionais::).

‘--enable-separate-helpfiles’
     Utiliza arquivos externos para a documentação exibida pelo comando
     interno ‘help’ em vez de armazenar o texto internamente.

‘--enable-single-help-strings’
     Armazena o texto exibido pelo comando interno ‘help’ como uma
     sequência de caracteres única para tópico de ajuda.  Isso auxilia
     na tradução do texto para linguagens diferentes.  Você talvez
     precise desabilitar isso se o seu compilador não pode lidar com
     literais de sequências de caracteres longa demais.

‘--enable-strict-posix-default’
     Faz com Bash fique conformante com o padrão POSIX por padrão
     (veja-se *note O Modo POSIX de Bash::).

‘--enable-usg-echo-default’
     Um sinônimo para ‘--enable-xpg-echo-default’.

‘--enable-xpg-echo-default’
     Faz com que o comando interno ‘echo’ expanda caracteres
     encapsulados por barra invertida por padrão, sem exigir a opção
     ‘-e’.  Isso configura o valor padrão da opção de shell ‘xpg_echo’
     para ‘on’, o qual faz com que ‘echo’ do Bash se comporte mais como
     a versão especificada na Single Unix Specification, versão 3.
     Veja-se *note Comandos Internos ao Bash::, para uma descrição das
     sequências de encapsulamento que ‘echo’ reconhece.

   O arquivo ‘config-top.h’ contém declarações ‘#define’ do
Preprocessador C para opções que não são configuráveis via ‘configure’.
Algumas dessas não foram concebidas para serem modificadas; tenha
cuidado com as consequências se você modificar.  Leia os comentários
associados com cada definição para mais informações sobre seus efeitos.


File: bashref-pt_BR.info,  Node: Relatando Bugs,  Next: Maiores Diferenças Para o Shell Bourne,  Prev: Instalando o Bash,  Up: Top

Ap@^{e}ndice A Relatando Bugs
*****************************

Por favor, relate todos os bugs que você encontrar no Bash.  Mas
primeiro, você deveria ter certeza que é realmente um bug, e que aparace
na versão mais recente de Bash.  A versão mais recente sempre está
disponível para transferência via FTP a partir de
<ftp://ftp.gnu.org/pub/gnu/bash/>.

   Uma vez que você determinou que um bug existe atualmente, utilize o
comando ‘bashbug’ para submeter um relatório de bug.  Se você tiver um
reparo, você está encorajado a enviá-lo também!  Sugestões e relatórios
"filosóficos" de bug podem ser enviados para <bug-bash@gnu.org> ou
postados no grupo de notícias Usenet ‘gnu.bash.bug’.

   Todos os relatórios de bug deveriam incluir:
   • O número de versão de Bash.
   • O hardware e sistema operacional.
   • O compilador utilizado para compilar Bash.
   • Uma descrição do comportamento defeituoso.
   • Um script curto ou "receita" que exercite o bug e pode ser
     utilizado para reproduzi-lo.

‘bashbug’ insere os primeiros três itens automaticamente no modelo que
fornece para preenchimento de um relatório de bug.

   Por favor, envie todos os relatórios relativos a este manual para
<bug-bash@gnu.org>.


File: bashref-pt_BR.info,  Node: Maiores Diferenças Para o Shell Bourne,  Next: Licença de Documentação Livre GNU,  Prev: Relatando Bugs,  Up: Top

Ap@^{e}ndice B Maiores Diferenças Para o Shell Bourne
*****************************************************

Bash implementa essencialmente a mesma gramática, expansão de parâmetro
e variável, redireção, e encapsulamento entre aspas que o Bourne Shell.
Bash utiliza o padrão POSIX como a especificação de como essas
características devem ser implementadas.  Existem algumas diferenças
entre o tradicional shell Bourne e Bash; esta seção detalha rapidamente
as diferenças de significância.  Um número dessas diferenças estão
explanadas em maior profundidade nas seções anteriores.  Esta seção
utiliza a versão de ‘sh’ inclusa no SVR4.2 (a última versão do histórico
shell Bourne) como a referência inicial.

   • Bash é conformante com POSIX, mesmo onde a especificação POSIX
     difere do comportamento do ‘sh’ tradicional (veja-se *note O Modo
     POSIX de Bash::).

   • Bash tem opções de invocação multi-carácter (veja-se *note
     Invocando o Bash::).

   • Bash tem edição de linha de comando (veja-se *note Edição de Linha
     de Comando::) e o comando interno ‘bind’.

   • Bash provê um mecanismo de completação de palavra programável
     (veja-se *note Complementação Programável::), e comandos internos
     ‘complete’, ‘compgen’, e ‘compopt’, para manipulá-los.

   • Bash tem histórico de comando (veja-se *note Facilidades do
     Histórico de Bash::) e os comandos internos ‘history’ e ‘fc’ para
     manipulá-lo.  A lista de histórico do Bash mantém informação de
     marcas temporais e utiliza o valor da variável ‘HISTTIMEFORMAT’
     para exibi-las.

   • Bash implementa a expansão de histórico ao estilo ‘csh’ (veja-se
     *note History Interaction::).

   • Bash tem variáveis vetor unidimensional (veja-se *note Vetores::),
     e as apropriadas expansões de variável e sintaxe de atribuição para
     utilizá-las.  Vários dos comandos internos do Bash tem opções para
     atuar sobre os vetores.  Bash provê um número de variáveis vetor
     internas.

   • A sintaxe de encapsulamento em aspas ‘$'…'’, o qual expande os
     caracteres encapsulados por barra invertida do ANSI-C presentes no
     texto entre as aspas simples, é suportada (veja-se *note
     Encapsulamento ANSI-C::).

   • Bash suporta a sintaxe de encapsulamento em aspas ‘$"…"’ para fazer
     a tradução, ao estilo específico do local, dos caracteres entre as
     aspas duplas.  As opções de invocação ‘-D’, ‘--dump-strings’, e
     ‘--dump-po-strings’ listam as sequências de caracteres traduzíveis
     encontradas em um script (veja-se *note Tradução do Locale::).

   • Bash implementa a palavra chave ‘!’ para negar o valor de retorno
     de um canal de comunicação (veja-se *note Canais de Comunicação::).
     Muito útil quando uma declaração ‘if’ precisa atuar somente se um
     teste falha.  A opção de Bash ‘-o pipefail’ para ‘set’ fará com que
     um canal de comunicação retorne um estado de falha se qualquer
     comando falha.

   • Bash tem a palavra reservada ‘time’ e temporizador de comando
     (veja-se *note Canais de Comunicação::).  A exibição das
     estatísticas de temporização pode ser controlada com a variável
     ‘TIMEFORMAT’.

   • Bash implementa a aritmética ‘for (( EXPR1 ; EXPR2 ; EXPR3 ))’ para
     comando, similar a linguagem C (veja-se *note Construtores de
     Ciclos::).

   • Bash inclui o comando composto ‘select’, o qual permite a geração
     de menus simples (veja-se *note Construtores Condicionais::).

   • Bash inclui o comando composto ‘[[’, o qual torna o teste
     condicional parte da gramática do shell (veja-se *note Construtores
     Condicionais::), incluindo a coincidência de expressão regular
     opcional.

   • Bash provê a coincidência opcional sem distinção entre maiúsculas e
     minúsculas para os construtores ‘case’ e ‘[[’.

   • Bash inclui a expansão de chave (veja-se *note Expansão de Chave::)
     e expansão de til (veja-se *note Expansão de Til::).

   • Bash implementa apelidos de comando e os comandos internos ‘alias’
     e ‘unalias’ (veja-se *note Apelidos::).

   • Bash provê aritmética de shell, o comando composto ‘((’ (veja-se
     *note Construtores Condicionais::), e a expansão aritmética
     (veja-se *note Aritmética de Shell::).

   • As variáveis presentes no ambiente inicial do shell são
     automaticamente exportadas para os processos filhos.  O shell
     Bourne normalmente não faz isso, a menos que as variáveis sejam
     explicitamente marcadas utilizando-se o comando ‘export’.

   • Bash suporta o operador de atribuição ‘+=’, o qual acrescenta ao
     valor da variável nominada no lado esquerdo.

   • Bash inclui as expansões POSIX de remoção de padrão ‘%’, ‘#’, ‘%%’
     e ‘##’ para remover sequências de caracteres iniciais ou finais dos
     valores das variáveis (veja-se *note Expansão de Parâmetro de
     Shell::).

   • A expansão ‘${#xx}’, a qual retorna o comprimento de ‘${xx}’, é
     suportado (veja-se *note Expansão de Parâmetro de Shell::).

   • A expansão ‘${var:’OFFSET‘[:’LENGTH‘]}’, a qual expande para a
     subsequência de caracteres do valor de ‘var’ do comprimento LENGTH,
     iniciando em OFFSET, está presente (veja-se *note Expansão de
     Parâmetro de Shell::).

   • A expansão ‘${var/[/]’PATTERN‘[/’REPLACEMENT‘]}’, a qual coincide
     com PATTERN e a substitui com REPLACEMENT no valor de ‘var’, está
     disponível (veja-se *note Expansão de Parâmetro de Shell::).

   • A expansão ‘${!PREFIX*}’ expansão, a qual expande para os nomes de
     todas as variáveis de shell cujos os nomes se iniciam com PREFIX,
     está disponível (veja-se *note Expansão de Parâmetro de Shell::).

   • Bash tem expansão de variável INDIRETA utilizando ‘${!word}’
     (veja-se *note Expansão de Parâmetro de Shell::).

   • Bash pode expandir parâmetros posicionais além de ‘$9’ utilizando
     ‘${NUM}’.

   • A forma POSIX ‘$()’ de substituição de comando está implementada
     (veja-se *note Substituição de Comando::), e é preferida a ‘``’ do
     shell Bourne (a qual também está implementada para compatibilidade
     com versões anteriores).

   • Bash tem substituição de processo (veja-se *note Substituição de
     Processo::).

   • Bash atribui valores automaticamente às variáveis que proveem
     informação sobre o usuário atual (‘UID’, ‘EUID’, e ‘GROUPS’); a
     máquina atual (‘HOSTTYPE’, ‘OSTYPE’, ‘MACHTYPE’, e ‘HOSTNAME’); e a
     instância de Bash que está em execução (‘BASH’, ‘BASH_VERSION’, e
     ‘BASH_VERSINFO’).  Veja-se *note Variáveis do Bash::, para
     detalhes.

   • A variável ‘IFS’ é utilizada para dividir somente os resultados da
     expansão, e não todas as palavras (veja-se *note Divisão de
     Palavra::).  Isso fecha uma brecha de segurança do shell de longa
     data.

   • O código da expansão de chave da expansão de nome de arquivo
     utiliza ‘!’ e ‘^’ para negar o conjunto de caracteres entre as
     chaves.  O shell Bourne utiliza somente ‘!’.

   • Bash implementa o conjunto completo de operadores de expansão de
     nome de arquivo POSIX, incluindo CHARACTER CLASSES, EQUIVALENCE
     CLASSES, e COLLATING SYMBOLS (veja-se *note Expansão de Nome de
     Arquivo::).

   • Bash implementa características de coincidência de padrão
     estendidas quando a opções de shell ‘extglob’ está habilitada
     (veja-se *note Coincidência de Modelo::).

   • É possível ter uma variável e uma função com o mesmo nome; ‘sh’ não
     separa os dois espaços de nomes.

   • É permitido às funções do Bash ter variáveis locais utilizando o
     comando interno ‘local’, e assim funções recursivas úteis podem ser
     escritas (veja-se *note Comandos Internos ao Bash::).

   • As atribuições a variáveis precedendo a comandos afetam somente
     aquele comando, mesmo comandos internos e funções (veja-se *note
     Ambiente::).  No ‘sh’, todas as atribuições a variáveis precedendo
     a comandos são globais, a menos que o comando seja executado a
     partir do sistema de arquivo.

   • Bash realiza expansão de nome de arquivo sobre nomes de arquivo
     especificados como operandos para operadores de redireção de
     entrada e saída (veja-se *note Redireções::).

   • Bash contém o operador de redireção ‘<>’, permitindo que um arquivo
     seja aberto tanto para leitura quanto para escrita, e o operador de
     redireção ‘&>’, para direcionamento da saída padrão e do erro
     padrão para o mesmo arquivo (veja-se *note Redireções::).

   • Bash inclui o operador de redireção ‘<<<’, permitindo que uma
     sequência de caracteres seja utilizada como a entrada padrão para
     um comando.

   • Bash implementa os operadores de redireção ‘[n]<&WORD’ e
     ‘[n]>&WORD’, os quais movem um descritor de arquivo para outro.

   • Bash trata um número de nomes de arquivo especialmente quando eles
     estão sendo utilizados em operadores de redireção (veja-se *note
     Redireções::).

   • Bash pode abrir conexões de rede para máquinas arbitrárias e
     serviços com os operadores de redireção (veja-se *note
     Redireções::).

   • A opção ‘noclobber’ está disponível para evitar a sobrescrita de
     arquivos existentes com a redireção de saída (veja-se *note O
     Comando Interno Set::).  O operador de redireção ‘>|’ pode ser
     utilizado para substituir ‘noclobber’.

   • Os comandos internos ‘cd’ e ‘pwd’ (veja-se *note Comandos Internos
     do Shell Bourne::) cada tomam as opções ‘-L’ e ‘-P’ para permutar
     entre os modos lógico e físico.

   • Bash permite que uma função neutralize um comando interno com o
     mesmo nome, e provê acesso àquela funcionalidade do comando interno
     dentro da função via comandos internos ‘builtin’ e ‘command’
     (veja-se *note Comandos Internos ao Bash::).

   • O comando interno ‘command’ permite a desabilitação seletiva de
     funções quando uma pesquisa de comando é realizada (veja-se *note
     Comandos Internos ao Bash::).

   • Comandos internos individuais podem ser habilitados ou
     desabilitados utilizando o comando interno ‘enable’ (veja-se *note
     Comandos Internos ao Bash::).

   • O comando interno ‘exec’ toma opções adicionais que permitem que
     usuários controlem o conteúdo do ambiente passado para o comando
     executado, e o que o argumento zero para o comando é para ser
     (veja-se *note Comandos Internos do Shell Bourne::).

   • As funções de shell podem ser exportadas aos filhos via ambiente
     utilizando-se ‘export -f’ (veja-se *note Funções de Shell::).

   • Os comandos internos de Bash ‘export’, ‘readonly’, e ‘declare’
     podem receber uma opção ‘-f’ para atuar sobre funções de shell; uma
     opção ‘-p’ para exibir variáveis com vários atributos configurados
     em um formato que pode ser utilizado como entrada de shell; uma
     opção ‘-n’ para remover vários atributos de variáveis; e argumentos
     ‘name=value’ para configurar atributos e valores de variáveis
     simultaneamente.

   • O comando interno ‘hash’ permite que um nome seja associado com um
     nome arbitrário de arquivo, mesmo quando esse nome de arquivo não
     pode ser encontrado pesquisando-se o ‘$PATH’, utilizando-se ‘hash
     -p’ (veja-se *note Comandos Internos do Shell Bourne::).

   • Bash inclui um comando interno ‘help’ para referência rápida às
     facilidades de shell (veja-se *note Comandos Internos ao Bash::).

   • O comando interno ‘printf’ está disponível para exibir saída
     formatada (veja-se *note Comandos Internos ao Bash::).

   • O comando interno ‘read’ (veja-se *note Comandos Internos ao
     Bash::) lerá uma linha terminando em ‘\’ com a opção ‘-r’, e
     utilizará a variável ‘REPLY’ como um padrão se nenhum argumento não
     opção for fornecido.  O comando interno ‘read’ também aceita uma
     sequência de caracteres de prompt com a opção ‘-p’ e utilizará
     Readline para obter a linha quando lhe for dada a opção ‘-e’.  O
     comando interno ‘read’ também tem opções adicionais para controlar
     entrada: a opção ‘-s’ desligará o eco de caracteres de entrada
     conforme forem lidos; a opção ‘-t’ permitirá a ‘read’ um intervalo
     de tempo se a entrada não chegar dentro de um número especificado
     de segundos; a opção ‘-n’ permitirá a leitura somente de um número
     especificados de caracteres, em vez de uma linha inteira; e a opção
     ‘-d’ lerá até um carácter particular, em vez de um marcador de nova
     linha.

   • O comando interno ‘return’ pode ser utilizado para abortar a
     execução de scripts executados com os comandos internos ‘.’ ou
     ‘source’ (veja-se *note Comandos Internos do Shell Bourne::).

   • Bash inclui o comando interno ‘shopt’, para controle mais apurado
     das capacidades opcionais de shell (veja-se *note O Comando Interno
     Shopt::), e permite que essas opções sejam configuradas ou
     desconfiguradas na invocação de shell (veja-se *note Invocando o
     Bash::).

   • Bash tem muito mais comportamento opcional controlável com o
     comando interno ‘set’ (veja-se *note O Comando Interno Set::).

   • A opção ‘-x’ (‘xtrace’) exibe comandos outros que não os comandos
     simples quando realizando um rastreamento de execução (veja-se
     *note O Comando Interno Set::).

   • O comando interno ‘test’ (veja-se *note Comandos Internos do Shell
     Bourne::) é ligeiramente diferente, dado que ele implementa o
     algoritmo POSIX, o qual especifica o comportamento baseado em um
     número de argumentos.

   • Bash inclui o comando interno ‘caller’, o qual exibe o contexto de
     qualquer chamada de sub-rotina ativa (uma função de shell ou um
     script executado com os comandos internos ‘.’ ou ‘source’).  Isso
     suporta o depurador de bash.

   • O comando interno ‘trap’ (veja-se *note Comandos Internos do Shell
     Bourne::) permite uma especificação de pseudo-sinal ‘DEBUG’,
     similar a ‘EXIT’.  Os comandos especificados com um coletor ‘DEBUG’
     são executados antes de cada comando simples, comando ‘for’,
     comando ‘case’, comando ‘select’, cada comando ‘for’ aritmético, e
     antes do primeiro comando executar em uma função de shell.  O
     coletor ‘DEBUG’ não é herdado por funções de shell, a menos que a
     função tenha dado o atributo ‘trace’ ou a opção ‘functrace’ tenha
     sido habilitada utilizando o comando interno ‘shopt’.  A opção de
     shell ‘extdebug’ tem efeitos adicionais sobre o coletor ‘DEBUG’.

     O comando interno ‘trap’ (veja-se *note Comandos Internos do Shell
     Bourne::) permite uma especificação de pseudo-sinal ‘ERR’, similar
     a ‘EXIT’ e ‘DEBUG’.  Os comandos especificados com um coletor ‘ERR’
     são executados após um comando simples falhar, com umas poucas
     exceções.  O coletor ‘ERR’ não é herdado pelas funções de shell, a
     menos que a opção ‘-o errtrace’ para o comando interno ‘set’ esteja
     habilitada.

     O comando interno ‘trap’ (veja-se *note Comandos Internos do Shell
     Bourne::) permite uma especificação de pseudo-sinal ‘RETURN’,
     similar a ‘EXIT’ e ‘DEBUG’.  Os comandos especificados com um
     coletor ‘RETURN’ são executados antes que a execução retome após
     uma função de shell ou um script de shell com ‘.’ ou ‘source’
     retorne.  O coletor ‘RETURN’ não é herdado pelas funções de shell,
     a menos que a função tenha dado o atributo ‘trace’ ou a opção
     ‘functrace’ tenha sido habilitada utilizando o comando interno
     ‘shopt’.

   • O comando interno ‘type’ é mais extensivo e dá mais informação
     acerca dos nomes que ele encontra (veja-se *note Comandos Internos
     ao Bash::).

   • O comando interno ‘umask’ permite à opção ‘-p’ fazer com que a
     saída seja exibida na forma de um comando ‘umask’ que pode ser
     reutilizado como entrada (veja-se *note Comandos Internos do Shell
     Bourne::).

   • Bash implementa uma pilha de diretório ao estilo ‘csh’, e provê os
     comandos internos ‘pushd’, ‘popd’, e ‘dirs’ para manipulá-la
     (veja-se *note A Pilha de Diretório::).  Bash também torna a pilha
     de diretório visível como um valor da variável de shell ‘DIRSTACK’.

   • Bash interpreta caracteres especiais encapsulados por barra
     invertida nas sequências de caracteres de prompt, quando interativo
     (veja-se *note Controlando o Prompt::).

   • O modo restrito de Bash é mais útil (veja-se *note O Shell
     Restrito::); o modo restrito do shell SVR4.2 é limitado demais.

   • O comando interno ‘disown’ pode remover uma tarefa da tabela
     interna de tarefa de shell (veja-se *note Comandos Internos do
     Controle de Tarefa::) ou suprimir o envio de ‘SIGHUP’ para uma
     tarefa quando o shell sai como o resultado de um ‘SIGHUP’.

   • Bash inclui um número de características para suportar um depurador
     separado para scripts de shell.

   • O shell SVR4.2 tem dois comandos internos relacionados aos
     privilégios, (‘mldmode’ e ‘priv’), não presentes no Bash.

   • Bash não tem os comandos internos ‘stop’ ou ‘newgrp’.

   • Bash não utiliza a variável ‘SHACCT’ ou realiza contabilidade de
     shell.

   • O ‘sh’ SVR4.2 utiliza uma variável ‘TIMEOUT’ como Bash utiliza
     ‘TMOUT’.

Mais características únicas a Bash podem ser encontradas em *note
Características de Bash::.

B.1 Diferenças de Implementação Com O Shell SVR4.2
==================================================

Dado que Bash é uma implementação completamente nova, ele não sofre de
muitas das limitações do shell SVR4.2.  Por exemplo:

   • Bash não bifurca um sub-shell quando da redireção em ou fora de uma
     estrutura de controle de shell tal como uma declaração ‘if’ ou
     ‘while’.

   • Bash não permite cotas desbalanceadas.  O shell SVR4.2 inserirá
     silenciosamente uma aspa necessária de fechamento no ‘EOF’ sob
     certas circunstâncias.  Isso pode ser a causa de alguns erros
     difíceis de encontrar.

   • O shell SVR4.2 utiliza um esquema de gerenciamento de memória
     barroco baseado no coletamento de ‘SIGSEGV’.  Se o shell for
     inicializado a partir de um processo com ‘SIGSEGV’ (por exemplo,
     utilizando-se a chamada de função da biblioteca C ‘system()’),
     então o SVR4.2 se comporta realmente muito mal.

   • Em uma tentativa questionável na segurança, o shell SVR4.2, quando
     invocado sem a opção ‘-p’, alterará seu real e efetivo UID e GID,
     se eles são menores que algum valor limite mágico, normalmente 100.
     Isso pode levar a resultados inesperados.

   • O shell SVR4.2 não permite a usuários coletar ‘SIGSEGV’, ‘SIGALRM’,
     ou ‘SIGCHLD’.

   • O shell SVR4.2 não permite que as variáveis ‘IFS’, ‘MAILCHECK’,
     ‘PATH’, ‘PS1’, ou ‘PS2’ sejam desconfiguradas.

   • O shell SVR4.2 trata ‘^’ como o equivalente não documentado de ‘|’.

   • Bash permite argumentos de opções múltiplas quando é invocado (‘-x
     -v’); o shell SVR4.2 somente permite um argumento de opção (‘-xv’).
     De fato, algumas versões do shell apagam tudo se o segundo
     argumento inicia com um ‘-’.

   • O shell SVR4.2 sai de um script se qualquer comando interno falha;
     Bash sai de um script somente se um dos comandos internos especiais
     POSIX falha, e apenas para certas falhas, conforme enumerado no
     padrão POSIX.

   • O shell SVR4.2 se comporta diferentemente quando invocado como
     ‘jsh’ (ele liga o controle de tarefa).


File: bashref-pt_BR.info,  Node: Licença de Documentação Livre GNU,  Next: GNU Free Documentation License,  Prev: Maiores Diferenças Para o Shell Bourne,  Up: Top

Ap@^{e}ndice C Licença de Documentação Livre GNU
************************************************

                  Versão 1.3, 03 de novembro de 2008

     Direitos autorais © 2000, 2001, 2002, 2007, 2008 Free
     Software Foundation, Inc. <http://fsf.org/>

     A qualquer pessoa é permitido copiar e distribuir cópias literais deste
     documento de licença, porém modificá-lo não é permitido.

  0. PREÂMBULO

     O propósito desta licença é tornar um manual, livro de texto, ou
     outro documento funcional e útil “livre” no sentido da liberdade:
     para assegurar a qualquer pessoa a liberdade efetiva para copiar e
     redistribuí-lo, com ou sem modificações, ambos comercialmente ou
     não comercialmente.  Secundariamente, esta Licença preserva para o
     autor e editor uma maneira de obter crédito pelos seus trabalhos,
     ao mesmo tempo não sendo considerado responsável por modificações
     feitas por outros.

     Esta Licença é uma espécie de “copyleft” (“esquerdos autorais”), o
     que significa que trabalhos derivados do documento devem
     necessariamente eles mesmos serem livres no mesmo sentido.  Ela
     complementa a Licença Pública Geral GNU, a qual é uma licença de
     esquerdos autorais projetada para software livre.

     Nós projetamos esta Licença para utilizá-la para manuais para
     software livre, porque software livre precisa de documentação
     livre: um programa livre deveria vir com manuais provendo as mesmas
     liberdades que o software provê.  Porém esta Licença não é limitada
     a manuais de software; ela pode ser utilizada para qualquer
     trabalho textual, independentemente de questões de assunto ou se o
     trabalho textual for publicado como um livro impresso.  Nós
     recomendamos esta Licença principalmente para trabalhos cujo
     propósito seja instrução ou referência.

  1. APLICABILIDADE E DEFINIÇÕES

     Esta Licença se aplica a qualquer manual ou outro trabalho, em
     qualquer meio, que contenha um aviso colocado pelo detentor dos
     direitos autorais dizendo que ele pode ser distribuído sob os
     termos desta Licença.  Tal aviso concede uma licença mundial, livre
     de patente, ilimitada na duração, para utilizar aquele trabalho sob
     as condições nela declaradas.  O “Documento”, abaixo, se refere a
     quaisquer desses manuais ou trabalhos.  Qualquer membro do publico
     é um titular da licença, e é mencionado como “você”.  Você aceita a
     licença se você copiar, modificar ou distribuir o trabalho em uma
     forma que exija permissão sob lei de direitos autorais.

     Uma “Versão Modificada” do Documento significa qualquer trabalho
     contendo o Documento ou uma porção dele, seja literalmente copiado,
     ou com modificações e/ou traduzido em outra língua.

     Uma “Seção Secundária” é um apêndice nomeado ou uma seção
     pré-textual do Documento que lida exclusivamente com o
     relacionamento dos editores ou autores do Documento para com o
     assunto global do Documento (ou com questões relacionadas) e não
     contém nada que possa se conformar diretamente com aquele assunto
     global.  (Assim, se o Documento for em parte um livro texto de
     matemática, uma Seção Secundária não pode explanar nada acerca de
     cálculos matemáticos).  O relacionamento poderia ser uma questão de
     conexão histórica com o assunto ou com questões relacionadas, ou de
     posicionamento legal, comercial, filosófico, ético ou político
     respeitante a eles.

     As “Seções Invariantes” são certas Seções Secundárias cujos títulos
     são projetados, como sendo aqueles de Seções Invariantes, no aviso
     que diz que o Documento é publicado sob esta Licença.  Se uma seção
     não se encaixa na definição de Secundária acima, então a seção não
     está autorizada a ser designada como Invariante.  O Documento pode
     conter zero Seções Invariantes.  Se o Documento não identifica
     quaisquer Seções Invariantes, então não existe nenhuma.

     Os “Textos de Capa” são certas passagens curtas de texto que são
     listadas, como Textos de Primeira Capa ou Textos de Quarta-Capa, no
     aviso que diz que o Documento é publicado sob esta Licença.  Um
     Texto de Primeira Capa pode ter no máximo cinco (05) palavras, e um
     Texto de Quarta Capa pode ter no máximo vinte e cinco (25)
     palavras.

     Uma cópia “Transparente” do Documento significa uma cópia legível
     por máquina, representada em um formato cuja especificação está
     disponível para o público em geral, que é adequada para revisar o
     documento diretamente com editores de texto genéricos ou (para
     imagens compostas de pixeis) programas de pintura genéricos ou
     (para desenhos) algum editor de desenho disponível amplamente, e
     que seja adequado para entrada a formatadores de texto ou para
     tradução automática a uma variedade de formatos próprios para
     entrada a formatadores de texto.  Uma cópia feita em um formato de
     arquivo contrário ao Transparente, cuja linguagem de marcação, ou
     ausência de linguagem de marcação, tenha sido organizada para
     frustrar ou desencorajar modificações subsequentes por leitores,
     não é Transparente.  Um formato de imagem não é Transparente se
     utilizado para qualquer quantidade substancial de texto.  Uma cópia
     que não é “Transparente” é chamada “Opaca”.

     Exemplos de formatos adequados para cópias Transparentes incluem
     ASCII puro sem marcações; formato de entrada Texinfo; formato de
     entrada LaTeX; SGML ou XML utilizando um DTD disponível
     publicamente; HTML simples conformante com o padrão; PostScript ou
     PDF projetado para modificação humana.  Exemplos de formatos
     transparantes de imagens incluem PNG, XCF e JPG.  Formatos opacos
     incluem formatos proprietários que podem ser lidos e editados
     somente por processadores proprietários de palavra; SGML ou XML
     para os quais o DTD e/ou as ferramentas de processamentos não
     estejam disponíveis genericamente; e o HTML gerado por máquina;
     PostScript ou PDF produzidos por alguns processadores de palavra
     apenas para propósitos de saída.

     A “Página de Título” significa, para um livro impresso, a própria
     página de título, mais tantas páginas seguintes quantas sejam
     necessárias para manter, legivelmente, o material que esta Licença
     exige para aparecer na página de título.  Para trabalhos em
     formatos que não tenham qualquer página de título como tal, “Página
     de Título” significa o texto próximo da mais proeminente aparição
     do título do trabalho, precedendo o início do corpo do texto.

     O “editor” significa qualquer pessoa ou entidade que distribui
     cópias do Documento ao público.

     Uma seção “Intitulada XYZ” significa uma subunidade nomeada do
     Documento cujo título ou é precisamente XYZ ou contém XYZ entre
     parênteses seguinte ao texto que traduz XYZ em outra linguagem.
     (Aqui XYZ significa um nome específico de seção mencionado abaixo,
     tais como “Agradecimentos”; “Dedicatórias”; “Patrocínios”; ou
     “Histórico”).  “Preservar o Título” de tal seção quando você
     modificar o Documento significa que ele permanece uma seção
     “Intitulada XYZ” de acordo com essa definição.

     O Documento pode incluir Declarações de Garantia próximas ao aviso
     que declara que esta Licença se aplica ao Documento.  Essas
     Declarações de Garantia são consideradas como inclusas por
     referência nesta Licença, porém somente com relação à negação de
     garantias: qualquer outra implicação que essas Declarações de
     Garantia possam ter é inválida e não tem efeito sobre o significado
     desta Licença.

  2. CÓPIA LITERAL

     Você pode copiar e distribuir o Documento em qualquer meio, ambos
     comercialmente e não comercialmente, contanto que esta Licença, os
     avisos de direitos autorais, e o aviso de licença dizendo que esta
     Licença se aplica ao Documento estejam reproduzidas em todas as
     cópias, e que você não adiciona quaisquer outras condições,
     quaisquer que sejam, àquelas desta Licença.  Você não pode utilizar
     medidas técnicas para obstruir ou controlar a leitura ou
     posteriores cópias das cópias que você fizer ou distribuir.
     Entretanto, você pode aceitar remuneração em troca das cópias.  Se
     você distribui um número de cópias grande o suficiente, você deve
     necessariamente também seguir as condições na seção três (3).

     Você também pode ceder cópias, sob as mesmas condições declaradas
     acima, e você pode publicamente exibir cópias.

  3. CÓPIAS EM QUANTIDADE

     Se você publicar cópias impressas (ou cópias em mídia que
     geralmente tem capas impressas) do Documento, em número maior que
     cem (100), e o aviso de licença do Documento exigir Textos de Capa,
     você deve necessariamente encartar as cópias em capas que
     transportem, claramente e legivelmente, todos estes Textos de Capa:
     Textos de Primeira Capa na primeira capa, e Textos de Quarta Capa
     na capa traseira.  Ambas as capas devem necessariamente também
     claramente e legivelmente identificar você como o editor dessas
     cópias.  A capa frontal deve necessariamente apresentar o título
     completo com todas as palavras do título igualmente proeminentes e
     visíveis.  Você pode adicionar outros materiais nas capas
     adicionalmente.  As cópias com modificações limitadas às capas,
     tanto quanto preservem o título do Documento e satisfaçam essas
     condições, podem ser tratadas como cópias literais em relação a
     outros aspectos.

     Se os textos exigidos para ambas as capas forem muito volumosos
     para caber legivelmente, você deveria colocar os primeiros listados
     (tantos quantos caibam razoavelmente) na capa atual, e continuar o
     restante em páginas adjacentes.

     Se você publicar ou distribuir cópias Opacas do Documento em número
     maior que cem (100), você deve necessariamente ou incluir uma cópia
     Transparente, legível por máquina, junto com cada cópia Opaca, ou
     declarar, na ou com cada cópia Opaca, uma localização de rede de
     computador, a partir da qual o público usuário de rede geral tenha
     acesso para baixar, utilizando protocolos de rede de padrão
     público, uma cópia Transparente completa do Documento, livre do
     material adicionado.

     Se você se utilizar da última opção, você deve necessariamente
     adotar razoavelmente passos prudentes, quando você iniciar a
     distribuição de cópias Opacas em quantidade, para se assegurar que
     essa cópia Transparente permanecerá então acessível na localização
     declarada até pelo menos um ano após a última vez que você
     distribuiu uma cópia Opaca (diretamente ou por intermédio dos seus
     agentes ou varejistas) daquela edição ao público.

     É pedido, mas não exigido, que você contate os autores do Documento
     bem antes de redistribuir qualquer número grande de cópias, para
     dá-los a oportunidade de lhe fornecer uma versão atualizada do
     Documento.

  4. MODIFICAÇÕES

     Você pode copiar e distribuir uma Versão Modificada do Documento
     sob as condições das seções dois (2) e três (3) acima, contanto que
     você publique a Versão Modificada precisamente sob esta Licença,
     com a Versão Modificada preenchendo a função do Documento, portanto
     licenciando a distribuição e modificação da Versão Modificada a
     quem quer que possua uma cópia dela.  Adicionalmente, você deve
     necessariamente fazer estas coisas na Versão Modificada:

       A. Utilize na Página de Título (e nas capas, se existentes) um
          título distinto daquele do Documento, e daqueles das versões
          prévias (as quais deveriam, se existiu alguma, serem listadas
          na seção Histórico do Documento).  Você pode utilizar o mesmo
          título que uma versão prévia, se o editor original daquela
          versão conceder permissão.

       B. Liste na Página de Título, como autores, uma ou mais pessoas
          ou entidades responsáveis pela autoria das modificações na
          Versão Modificada, junto com ao menos cinco dos autores
          principais do Documento (todos os autores principais, se tiver
          menos que cinco), a menos que eles liberem você dessa
          exigência.

       C. Declare na Página de Título o nome do editor da Versão
          Modificada, como o editor.

       D. Preserve todos os avisos de direitos autorais do Documento.

       E. Adicione um aviso apropriado de direitos autorais para suas
          modificações, adjacente aos outros avisos de direitos
          autorais.

       F. Inclua, imediatamente após os avisos de direitos autorais, um
          aviso de licença concedendo ao público permissão para utilizar
          a Versão Modificada sob os termos desta Licença, na forma
          mostrada no Adendo abaixo.

       G. Preserve, naquele aviso de licença, as listas completas de
          Seções Invariantes e Textos de Capa exigidos dados no aviso de
          licença do Documento.

       H. Inclua uma cópia inalterada desta Licença.

       I. Preserve a seção intitulada “Histórico”, Preserve seu Título,
          e adicione a ele um item declarando ao menos o título, ano,
          novos autores, e editor da Versão Modificada, conforme dado na
          Página de Título.  Se não existir uma seção intitulada
          “Histórico” no Documento, crie uma declarando o título, ano,
          autores, e editor do Documento, conforme dado em sua Página de
          Título, então adicione um item descrevendo a Versão
          Modificada, conforme declarado na frase prévia.

       J. Preserve a localização de rede, se existente, dada no
          Documento para acesso público a uma cópia Transparente do
          Documento, e da mesma forma as localizações de rede dadas no
          Documento para versões prévias nas quais foi baseado.  Essas
          podem ser colocadas na seção “Histórico”.  Você pode omitir
          uma localização de rede para um trabalho que foi publicado nos
          últimos quatro anos anteriores à publicação do próprio do
          Documento, ou se o editor original da versão à qual a
          localização de rede se refere conceder permissão.

       K. Para cada seção Intitulada “Agradecimentos” ou “Dedicatórias”,
          Preserve o Título da seção, e preserve na seção toda a
          substância e tonalidade de cada um dos agradecimentos a
          contribuidores e/ou dedicatórias dadas nela.

       L. Preserve todas as Seções Invariantes do Documento, inalteradas
          em seus textos e em seus títulos.  Os números de Seção ou o
          equivalente não são considerados parte dos títulos de seção.

       M. Delete quaisquer seções Intituladas “Patrocínios”.  Tal seção
          não pode ser incluída na Versão Modificada.

       N. Não reintitule qualquer seção existente para Intitulada
          “Patrocínios” ou para conflitar no título com qualquer Seção
          Invariante.

       O. Preserve quaisquer Declarações de Garantia.

     Se a Versão Modificada incluir novas seções pré textuais ou
     apêndices que se qualifiquem como Seções Secundárias e não
     contenham material copiado a partir do Documento, você pode, a sua
     escolha, designar algumas ou todas essas seções como Invariantes.
     Para fazer isso, adicione seus títulos à lista das Seções
     Invariantes no aviso de licença da Versão Modificada.  Esses
     títulos devem necessariamente serem distintos de quaisquer outros
     títulos de seções.

     Você pode adicionar uma seção Intitulada “Patrocínios”, contanto
     que ela não contenha nada além de patrocínios da sua Versão
     Modificada por vários patrocinadores—por exemplo, declarações de
     avaliadores ou aquelas de que o texto foi aprovado por uma
     organização como a definição autorizativa de um padrão.

     Você pode adicionar uma passagem de até cinco palavras, como um
     Texto de Primeira Capa, e uma passagem de até vinte e cinco
     palavras, como um Texto de Quarta Capa, ao final da lista dos
     Textos de Capa na Versão Modificada.  Somente uma passagem de Texto
     de Primeira Capa e uma de Texto de Quarta Capa podem ser
     adicionadas por (ou mediante acordos feitos por) qualquer uma
     entidade.  Se o Documento já inclui um texto de capa para a mesma
     capa, previamente adicionado por você ou por acordo feito pela
     mesma entidade pela qual você está atuando, você não pode adicionar
     outro; porém você pode substituir o antigo, na permissão explícita
     do editor prévio que adicionou o antigo.

     O(s) autor(s) e editor(s) do Documento, por esta Licença, não
     concedem permissão para utilizar seus nomes para publicidade para
     ou para afirmar ou implicar patrocínio de qualquer Versão
     Modificada.

  5. COMBINANDO DOCUMENTOS

     Você pode combinar o Documento com outros documentos publicados sob
     esta Licença, sob os termos definidos na seção quatro (4) acima
     para versões modificadas, contanto que você inclua na combinação
     todas as Seções Invariantes de todos os documentos originais, não
     modificados, e listá-los todos como Seções Invariantes do seu
     trabalho combinado no seu aviso de licença, e você preserva todas
     as Declarações de Garantias deles.

     O trabalho combinado precisa conter somente uma cópia desta
     Licença, e múltiplas Seções Invariantes idênticas podem ser
     substituídas por uma cópia única.  Se existirem múltiplas Seções
     Invariantes com o mesmo nome, mas conteúdos diferentes, torne o
     título de cada uma de tal seção único adicionando ao final dele,
     entre parênteses, o nome do autor ou editor original daquela seção
     se conhecido, ou, do contrário, um número único.  Faça o mesmo
     ajuste aos títulos da seção na lista de Seções Invariantes no aviso
     de licença do trabalho combinado.

     Na combinação, você deve necessariamente combinar quaisquer seções
     Intituladas “Histórico” nos vários documentos originais, formando
     uma seção Intitulada “Histórico”; de mesma maneira, combine
     quaisquer seções Intituladas “Agradecimentos”, e quaisquer seções
     Intituladas “Dedicatórias”.  Você deve necessariamente deletar
     todas as seções Intituladas “Patrocínios”.

  6. COLEÇÕES DE DOCUMENTOS

     Você pode produzir uma coleção consistente do Documento e outros
     documentos publicados sob esta Licença, e substitua as cópias
     individuais desta Licença nos vários documentos por uma cópia única
     que esteja incluída na coleção, contanto que você siga as regras
     desta Licença para cópias literais de cada um dos documentos em
     todos os outros aspectos.

     Você pode extrair um documento único de tal coleção, e distribuí-lo
     individualmente sob esta Licença, contanto que você insira uma
     cópia desta Licença no documento extraído, e siga esta Licença em
     todos os outros aspectos relativos à cópias literais daquele
     documento.

  7. AGREGAÇÃO COM TRABALHOS INDEPENDENTES

     Uma compilação do Documento ou seus derivados com outros documentos
     separados e independentes ou trabalhos, dentro ou junto a volume de
     armazenamento ou meio de distribuição, é chamado em “agregado” se
     os direitos autorais resultantes da compilação não forem utilizados
     para limitar os direitos legais dos usuários da compilação além do
     que os trabalhos individuais permitem.  Quando o Documento for
     incluído em um agregado, esta Licença não se aplica aos outros
     trabalhos no agregado, os quais não são eles próprios trabalhos
     derivados do Documento.

     Se a exigência do Texto de Capa da seção três (3) for aplicável a
     essas cópias do Documento, então se o Documento for menor que a
     metade do agregado inteiro, os Textos de Capa do Documento podem
     ser colocados em capas que encartem o Documento dentro do agregado,
     ou o equivalente eletrônico de capas se o Documento estiver em
     formato eletrônico.  Do contrário, eles devem necessariamente
     aparecer nas capas impressas que encartem o agregado inteiro.

  8. TRADUÇÃO

     Tradução é considerada um tipo de modificação, de forma que você
     pode distribuir traduções do Documento sob os termos da seção
     quatro (4).  A substituição de Seções Invariantes por traduções
     exige permissão especial de seus detentores dos direitos autorais,
     porém você pode incluir traduções de algumas ou todas as Seções
     Invariantes adicionalmente às versões originais dessas Seções
     Invariantes.  Você pode incluir uma tradução desta Licença, e todos
     os avisos de licença no Documento, e quaisquer Declarações de
     Garantia, contanto que você inclua também a versão original em
     Inglês desta Licença e as versões originais daqueles avisos e
     declarações.  No caso de uma divergência entre a tradução e a
     versão original desta Licença ou um aviso ou declaração, a versão
     original prevalecerá.

     Se uma seção no Documento for Intitulada “Agradecimentos”,
     “Dedicatórias”, ou “Histórico”, a exigência (seção 4) de Preservar
     seu Título (seção 1) tipicamente exigirá a modificação do título
     atual.

  9. FINALIZAÇÃO

     Você não pode copiar, modificar, sublicenciar, ou distribuir o
     Documento, exceto conforme expressamente provido sob esta Licença.
     Qualquer tentativa clandestina de copiar, modificar, sublicenciar,
     ou distribuir o Documento é inválida, e automaticamente finalizará
     seus direitos sob esta Licença.

     Entretanto, se você cessar todas as violações a esta Licença, então
     a sua licença oriunda de um detentor de direitos autorais em
     particular está restabelecida (a) provisoriamente, a menos e até
     que o detentor dos direitos autorais explicita e finalmente cancele
     sua licença; e (b) permanentemente, se o detentor dos direitos
     autorais falhar em notificar você da violação, por algum meio
     razoável, antes de sessenta (60) dias após a cessação.

     Além disso, a sua licença oriunda de um detentor de direitos
     autorais em particular está restabelecida permanentemente se o
     detentor dos direitos autorais notificar você sobre a violação por
     algum meio razoável, essa for a primeira vez que você recebeu um
     aviso de violação desta Licença (para qualquer trabalho) oriunda
     daquele detentor de direitos autorais, e você sanar a violação
     antes de decorridos trinta (30) dias após o seu recebimento do
     aviso.

     A finalização dos seus direitos sob esta seção não finaliza as
     licenças de varejistas que tenham recebido cópias ou direitos de
     você sob esta Licença.  Se os seus direitos tiverem sido
     finalizados e não permanentemente restabelecidos, o recebimento de
     uma cópia de algum ou de tudo do mesmo material não concede a você
     direitos de utilizá-lo.

  10. REVISÕES FUTURAS DESTA LICENÇA

     A Free Software Foundation pode publicar novas, revisadas versões
     da Licença de Documentação Livre GNU de tempos em tempos.  Tais
     novas versões serão similares na essência à presente versão, porém
     podem diferir em detalhes para abarcar novos problemas ou assuntos.
     Veja-se <http://www.gnu.org/copyleft/>.

     Para cada versão da Licença é dado um número distintivo de versão.
     Se o Documento especifica que uma versão numerada em particular
     desta Licença “ou qualquer versão posterior” se aplica a ele, você
     tem a opção de seguir os termos e condições ou da versão
     especificada ou de qualquer versão posterior que tenha sido
     publicada (não como um rascunho) pela Free Software Foundation.  Se
     o Documento não especifica um número de versão desta Licença, você
     pode escolher qualquer versão já publicada (não como um rascunho)
     pela Free Software Foundation.  Se o Documento especifica que um
     procurador pode decidir quais versões futuras desta Licença podem
     ser utilizadas, essa declaração pública do procurador de aceitação
     de uma versão permanentemente autoriza você a escolher aquela
     versão para o Documento.

  11. RELICENCIAMENTO

     “Sítio de Colaboração Massiva Multi autor” (ou “Sítio MMC”)
     significa qualquer servidor da Rede Mundial de Computadores que
     publica trabalhos sujeitos a direitos autorais e também provê
     facilidades proeminentes para qualquer pessoa editar esses
     trabalhos.  Um wiki público que qualquer pessoa pode editar é um
     exemplo de tal servidor.  Uma “Colaboração Massiva Multi autor” (ou
     “MMC”) contida no sítio significa qualquer conjunto de trabalhos
     sujeitos a direitos autorais assim publicados no sítio MMC.

     “CC-BY-SA” significa a licença Creative Commons Attribution-Share
     Alike 3.0 publicada pela Creative Commons Corporation, uma
     corporação sem fins lucrativos com seu domicílio empresarial
     situado em São Francisco, Califórnia, Estados Unidos da América do
     Norte, bem como versões futuras de esquerdos autorais dessa licença
     publicadas pela mesma organização.

     “Incorporar” significa publicar ou republicar um Documento, no todo
     ou em parte, como parte de outro Documento.

     Um MMC é “elegível para relicenciamento” se ele for licenciado sob
     esta Licença, e se todos os trabalhos que foram primeiro publicados
     sob esta Licença em algum lugar que não esse MMC, e
     subsequentemente incorporados, no todo ou em parte, no MMC, (1) não
     tinham textos de capa ou seções invariantes; e (2) estavam assim
     incorporados antes de 01 de novembro de 2008.

     O operador de um Sítio MMC pode republicar um MMC contido no sítio
     sob CC-BY-SA, no mesmo sítio, a qualquer tempo antes de 01 de
     agosto de 2009, contanto que o MMC seja elegível para
     relicenciamento.

ADENDO: Como utilizar esta Licença para seus documentos
=======================================================

Para utilizar esta Licença em um documento que você escreveu, inclua um
cópia da Licença no documento e coloque os seguintes avisos de direitos
autorais e licença pouco depois da página de título:

       Direitos autorais (C) ANO  SEU NOME.
       Permissão é concedida para copiar, distribuir e/ou modificar este
       documento sob os termos da Licença de Documentação Livre GNU, Versão
       1.3 ou qualquer versão posterior publicada pela Free Software
       Foundation; sem Seções Invariantes, sem Textos de Primeira Capa, e sem
       Textos de Quarta Capa.   Uma cópia da licença está inclusa na seção
       intitulada ``Licença de Documentação Livre GNU''.

   Se você tiver Seções Invariantes, Textos de Primeira Capa e Textos de
Quarta Capa, substitua a linha “sem…Capa” por isto:

         com as Seções Invariantes sendo LISTE SEUS TÍTULOS, com os
         Textos de Primeira Capa sendo LISTA, e com os Textos de Quarta
         Capa sendo LISTA.

   Se você tiver Seções Invariantes sem Textos de Capa, ou alguma outra
combinação dos três, mescle essas duas alternativas para adequar a
situação.

   Se o seu documento contém exemplos não triviais de código de
programação, nós recomendamos publicar esses exemplos em paralelo, sob
sua escolha de licença de software livre, tal como a Licença Pública
Geral GNU, para permitir seu uso em software livre.


File: bashref-pt_BR.info,  Node: GNU Free Documentation License,  Next: Índices,  Prev: Licença de Documentação Livre GNU,  Up: Top

Ap@^{e}ndice D GNU Free Documentation License
*********************************************

                     Version 1.3, 3 November 2008

     Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document “free” in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of “copyleft”, which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     “Document”, below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as “you”.  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A “Modified Version” of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A “Secondary Section” is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document’s overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The “Invariant Sections” are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The “Cover Texts” are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A “Transparent” copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     “Transparent” is called “Opaque”.

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The “Title Page” means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, “Title
     Page” means the text near the most prominent appearance of the
     work’s title, preceding the beginning of the body of the text.

     The “publisher” means any person or entity that distributes copies
     of the Document to the public.

     A section “Entitled XYZ” means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.)
     To “Preserve the Title” of such a section when you modify the
     Document means that it remains a section “Entitled XYZ” according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document’s license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document’s
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled “History”, Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled “History” in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          “History” section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled “Acknowledgements” or “Dedications”,
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled “Endorsements”.  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          “Endorsements” or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version’s
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled “Endorsements”, provided it contains
     nothing but endorsements of your Modified Version by various
     parties—for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of
     a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     “History” in the various original documents, forming one section
     Entitled “History”; likewise combine any sections Entitled
     “Acknowledgements”, and any sections Entitled “Dedications”.  You
     must delete all sections Entitled “Endorsements.”

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an “aggregate” if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation’s users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document’s Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled “Acknowledgements”,
     “Dedications”, or “History”, the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <http://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License “or any later version” applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy’s public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     “Massive Multiauthor Collaboration Site” (or “MMC Site”) means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A “Massive Multiauthor Collaboration” (or “MMC”) contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     “CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     “Incorporate” means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is “eligible for relicensing” if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the “with…Texts.” line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: bashref-pt_BR.info,  Node: Índices,  Prev: GNU Free Documentation License,  Up: Top

Ap@^{e}ndice E Índices
**********************

* Menu:

* Índice dos Comandos Internos::		Índice dos comandos internos de Bash.
* Índice das Palavras Reservadas::		Índice das palavras reservadas de Bash.
* Índice das Variáveis::		Referência rápida ajuda você a encontrar
a variável que deseja.
* Índice das Funções::		Índice das funções de Readline
vinculáveis.
* Índice dos Conceitos::		Índice geral para conceitos descritos
neste manual.


File: bashref-pt_BR.info,  Node: Índice dos Comandos Internos,  Next: Índice das Palavras Reservadas,  Up: Índices

E.1 Índice dos Comandos Internos ao Shell
=========================================

 [index ]
* Menu:

* .:                                     Comandos Internos do Shell Bourne.
                                                              (line  17)
* ::                                     Comandos Internos do Shell Bourne.
                                                              (line  11)
* [:                                     Comandos Internos do Shell Bourne.
                                                              (line 282)
* alias:                                 Comandos Internos ao Bash.
                                                              (line  11)
* bg:                                    Comandos Internos do Controle de Tarefa.
                                                              (line   7)
* bind:                                  Comandos Internos ao Bash.
                                                              (line  21)
* break:                                 Comandos Internos do Shell Bourne.
                                                              (line  33)
* builtin:                               Comandos Internos ao Bash.
                                                              (line 111)
* caller:                                Comandos Internos ao Bash.
                                                              (line 121)
* cd:                                    Comandos Internos do Shell Bourne.
                                                              (line  41)
* command:                               Comandos Internos ao Bash.
                                                              (line 140)
* compgen:                               Comandos Internos à Complementação Programável.
                                                              (line  12)
* complete:                              Comandos Internos à Complementação Programável.
                                                              (line  32)
* compopt:                               Comandos Internos à Complementação Programável.
                                                              (line 248)
* continue:                              Comandos Internos do Shell Bourne.
                                                              (line  84)
* declare:                               Comandos Internos ao Bash.
                                                              (line 161)
* dirs:                                  Comandos Internos da Pilha de Diretório.
                                                              (line   7)
* disown:                                Comandos Internos do Controle de Tarefa.
                                                              (line  97)
* echo:                                  Comandos Internos ao Bash.
                                                              (line 267)
* enable:                                Comandos Internos ao Bash.
                                                              (line 317)
* eval:                                  Comandos Internos do Shell Bourne.
                                                              (line  93)
* exec:                                  Comandos Internos do Shell Bourne.
                                                              (line 101)
* exit:                                  Comandos Internos do Shell Bourne.
                                                              (line 119)
* export:                                Comandos Internos do Shell Bourne.
                                                              (line 127)
* fc:                                    Comandos Internos ao Histórico de Bash.
                                                              (line  10)
* fg:                                    Comandos Internos do Controle de Tarefa.
                                                              (line  19)
* getopts:                               Comandos Internos do Shell Bourne.
                                                              (line 146)
* hash:                                  Comandos Internos do Shell Bourne.
                                                              (line 197)
* help:                                  Comandos Internos ao Bash.
                                                              (line 351)
* history:                               Comandos Internos ao Histórico de Bash.
                                                              (line  44)
* jobs:                                  Comandos Internos do Controle de Tarefa.
                                                              (line  31)
* kill:                                  Comandos Internos do Controle de Tarefa.
                                                              (line  65)
* let:                                   Comandos Internos ao Bash.
                                                              (line 372)
* local:                                 Comandos Internos ao Bash.
                                                              (line 381)
* logout:                                Comandos Internos ao Bash.
                                                              (line 393)
* mapfile:                               Comandos Internos ao Bash.
                                                              (line 399)
* popd:                                  Comandos Internos da Pilha de Diretório.
                                                              (line  36)
* printf:                                Comandos Internos ao Bash.
                                                              (line 441)
* pushd:                                 Comandos Internos da Pilha de Diretório.
                                                              (line  56)
* pwd:                                   Comandos Internos do Shell Bourne.
                                                              (line 220)
* read:                                  Comandos Internos ao Bash.
                                                              (line 491)
* readarray:                             Comandos Internos ao Bash.
                                                              (line 589)
* readonly:                              Comandos Internos do Shell Bourne.
                                                              (line 229)
* return:                                Comandos Internos do Shell Bourne.
                                                              (line 250)
* set:                                   O Comando Interno Set.
                                                              (line  12)
* shift:                                 Comandos Internos do Shell Bourne.
                                                              (line 268)
* shopt:                                 O Comando Interno Shopt.
                                                              (line  10)
* source:                                Comandos Internos ao Bash.
                                                              (line 599)
* suspend:                               Comandos Internos do Controle de Tarefa.
                                                              (line 109)
* test:                                  Comandos Internos do Shell Bourne.
                                                              (line 282)
* times:                                 Comandos Internos do Shell Bourne.
                                                              (line 362)
* trap:                                  Comandos Internos do Shell Bourne.
                                                              (line 368)
* type:                                  Comandos Internos ao Bash.
                                                              (line 605)
* typeset:                               Comandos Internos ao Bash.
                                                              (line 639)
* ulimit:                                Comandos Internos ao Bash.
                                                              (line 645)
* umask:                                 Comandos Internos do Shell Bourne.
                                                              (line 420)
* unalias:                               Comandos Internos ao Bash.
                                                              (line 740)
* unset:                                 Comandos Internos do Shell Bourne.
                                                              (line 439)
* wait:                                  Comandos Internos do Controle de Tarefa.
                                                              (line  83)


File: bashref-pt_BR.info,  Node: Índice das Palavras Reservadas,  Next: Índice das Variáveis,  Prev: Índice dos Comandos Internos,  Up: Índices

E.2 Índice das Palavras Reservadas do Shell
===========================================

 [index ]
* Menu:

* !:                                     Canais de Comunicação.
                                                              (line   9)
* [[:                                    Construtores Condicionais.
                                                              (line 129)
* ]]:                                    Construtores Condicionais.
                                                              (line 129)
* {:                                     Agrupamento de Comandos.
                                                              (line  23)
* }:                                     Agrupamento de Comandos.
                                                              (line  23)
* case:                                  Construtores Condicionais.
                                                              (line  29)
* do:                                    Construtores de Ciclos.
                                                              (line  12)
* done:                                  Construtores de Ciclos.
                                                              (line  12)
* elif:                                  Construtores Condicionais.
                                                              (line   7)
* else:                                  Construtores Condicionais.
                                                              (line   7)
* esac:                                  Construtores Condicionais.
                                                              (line  29)
* fi:                                    Construtores Condicionais.
                                                              (line   7)
* for:                                   Construtores de Ciclos.
                                                              (line  32)
* function:                              Funções de Shell.    (line  16)
* if:                                    Construtores Condicionais.
                                                              (line   7)
* in:                                    Construtores Condicionais.
                                                              (line  29)
* select:                                Construtores Condicionais.
                                                              (line  84)
* then:                                  Construtores Condicionais.
                                                              (line   7)
* time:                                  Canais de Comunicação.
                                                              (line   9)
* until:                                 Construtores de Ciclos.
                                                              (line  12)
* while:                                 Construtores de Ciclos.
                                                              (line  22)


File: bashref-pt_BR.info,  Node: Índice das Variáveis,  Next: Índice das Funções,  Prev: Índice das Palavras Reservadas,  Up: Índices

E.3 Índice dos Parâmetros e Variáveis
=====================================

 [index ]
* Menu:

* !:                                     Parâmetros Especiais.
                                                              (line  51)
* #:                                     Parâmetros Especiais.
                                                              (line  34)
* $:                                     Parâmetros Especiais.
                                                              (line  46)
* $!:                                    Parâmetros Especiais.
                                                              (line  52)
* $#:                                    Parâmetros Especiais.
                                                              (line  35)
* $$:                                    Parâmetros Especiais.
                                                              (line  47)
* $*:                                    Parâmetros Especiais.
                                                              (line  10)
* $-:                                    Parâmetros Especiais.
                                                              (line  42)
* $0:                                    Parâmetros Especiais.
                                                              (line  58)
* $?:                                    Parâmetros Especiais.
                                                              (line  38)
* $@:                                    Parâmetros Especiais.
                                                              (line  24)
* $_:                                    Parâmetros Especiais.
                                                              (line  69)
* *:                                     Parâmetros Especiais.
                                                              (line   9)
* -:                                     Parâmetros Especiais.
                                                              (line  41)
* 0:                                     Parâmetros Especiais.
                                                              (line  57)
* ?:                                     Parâmetros Especiais.
                                                              (line  37)
* @:                                     Parâmetros Especiais.
                                                              (line  23)
* _:                                     Parâmetros Especiais.
                                                              (line  68)
* auto_resume:                           Variáveis do Controle de Tarefa.
                                                              (line   6)
* BASH:                                  Variáveis do Bash.   (line  13)
* BASHOPTS:                              Variáveis do Bash.   (line  17)
* BASHPID:                               Variáveis do Bash.   (line  27)
* BASH_ALIASES:                          Variáveis do Bash.   (line  32)
* BASH_ARGC:                             Variáveis do Bash.   (line  40)
* BASH_ARGV:                             Variáveis do Bash.   (line  51)
* BASH_CMDS:                             Variáveis do Bash.   (line  61)
* BASH_COMMAND:                          Variáveis do Bash.   (line  69)
* BASH_COMPAT:                           Variáveis do Bash.   (line  74)
* BASH_ENV:                              Variáveis do Bash.   (line  91)
* BASH_EXECUTION_STRING:                 Variáveis do Bash.   (line  98)
* BASH_LINENO:                           Variáveis do Bash.   (line 101)
* BASH_REMATCH:                          Variáveis do Bash.   (line 110)
* BASH_SOURCE:                           Variáveis do Bash.   (line 119)
* BASH_SUBSHELL:                         Variáveis do Bash.   (line 126)
* BASH_VERSINFO:                         Variáveis do Bash.   (line 131)
* BASH_VERSION:                          Variáveis do Bash.   (line 154)
* BASH_XTRACEFD:                         Variáveis do Bash.   (line 157)
* bell-style:                            Sintaxe do Arquivo Init de Readline.
                                                              (line  43)
* bind-tty-special-chars:                Sintaxe do Arquivo Init de Readline.
                                                              (line  51)
* CDPATH:                                Variáveis do Shell Bourne.
                                                              (line   9)
* CHILD_MAX:                             Variáveis do Bash.   (line 171)
* colored-stats:                         Sintaxe do Arquivo Init de Readline.
                                                              (line  56)
* COLUMNS:                               Variáveis do Bash.   (line 178)
* comment-begin:                         Sintaxe do Arquivo Init de Readline.
                                                              (line  62)
* completion-display-width:              Sintaxe do Arquivo Init de Readline.
                                                              (line  67)
* completion-ignore-case:                Sintaxe do Arquivo Init de Readline.
                                                              (line  74)
* completion-map-case:                   Sintaxe do Arquivo Init de Readline.
                                                              (line  80)
* completion-prefix-display-length:      Sintaxe do Arquivo Init de Readline.
                                                              (line  87)
* completion-query-items:                Sintaxe do Arquivo Init de Readline.
                                                              (line  94)
* COMPREPLY:                             Variáveis do Bash.   (line 234)
* COMP_CWORD:                            Variáveis do Bash.   (line 185)
* COMP_KEY:                              Variáveis do Bash.   (line 215)
* COMP_LINE:                             Variáveis do Bash.   (line 191)
* COMP_POINT:                            Variáveis do Bash.   (line 196)
* COMP_TYPE:                             Variáveis do Bash.   (line 204)
* COMP_WORDBREAKS:                       Variáveis do Bash.   (line 219)
* COMP_WORDS:                            Variáveis do Bash.   (line 226)
* convert-meta:                          Sintaxe do Arquivo Init de Readline.
                                                              (line 105)
* COPROC:                                Variáveis do Bash.   (line 241)
* DIRSTACK:                              Variáveis do Bash.   (line 246)
* disable-completion:                    Sintaxe do Arquivo Init de Readline.
                                                              (line 112)
* editing-mode:                          Sintaxe do Arquivo Init de Readline.
                                                              (line 118)
* EMACS:                                 Variáveis do Bash.   (line 257)
* enable-keypad:                         Sintaxe do Arquivo Init de Readline.
                                                              (line 131)
* ENV:                                   Variáveis do Bash.   (line 263)
* EUID:                                  Variáveis do Bash.   (line 267)
* expand-tilde:                          Sintaxe do Arquivo Init de Readline.
                                                              (line 144)
* FCEDIT:                                Variáveis do Bash.   (line 271)
* FIGNORE:                               Variáveis do Bash.   (line 275)
* FUNCNAME:                              Variáveis do Bash.   (line 282)
* FUNCNEST:                              Variáveis do Bash.   (line 301)
* GLOBIGNORE:                            Variáveis do Bash.   (line 307)
* GROUPS:                                Variáveis do Bash.   (line 315)
* histchars:                             Variáveis do Bash.   (line 322)
* HISTCMD:                               Variáveis do Bash.   (line 337)
* HISTCONTROL:                           Variáveis do Bash.   (line 343)
* HISTFILE:                              Variáveis do Bash.   (line 361)
* HISTFILESIZE:                          Variáveis do Bash.   (line 365)
* HISTIGNORE:                            Variáveis do Bash.   (line 377)
* history-preserve-point:                Sintaxe do Arquivo Init de Readline.
                                                              (line 149)
* history-size:                          Sintaxe do Arquivo Init de Readline.
                                                              (line 155)
* HISTSIZE:                              Variáveis do Bash.   (line 397)
* HISTTIMEFORMAT:                        Variáveis do Bash.   (line 405)
* HOME:                                  Variáveis do Shell Bourne.
                                                              (line  13)
* horizontal-scroll-mode:                Sintaxe do Arquivo Init de Readline.
                                                              (line 164)
* HOSTFILE:                              Variáveis do Bash.   (line 416)
* HOSTNAME:                              Variáveis do Bash.   (line 429)
* HOSTTYPE:                              Variáveis do Bash.   (line 432)
* IFS:                                   Variáveis do Shell Bourne.
                                                              (line  18)
* IGNOREEOF:                             Variáveis do Bash.   (line 436)
* input-meta:                            Sintaxe do Arquivo Init de Readline.
                                                              (line 172)
* INPUTRC:                               Variáveis do Bash.   (line 446)
* isearch-terminators:                   Sintaxe do Arquivo Init de Readline.
                                                              (line 179)
* keymap:                                Sintaxe do Arquivo Init de Readline.
                                                              (line 186)
* LANG:                                  Variáveis do Bash.   (line 450)
* LC_ALL:                                Variáveis do Bash.   (line 455)
* LC_COLLATE:                            Variáveis do Bash.   (line 459)
* LC_CTYPE:                              Variáveis do Bash.   (line 467)
* LC_MESSAGES:                           Tradução do Locale.  (line  13)
* LC_MESSAGES <1>:                       Variáveis do Bash.   (line 473)
* LC_NUMERIC:                            Variáveis do Bash.   (line 478)
* LINENO:                                Variáveis do Bash.   (line 482)
* LINES:                                 Variáveis do Bash.   (line 486)
* MACHTYPE:                              Variáveis do Bash.   (line 493)
* MAIL:                                  Variáveis do Shell Bourne.
                                                              (line  22)
* MAILCHECK:                             Variáveis do Bash.   (line 498)
* MAILPATH:                              Variáveis do Shell Bourne.
                                                              (line  28)
* MAPFILE:                               Variáveis do Bash.   (line 507)
* mark-modified-lines:                   Sintaxe do Arquivo Init de Readline.
                                                              (line 220)
* mark-symlinked-directories:            Sintaxe do Arquivo Init de Readline.
                                                              (line 226)
* match-hidden-files:                    Sintaxe do Arquivo Init de Readline.
                                                              (line 232)
* menu-complete-display-prefix:          Sintaxe do Arquivo Init de Readline.
                                                              (line 241)
* meta-flag:                             Sintaxe do Arquivo Init de Readline.
                                                              (line 172)
* OLDPWD:                                Variáveis do Bash.   (line 511)
* OPTARG:                                Variáveis do Shell Bourne.
                                                              (line  37)
* OPTERR:                                Variáveis do Bash.   (line 515)
* OPTIND:                                Variáveis do Shell Bourne.
                                                              (line  41)
* OSTYPE:                                Variáveis do Bash.   (line 519)
* output-meta:                           Sintaxe do Arquivo Init de Readline.
                                                              (line 247)
* page-completions:                      Sintaxe do Arquivo Init de Readline.
                                                              (line 253)
* PATH:                                  Variáveis do Shell Bourne.
                                                              (line  45)
* PIPESTATUS:                            Variáveis do Bash.   (line 523)
* POSIXLY_CORRECT:                       Variáveis do Bash.   (line 529)
* PPID:                                  Variáveis do Bash.   (line 539)
* PROMPT_COMMAND:                        Variáveis do Bash.   (line 543)
* PROMPT_DIRTRIM:                        Variáveis do Bash.   (line 547)
* PS1:                                   Variáveis do Shell Bourne.
                                                              (line  52)
* PS2:                                   Variáveis do Shell Bourne.
                                                              (line  58)
* PS3:                                   Variáveis do Bash.   (line 554)
* PS4:                                   Variáveis do Bash.   (line 559)
* PWD:                                   Variáveis do Bash.   (line 566)
* RANDOM:                                Variáveis do Bash.   (line 570)
* READLINE_LINE:                         Variáveis do Bash.   (line 575)
* READLINE_POINT:                        Variáveis do Bash.   (line 579)
* REPLY:                                 Variáveis do Bash.   (line 584)
* revert-all-at-newline:                 Sintaxe do Arquivo Init de Readline.
                                                              (line 265)
* SECONDS:                               Variáveis do Bash.   (line 587)
* SHELL:                                 Variáveis do Bash.   (line 593)
* SHELLOPTS:                             Variáveis do Bash.   (line 599)
* SHLVL:                                 Variáveis do Bash.   (line 609)
* show-all-if-ambiguous:                 Sintaxe do Arquivo Init de Readline.
                                                              (line 273)
* show-all-if-unmodified:                Sintaxe do Arquivo Init de Readline.
                                                              (line 280)
* show-mode-in-prompt:                   Sintaxe do Arquivo Init de Readline.
                                                              (line 290)
* skip-completed-text:                   Sintaxe do Arquivo Init de Readline.
                                                              (line 295)
* TEXTDOMAIN:                            Tradução do Locale.  (line  13)
* TEXTDOMAINDIR:                         Tradução do Locale.  (line  13)
* TIMEFORMAT:                            Variáveis do Bash.   (line 614)
* TMOUT:                                 Variáveis do Bash.   (line 656)
* TMPDIR:                                Variáveis do Bash.   (line 669)
* UID:                                   Variáveis do Bash.   (line 674)
* visible-stats:                         Sintaxe do Arquivo Init de Readline.
                                                              (line 309)


File: bashref-pt_BR.info,  Node: Índice das Funções,  Next: Índice dos Conceitos,  Prev: Índice das Variáveis,  Up: Índices

E.4 Índice das Funções
======================

 [index ]
* Menu:

* abort (C-g):                           Miscellaneous Commands.
                                                              (line  10)
* accept-line (Newline or Return):       Commands For History.
                                                              (line   6)
* alias-expand-line ():                  Miscellaneous Commands.
                                                              (line 131)
* backward-char (C-b):                   Comandos Para Movimentação.
                                                              (line  15)
* backward-delete-char (Rubout):         Commands For Text.   (line  17)
* backward-kill-line (C-x Rubout):       Commands For Killing.
                                                              (line   9)
* backward-kill-word (M-<DEL>):          Commands For Killing.
                                                              (line  24)
* backward-word (M-b):                   Comandos Para Movimentação.
                                                              (line  22)
* beginning-of-history (M-<):            Commands For History.
                                                              (line  21)
* beginning-of-line (C-a):               Comandos Para Movimentação.
                                                              (line   6)
* call-last-kbd-macro (C-x e):           Macros (``Sequências de Comandos'') de Teclado.
                                                              (line  14)
* capitalize-word (M-c):                 Commands For Text.   (line  55)
* character-search (C-]):                Miscellaneous Commands.
                                                              (line  42)
* character-search-backward (M-C-]):     Miscellaneous Commands.
                                                              (line  47)
* clear-screen (C-l):                    Comandos Para Movimentação.
                                                              (line  35)
* complete (<TAB>):                      Commands For Completion.
                                                              (line   6)
* complete-command (M-!):                Commands For Completion.
                                                              (line  83)
* complete-filename (M-/):               Commands For Completion.
                                                              (line  51)
* complete-hostname (M-@):               Commands For Completion.
                                                              (line  75)
* complete-into-braces (M-{):            Commands For Completion.
                                                              (line 104)
* complete-username (M-~):               Commands For Completion.
                                                              (line  59)
* complete-variable (M-$):               Commands For Completion.
                                                              (line  67)
* copy-backward-word ():                 Commands For Killing.
                                                              (line  60)
* copy-forward-word ():                  Commands For Killing.
                                                              (line  65)
* copy-region-as-kill ():                Commands For Killing.
                                                              (line  55)
* dabbrev-expand ():                     Commands For Completion.
                                                              (line  99)
* delete-char (C-d):                     Commands For Text.   (line  12)
* delete-char-or-list ():                Commands For Completion.
                                                              (line  45)
* delete-horizontal-space ():            Commands For Killing.
                                                              (line  47)
* digit-argument (‘M-0’, ‘M-1’, … ‘M--’): Numeric Arguments.  (line   6)
* display-shell-version (C-x C-v):       Miscellaneous Commands.
                                                              (line 116)
* do-uppercase-version (M-a, M-b, M-X, …): Miscellaneous Commands.
                                                              (line  14)
* downcase-word (M-l):                   Commands For Text.   (line  50)
* dump-functions ():                     Miscellaneous Commands.
                                                              (line  76)
* dump-macros ():                        Miscellaneous Commands.
                                                              (line  90)
* dump-variables ():                     Miscellaneous Commands.
                                                              (line  83)
* dynamic-complete-history (M-<TAB>):    Commands For Completion.
                                                              (line  94)
* edit-and-execute-command (C-x C-e):    Miscellaneous Commands.
                                                              (line 146)
* end-kbd-macro (C-x )):                 Macros (``Sequências de Comandos'') de Teclado.
                                                              (line  10)
* end-of-file (usually C-d):             Commands For Text.   (line   6)
* end-of-history (M->):                  Commands For History.
                                                              (line  24)
* end-of-line (C-e):                     Comandos Para Movimentação.
                                                              (line   9)
* exchange-point-and-mark (C-x C-x):     Miscellaneous Commands.
                                                              (line  37)
* forward-backward-delete-char ():       Commands For Text.   (line  21)
* forward-char (C-f):                    Comandos Para Movimentação.
                                                              (line  12)
* forward-search-history (C-s):          Commands For History.
                                                              (line  33)
* forward-word (M-f):                    Comandos Para Movimentação.
                                                              (line  18)
* glob-complete-word (M-g):              Miscellaneous Commands.
                                                              (line  97)
* glob-expand-word (C-x *):              Miscellaneous Commands.
                                                              (line 103)
* glob-list-expansions (C-x g):          Miscellaneous Commands.
                                                              (line 110)
* history-and-alias-expand-line ():      Miscellaneous Commands.
                                                              (line 135)
* history-expand-line (M-^):             Miscellaneous Commands.
                                                              (line 124)
* history-search-backward ():            Commands For History.
                                                              (line  57)
* history-search-forward ():             Commands For History.
                                                              (line  50)
* history-substr-search-backward ():     Commands For History.
                                                              (line  71)
* history-substr-search-forward ():      Commands For History.
                                                              (line  64)
* insert-comment (M-#):                  Miscellaneous Commands.
                                                              (line  63)
* insert-completions (M-*):              Commands For Completion.
                                                              (line  23)
* insert-last-argument (M-. or M-_):     Miscellaneous Commands.
                                                              (line 138)
* kill-line (C-k):                       Commands For Killing.
                                                              (line   6)
* kill-region ():                        Commands For Killing.
                                                              (line  51)
* kill-whole-line ():                    Commands For Killing.
                                                              (line  15)
* kill-word (M-d):                       Commands For Killing.
                                                              (line  19)
* magic-space ():                        Miscellaneous Commands.
                                                              (line 127)
* menu-complete ():                      Commands For Completion.
                                                              (line  27)
* menu-complete-backward ():             Commands For Completion.
                                                              (line  40)
* next-history (C-n):                    Commands For History.
                                                              (line  17)
* non-incremental-forward-search-history (M-n): Commands For History.
                                                              (line  44)
* non-incremental-reverse-search-history (M-p): Commands For History.
                                                              (line  38)
* operate-and-get-next (C-o):            Miscellaneous Commands.
                                                              (line 141)
* overwrite-mode ():                     Commands For Text.   (line  60)
* possible-command-completions (C-x !):  Commands For Completion.
                                                              (line  90)
* possible-completions (M-?):            Commands For Completion.
                                                              (line  16)
* possible-filename-completions (C-x /): Commands For Completion.
                                                              (line  55)
* possible-hostname-completions (C-x @): Commands For Completion.
                                                              (line  79)
* possible-username-completions (C-x ~): Commands For Completion.
                                                              (line  63)
* possible-variable-completions (C-x $): Commands For Completion.
                                                              (line  71)
* prefix-meta (<ESC>):                   Miscellaneous Commands.
                                                              (line  18)
* previous-history (C-p):                Commands For History.
                                                              (line  13)
* print-last-kbd-macro ():               Macros (``Sequências de Comandos'') de Teclado.
                                                              (line  18)
* quoted-insert (C-q or C-v):            Commands For Text.   (line  26)
* re-read-init-file (C-x C-r):           Miscellaneous Commands.
                                                              (line   6)
* redraw-current-line ():                Comandos Para Movimentação.
                                                              (line  39)
* reverse-search-history (C-r):          Commands For History.
                                                              (line  28)
* revert-line (M-r):                     Miscellaneous Commands.
                                                              (line  25)
* self-insert (a, b, A, 1, !, …):        Commands For Text.   (line  30)
* set-mark (C-@):                        Miscellaneous Commands.
                                                              (line  33)
* shell-backward-kill-word ():           Commands For Killing.
                                                              (line  33)
* shell-backward-word ():                Comandos Para Movimentação.
                                                              (line  30)
* shell-expand-line (M-C-e):             Miscellaneous Commands.
                                                              (line 119)
* shell-forward-word ():                 Comandos Para Movimentação.
                                                              (line  26)
* shell-kill-word ():                    Commands For Killing.
                                                              (line  28)
* skip-csi-sequence ():                  Miscellaneous Commands.
                                                              (line  52)
* start-kbd-macro (C-x ():               Macros (``Sequências de Comandos'') de Teclado.
                                                              (line   6)
* tilde-expand (M-&):                    Miscellaneous Commands.
                                                              (line  30)
* transpose-chars (C-t):                 Commands For Text.   (line  33)
* transpose-words (M-t):                 Commands For Text.   (line  39)
* undo (C-_ or C-x C-u):                 Miscellaneous Commands.
                                                              (line  22)
* universal-argument ():                 Numeric Arguments.   (line  10)
* unix-filename-rubout ():               Commands For Killing.
                                                              (line  42)
* unix-line-discard (C-u):               Commands For Killing.
                                                              (line  12)
* unix-word-rubout (C-w):                Commands For Killing.
                                                              (line  37)
* upcase-word (M-u):                     Commands For Text.   (line  45)
* yank (C-y):                            Commands For Killing.
                                                              (line  70)
* yank-last-arg (M-. or M-_):            Commands For History.
                                                              (line  87)
* yank-nth-arg (M-C-y):                  Commands For History.
                                                              (line  78)
* yank-pop (M-y):                        Commands For Killing.
                                                              (line  74)


File: bashref-pt_BR.info,  Node: Índice dos Conceitos,  Prev: Índice das Funções,  Up: Índices

E.5 Índice dos Conceitos
========================

 [index ]
* Menu:

* agrupamento de comandos:               Agrupamento de Comandos.
                                                              (line   6)
* ambiente:                              Ambiente.            (line   6)
* ambiente de execução:                  Ambiente de Execução de Comando.
                                                              (line   6)
* apelido, expansão de:                  Apelidos.            (line   6)
* aritmética de shell:                   Aritmética de Shell. (line   6)
* aritmética, expansão:                  Expansão Aritmética. (line   6)
* aritmética, shell:                     Aritmética de Shell. (line   6)
* arquivo de inicialização, readline:    Arquivo Init de Readline.
                                                              (line   6)
* arquivos de inicialização:             Arquivos de Inicialização do Bash.
                                                              (line   6)
* avaliação aritmética:                  Aritmética de Shell. (line   6)
* builtin, comando interno:              Definições.          (line  17)
* busca de comando:                      Busca de Comando e Execução.
                                                              (line   6)
* campo, conceito de:                    Definições.          (line  31)
* canal de comunicação, pipeline:        Canais de Comunicação.
                                                              (line   6)
* coincidência de modelo:                Coincidência de Modelo.
                                                              (line   6)
* comando interno especial:              Definições.          (line  85)
* comando interno, builtin:              Definições.          (line  17)
* comando, busca de:                     Busca de Comando e Execução.
                                                              (line   6)
* comando, expansão de:                  Expansão de Comando Simples.
                                                              (line   6)
* comando, prompt de:                    Controlando o Prompt.
                                                              (line   6)
* comando, substituição:                 Substituição de Comando.
                                                              (line   6)
* comando, temporização de:              Canais de Comunicação.
                                                              (line   9)
* comandos internos a complementação:    Comandos Internos à Complementação Programável.
                                                              (line   6)
* comandos internos ao histórico:        Comandos Internos ao Histórico de Bash.
                                                              (line   6)
* comandos internos especiais:           Comandos Internos Especiais.
                                                              (line   6)
* comandos, agrupamento:                 Agrupamento de Comandos.
                                                              (line   6)
* comandos, canal de comunicação:        Canais de Comunicação.
                                                              (line   6)
* comandos, compostos:                   Comandos Compostos.  (line   6)
* comandos, condicionais:                Construtores Condicionais.
                                                              (line   6)
* comandos, listas:                      Listas.              (line   6)
* comandos, looping:                     Construtores de Ciclos.
                                                              (line   6)
* comandos, pipelines:                   Canais de Comunicação.
                                                              (line   6)
* comandos, shell:                       Comandos do Shell.   (line   6)
* comandos, simples:                     Comandos Simples.    (line   6)
* comentários, shell:                    Comentários.         (line   6)
* complementação programável:            Complementação Programável.
                                                              (line   6)
* condicionais, expressões:              Expressões Condicionais de Bash.
                                                              (line   6)
* configuração:                          Instalação Básica.   (line   6)
* configuração do Bash:                  Instalação Básica.   (line   6)
* controle de tarefa:                    Definições.          (line  45)
* controle de tarefa <1>:                Fundamentos do Controle de Tarefa.
                                                              (line   6)
* controle, operador de:                 Definições.          (line  22)
* coprocesso:                            Coprocessos.         (line   6)
* código de saída:                       Situação de Saída.   (line   6)
* designadores de evento:                Designadores de Evento.
                                                              (line   6)
* diretório, pilha de:                   A Pilha de Diretório.
                                                              (line   6)
* divisão de palavra:                    Divisão de Palavra.  (line   6)
* editando linhas de comando:            Mínimo Essencial sobre Readline.
                                                              (line   6)
* edição de comando:                     Mínimo Essencial sobre Readline.
                                                              (line   6)
* encapsulamento, ANSI:                  Encapsulamento ANSI-C.
                                                              (line   6)
* encapsulamento, quoting:               Encapsulamento.      (line   6)
* eventos de histórico:                  Designadores de Evento.
                                                              (line   8)
* execução de comando:                   Busca de Comando e Execução.
                                                              (line   6)
* execução, ambiente de:                 Ambiente de Execução de Comando.
                                                              (line   6)
* expansão:                              Expansões de Shell.  (line   6)
* expansão de apelido:                   Apelidos.            (line   6)
* expansão de chave:                     Expansão de Chave.   (line   6)
* expansão de comando:                   Expansão de Comando Simples.
                                                              (line   6)
* expansão de histórico:                 History Interaction. (line   6)
* expansão de parâmetro:                 Expansão de Parâmetro de Shell.
                                                              (line   6)
* expansão de til:                       Expansão de Til.     (line   6)
* expansão, aritmética:                  Expansão Aritmética. (line   6)
* expansão, chave:                       Expansão de Chave.   (line   6)
* expansão, nome de arquivo:             Expansão de Nome de Arquivo.
                                                              (line   9)
* expansão, nome de caminho:             Expansão de Nome de Arquivo.
                                                              (line   9)
* expansão, parâmetro:                   Expansão de Parâmetro de Shell.
                                                              (line   6)
* expansão, til:                         Expansão de Til.     (line   6)
* expressões, aritmética:                Aritmética de Shell. (line   6)
* expressões, condicionais:              Expressões Condicionais de Bash.
                                                              (line   6)
* função de shell:                       Funções de Shell.    (line   6)
* grupo de processo:                     Definições.          (line  65)
* histórico de comando:                  Facilidades do Histórico de Bash.
                                                              (line   6)
* Histórico, como usar:                  Um Exemplo de Complementação Programável.
                                                              (line 126)
* ID de grupo de processo:               Definições.          (line  69)
* identificador:                         Definições.          (line  54)
* identificador de nome:                 Definições.          (line  54)
* inicialização, arquivos de:            Arquivos de Inicialização do Bash.
                                                              (line   6)
* instalação:                            Instalação Básica.   (line   6)
* instalação do Bash:                    Instalação Básica.   (line   6)
* interativo, shell:                     Invocando o Bash.    (line 134)
* interativo, shell <1>:                 Shells Interativos.  (line   6)
* interação, readline:                   Interação com Readline.
                                                              (line   6)
* internacionalização:                   Tradução do Locale.  (line   6)
* kill ring (“área de transferência”):   Comandos Readline para Killing (``Recortar'').
                                                              (line  21)
* killing (“recortando”) texto:          Comandos Readline para Killing (``Recortar'').
                                                              (line   6)
* linguagens nativas:                    Tradução do Locale.  (line   6)
* lista de histórico:                    Facilidades do Histórico de Bash.
                                                              (line   6)
* localização:                           Tradução do Locale.  (line   6)
* login, shell de:                       Invocando o Bash.    (line 131)
* manipulação de sinal:                  Sinais.              (line   6)
* metacarácter:                          Definições.          (line  49)
* Modo POSIX:                            O Modo POSIX de Bash.
                                                              (line   6)
* nome de arquivo:                       Definições.          (line  37)
* nome de arquivo, expansão:             Expansão de Nome de Arquivo.
                                                              (line   9)
* nome de caminho, expansão:             Expansão de Nome de Arquivo.
                                                              (line   9)
* nome, conceito de:                     Definições.          (line  54)
* notação, readline:                     Mínimo Essencial sobre Readline.
                                                              (line   6)
* operador de controle:                  Definições.          (line  22)
* operador, shell:                       Definições.          (line  60)
* palavra reservada:                     Definições.          (line  73)
* palavra, conceito de:                  Definições.          (line  94)
* palavra, divisão de:                   Divisão de Palavra.  (line   6)
* parâmetros:                            Parâmetros de Shell. (line   6)
* parâmetros, especiais:                 Parâmetros Especiais.
                                                              (line   6)
* parâmetros, posicionais:               Parâmetros Posicionais.
                                                              (line   6)
* pilha de diretório:                    A Pilha de Diretório.
                                                              (line   6)
* pipeline, canal de comunicação:        Canais de Comunicação.
                                                              (line   6)
* POSIX:                                 Definições.          (line   9)
* primeiro plano:                        Fundamentos do Controle de Tarefa.
                                                              (line   6)
* processo, grupo de:                    Definições.          (line  65)
* processo, ID de grupo de:              Definições.          (line  69)
* processo, substituição de:             Substituição de Processo.
                                                              (line   6)
* prompting:                             Controlando o Prompt.
                                                              (line   6)
* quoting, encapsulamento:               Encapsulamento.      (line   6)
* Readline, como usar:                   Variáveis do Controle de Tarefa.
                                                              (line  27)
* redireção:                             Redireções.          (line   6)
* retorno, situação de:                  Definições.          (line  78)
* saída, código de:                      Situação de Saída.   (line   6)
* saída, situação de:                    Definições.          (line  27)
* saída, situação de <1>:                Situação de Saída.   (line   6)
* segundo plano:                         Fundamentos do Controle de Tarefa.
                                                              (line   6)
* shell Bourne:                          Características Básicas do Shell.
                                                              (line   6)
* shell de login:                        Invocando o Bash.    (line 131)
* shell interativo:                      Invocando o Bash.    (line 134)
* shell interativo <1>:                  Shells Interativos.  (line   6)
* shell restrito:                        O Shell Restrito.    (line   6)
* shell script:                          Scripts de Shell.    (line   6)
* sinal:                                 Definições.          (line  81)
* sinal, manipulação de:                 Sinais.              (line   6)
* situação de retorno:                   Definições.          (line  78)
* situação de saída:                     Definições.          (line  27)
* situação de saída <1>:                 Situação de Saída.   (line   6)
* substituição de comando:               Substituição de Comando.
                                                              (line   6)
* substituição de processo:              Substituição de Processo.
                                                              (line   6)
* suspendendo tarefas:                   Fundamentos do Controle de Tarefa.
                                                              (line   6)
* tarefa, conceito de:                   Definições.          (line  40)
* tarefa, controle de:                   Definições.          (line  45)
* tarefa, controle de <1>:               Fundamentos do Controle de Tarefa.
                                                              (line   6)
* tarefas, suspendendo:                  Fundamentos do Controle de Tarefa.
                                                              (line   6)
* temporização de comando:               Canais de Comunicação.
                                                              (line   9)
* token:                                 Definições.          (line  89)
* tradução, linguagens nativas:          Tradução do Locale.  (line   6)
* unidade simples, token:                Definições.          (line  89)
* unidade, palavra:                      Definições.          (line  94)
* variáveis, readline:                   Sintaxe do Arquivo Init de Readline.
                                                              (line  42)
* variável de shell:                     Parâmetros de Shell. (line   6)
* vetores:                               Vetores.             (line   6)
* yanking (“colando”) texto:             Comandos Readline para Killing (``Recortar'').
                                                              (line   6)
* área de transferência (“kill ring”):   Comandos Readline para Killing (``Recortar'').
                                                              (line  21)

