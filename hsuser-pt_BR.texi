@ignore
Este arquivo documenta a interface de usuário para a biblioteca GNU 
History.

Direitos autorais @copyright{} 2015 da versão modificada traduzida para 
o português do Brasil: Jamenson Ferreira Espindula de Almeida Melo.

Direitos autorais @copyright{} 1988--2014 Free Software Foundation, Inc.

Da autoria de Brian Fox e Chet Ramey.

É dada permissão para processar este arquivo por meio de Tex e imprimir 
o resultado, contanto que o documento impresso carregue uma notícia de 
permissão de cópia idêntica a esta, exceto pela remoção deste parágrafo 
(este parágrafo não sendo relevante para o manual impresso).

É dada permissão para produzir e distribuir cópias literais deste 
manual, contanto que a notícia de direitos autorais e esta notícia de 
permissão sejam preservadas em todas as cópias.

É dada permissão para copiar e distribuir versões modificadas deste 
manual sob as condições para cópias literais, contanto também que a 
declaração de Direitos Autorais GNU esteja disponível para o 
distribuidor, e contanto que o trabalho derivado resultante inteiro seja 
distribuído sob os termos de uma notícia de permissão idêntica a esta.

É dada permissão para copiar e distribuir traduções deste manual em 
outra língua, sob as condições acima para versões modificadas.
@end ignore

@node Using History Interactively
@chapter Using History Interactively

@ifclear BashFeatures
@defcodeindex bt
@end ifclear

@ifset BashFeatures
Este capítulo descreve como utilizar a biblioteca @sc{gnu} History 
interativamente, a partir do ponto de vista do usuário.
Ele deveria ser considerado um guia do usuário.
Para informação sobre a utilização da biblioteca @sc{gnu} History em 
outros programas, veja-se o Manual da Biblioteca @sc{gnu} Readline.
@end ifset
@ifclear BashFeatures
Este capítulo descreve como utilizar a Biblioteca @sc{gnu} History 
interativamente, a partir do ponto de vista do usuário.   Ele deveria 
ser considerado um guia do usuário.   Para informação sobre a utilização 
da Biblioteca @sc{gnu} History em seus próprios programas, veja-se 
@ref{Programming with GNU History}.
@end ifclear

@ifset BashFeatures
@menu
* Bash History Facilities::	Como Bash te permite manipular seu 
histórico de comando.
* Bash History Builtins::	Os comandos internos de Bash que 
manipulam o histórico de comando.
* History Interaction::		Qual é o sentimento ao se utilizar 
History como um usuário.
@end menu
@end ifset
@ifclear BashFeatures
@menu
* History Interaction::		Qual é o sentimento ao se utilizar 
History como um usuário.
@end menu
@end ifclear

@ifset BashFeatures
@node Bash History Facilities
@section Bash History Facilities
@cindex command history
@cindex history list

Quando a opção @option{-o history} ao comando interno @code{set} está 
habilitada (veja-se @ref{The Set Builtin}), o shell provê acesso ao 
@dfn{histórico de comandos}, a lista de comandos previamente digitados.
O valor da variável de shell @env{HISTSIZE} é utilizada como o número de 
comandos a salvar em uma lista de histórico.
O texto dos últimos @env{$HISTSIZE} comandos (padrão 500) é salvo.
O shell armazena cada comando em uma lista de histórico prévia a 
expansão de parâmetro e variável, porém após a expansão de histórico ser 
realizada, objeto dos valores das variáveis de shell @env{HISTIGNORE} e 
@env{HISTCONTROL}.

Quando o shell inicializa, o histórico é inicializado a partir do 
arquivo nomeado pela variável @env{HISTFILE} (padrão 
@file{~/.bash_history}).
O arquivo nomeado pelo valor de @env{HISTFILE} é truncado, se 
necessário, para conter não mais que o número de linhas especificadas 
pelo valor da variável @env{HISTFILESIZE}.
Quando um shell com histórico habilitado sai, as últimas @env{$HISTSIZE} 
linhas são copiadas a partir da lista de histórico para o arquivo 
nominado por @env{$HISTFILE}.
Se a opção de shell @code{histappend} for configurada 
(veja-se @ref{Bash Builtins}), então as linhas são acrescentadas ao 
final do arquivo de histórico, do contrário o arquivo de histórico é 
sobrescrito.
Se @env{HISTFILE} for desconfigurada, ou se o arquivo de histórico 
estiver sem permissão de escrita, então o histórico não é salvo.
Após o salvamento do histórico, o arquivo de histórico é truncado para 
conter não mais que @env{$HISTFILESIZE} linhas.
Se @env{HISTFILESIZE} estiver desconfigurada, ou configurada para 
"null", para um valor não numérico ou um valor numérico menor que zero, 
então o arquivo de histórico não é truncado.

Se a @env{HISTTIMEFORMAT} estiver configurada, então a informação de 
marca temporal associada com cada entrada de histórico é escrita no 
arquivo de histórico, marcada com o carácter de comentário de histórico.
Quando o arquivo de histórico é lido, as linhas iniciando com o carácter 
de comentário de histórico seguidas imediatamente por um dígito são 
interpretadas como marcas temporais para a linha de histórico prévia.

O comando interno @code{fc} pode ser utilizado para listar ou editar e 
re-executar uma porção da lista de histórico.
O comando interno @code{history} pode ser utilizado para exibir ou 
modificar a lista de histórico e manipular o arquivo de histórico.
Quando da utilização da edição de linha de comando, os comandos de busca 
estão disponíveis em cada modo de edição que provê acesso à lista de 
histórico (veja-se @ref{Commands For History}).

O shell permite controle sobre quais comandos são salvos na lista de 
histórico.   As variáveis @env{HISTCONTROL} e @env{HISTIGNORE} podem ser 
configuradas para fazer com que o shell salve somente um subconjunto dos 
comandos fornecidos.
A opção de shell @code{cmdhist}, se habilitada, faz com que o shell 
tente salvar cada linha de um comando multilinha na mesma entrada de 
histórico, adicionando ponto e vírgula onde for necessário para 
preservar a correção sintática.
A opção de shell @code{lithist} faz com o shell salve o comando com 
marcadores "newline" embutidos, em vez de ponto e vírgula.
O comando interno @code{shopt} é utilizado para configurar essas opções.
Veja-se @ref{Bash Builtins}, para uma descrição de @code{shopt}.

@node Bash History Builtins
@section Bash History Builtins
@cindex history builtins

Bash provê dois comandos internos os quais manipulam a lista de 
histórico e o arquivo de histórico.

@table @code

@item fc
@btindex fc
@example
@code{fc [-e @var{ename}] [-lnr] [@var{first}] [@var{last}]}
@code{fc -s [@var{pat}=@var{rep}] [@var{command}]}
@end example

A primeira forma seleciona um intervalo de comandos, desde @var{first} 
até @var{last}, da lista de histórico e exibe ou edita e os re-executa.
@var{first} e @var{last} podem ser especificadas como uma sequência de 
caracteres (para localizar o mais recente comando iniciando com aquela 
sequência de caracteres) ou como um número (um índice na lista de 
histórico, onde um número negativo é utilizado como uma compensação a 
partir do número atual de comando).   Se @var{last} não for 
especificado, então é configurado para @var{first}.   Se @var{first} não 
for especificado, então é configurado para o comando prévio para edição 
e @minus{}16 para listagem.   Se o sinalizador @option{-l} for dado, 
então os comandos são listados na saída padrão.  O sinalizador 
@option{-n} suprime os números de comando quando da listagem.   O 
sinalizador @option{-r} reverte a ordem da listagem.   Do contrário, o 
editor dado por @var{ename} é invocado sobre um arquivo contendo aqueles 
comandos.   Se @var{ename} não for dado, então o valor da seguinte 
expansão de variável é utilizado: @code{$@{FCEDIT:-$@{EDITOR:-vi@}@}}. 
Isso diz para utilizar o valor da variável @env{FCEDIT} se configurado, 
ou o valor da variável @env{EDITOR} se essa estiver configurada, ou 
@code{vi} se nenhuma delas estiver configurada.
Quando a edição estiver completa, os comandos editados são ecoados e 
executados.

Na segunda forma, @var{command} é re-executado após cada instância de 
@var{pat} no comando selecionado ser substituída por @var{rep}.
@var{command} é interpretado do mesmo jeito que @var{first} acima.

Um apelido útil para se utilizar com o comando @code{fc} é 
@code{r='fc -s'}, de maneira que digitar @samp{r cc} executa o último 
comando iniciando com @code{cc} e digitar @samp{r} re-executa o último 
comando (veja-se @ref{Aliases}).

@item history
@btindex history
@example
history [@var{n}]
history -c
history -d @var{offset}
history [-anrw] [@var{filename}]
history -ps @var{arg}
@end example

Sem opções, exibe a lista de histórico com números de linha.
As linhas prefixadas com um @samp{*} foram modificadas.
Um argumento de @var{n} lista somente as últimas @var{n} linhas.
Se a variável de shell @env{HISTTIMEFORMAT} estiver configurada e não 
nula, então ela é utilizada como uma sequência de caracteres de formato 
para @var{strftime} exibir a marca temporal associada com cada entrada 
de histórico exibida.
Nenhum espaço em branco interveniente é impresso entre a marca temporal 
formatada e a linha de histórico.

As opções, se fornecidas, tem os seguintes significados:

@table @code
@item -c
Limpa a lista de histórico.   Isso pode ser combinado com as outras 
opções para substituir a lista de histórico completamente.

@item -d @var{offset}
Deleta a entrada de histórico na posição @var{offset}.
@var{offset} deveria ser especificado conforme aparece quando o 
histórico é exibido.

@item -a
Acrescenta ao final as novas linhas de histórico (linhas de histórico 
entradas desde o início da sessão atual de Bash) ao arquivo de 
histórico.

@item -n
Acrescenta as linhas de histórico ainda não lidas a partir do arquivo de 
histórico à atual lista de histórico.   Essas são linhas adicionadas ao 
arquivo de histórico desde o início da sessão atual de Bash.

@item -r
Lê o arquivo de histórico e adiciona seu conteúdo à lista de histórico.

@item -w
Escreve a atual lista de histórico ao arquivo de histórico.

@item -p
Realiza substituição de histórico sobre os @var{arg}s e exibe o 
resultado na saída padrão, sem armazenar os resultados na lista de 
histórico.

@item -s
Os @var{arg}s são adicionados ao final da lista de histórico como uma 
entrada única.

@end table

Quando qualquer das opções @option{-w}, @option{-r}, @option{-a}, ou 
@option{-n} é utilizada, se @var{filename} for dado, então ele é 
utilizado como o arquivo de histórico.   Se não, então o valor da 
variável @env{HISTFILE} é utilizada.

@end table
@end ifset

@node History Interaction
@section History Expansion
@cindex history expansion

A biblioteca History provê uma característica de expansão de histórico 
que é semelhante à expansão de histórico provida por @code{csh}.   Esta 
seção descreve a sintaxe utilizada para manipular a informação de 
histórico.

As expansões de histórico introduzem palavras originadas da lista de 
histórico no fluxo de entrada, tornando fácil repetir comandos, inserir 
os argumentos ao comando anterior na linha de entrada atual, ou corrigir 
erros em comandos anteriores rapidamente.

A expansão de histórico tem lugar em duas partes.   A primeira é para 
determinar qual linha a partir da lista de histórico deveria ser 
utilizada durante a substituição.   A segunda é selecionar porções 
daquela linha para inclusão na atual.   A linha selecionada a partir do 
histórico é chamada o @dfn{evento}, e as porções daquela linha sobre as 
quais se atua são chamadas @dfn{palavras}.   Vários @dfn{modificadores} 
estão disponíveis para manipular as palavras selecionadas.   A linha é 
quebrada em palavras no mesmo estilo que Bash faz, de forma que várias 
palavras envolvidas por aspas são consideradas uma palavra.
As expansões de histórico são introduzidas pela aparência do carácter de 
expansão de histórico, o qual é @samp{!} por padrão.
@ifset BashFeatures
Somente @samp{\} e @samp{'} podem ser utilizados para encapsular o 
carácter de expansão de histórico.
@end ifset

@ifset BashFeatures
Várias opções de shell configuráveis com o comando interno @code{shopt} 
(veja-se @ref{Bash Builtins}) podem ser utilizados para adaptar o 
comportamento da expansão de histórico.   Se a opção de shell 
@code{histverify} estiver habilitada, e Readline estiver sendo 
utilizada, então as substituições de histórico não são passadas 
imediatamente ao analisador do shell.
Em vez disso, a linha expandida é recarregada na área de memória 
intermediária de edição de Readline para modificações mais amplas.
Se Readline estiver sendo utilizada, e a opção de shell 
@code{histreedit} estiver habilitada, então uma expansão falha de 
histórico será recarregada na área de memória intermediária de edição de 
Readline para correção.

A opção @option{-p} ao comando interno @code{history} pode ser utilizada 
para se ver qual expansão de histórico fará antes de utilizá-la.
A opção @option{-s} ao comando interno @code{history} pode ser utilizada 
para adicionar comandos ao final da lista de histórico sem atualmente 
executá-los, de forma que eles estejam disponíveis para rechamadas 
subsequentes.
Isso é útil geralmente em conjunção com Readline.

O shell permite controle dos vários caracteres utilizados pelo mecanismo 
de expansão de histórico com a variável @code{histchars}, conforme 
explanado acima (veja-se @ref{Bash Variables}).   O shell utiliza o 
carácter de comentário de histórico para assinalar marcas temporais 
quando da escrita do arquivo de histórico.
@end ifset

@menu
* Event Designators::	Como especificar qual linha de histórico 
utilizar.
* Word Designators::	Especificando quais palavras são de interesse.
* Modifiers::		Modificando os resultados da substituição.
@end menu

@node Event Designators
@subsection Event Designators
@cindex event designators

Um designador de evento é uma referência a uma entrada de linha de 
comando na lista de histórico.
A menos que a referência seja absoluta, os eventos são relativos à 
posição atual na lista de histórico.
@cindex history events

@table @asis

@item @code{!}
@ifset BashFeatures
Inicia uma substituição de histórico, exceto quando seguida por um 
espaço, tab, o final da linha, @samp{=} ou @samp{(} (quando a opção de 
shell @code{extglob} estiver habilitada utilizando-se o comando interno 
@code{shopt}).
@end ifset
@ifclear BashFeatures
Inicia uma substituição de histórico, exceto quando seguida por um 
espaço, tab, o final da linha, ou @samp{=}.
@end ifclear

@item @code{!@var{n}}
Refere-se à linha de comando @var{n}.

@item @code{!-@var{n}}
Refere-se ao comando @var{n} linhas atrás.

@item @code{!!}
Refere-se ao comando prévio.   Isso é um sinônimo para @samp{!-1}.

@item @code{!@var{string}}
Refere-se ao comando mais recente precedente à posição atual na lista de 
histórico iniciando com @var{string}.

@item @code{!?@var{string}[?]}
Refere-se ao comando mais recente precedente à posição atual na lista de 
histórico contendo @var{string}.
O @samp{?} ao final pode ser omitido se a @var{string} for seguida 
imediatamente por um marcador newline.

@item @code{^@var{string1}^@var{string2}^}
Substituição rápida.   Repete o último comando, substituindo 
@var{string1} com @var{string2}.   Equivalente a 
@code{!!:s/@var{string1}/@var{string2}/}.

@item @code{!#}
A linha de comando inteira digitada longe.

@end table

@node Word Designators
@subsection Word Designators

Os designadores de palavra são utilizados para selecionar palavras 
desejadas a partir do evento.
Um @samp{:} separa a especificação de evento do designador de palavra. 
Pode ser omitido se o designador de palavra se inicia com um @samp{^}, 
@samp{$}, @samp{*}, @samp{-}, ou @samp{%}.   As palavras são numeradas a 
partir do inicio da linha, com a primeira palavra sendo denotada por 0 
(zero).   As palavras são inseridas na linha atual separadas por espaços 
únicos.

@need 0.75
Por exemplo,

@table @code
@item !!
designa o comando precedente.   Quando você digita isso, o comando 
precedente é repetido literalmente.

@item !!:$
designa o último argumento do comando precedente.   Isso pode ser 
abreviado para @code{!$}.

@item !fi:2
designa o segundo argumento do comando mais recente iniciando com as 
letras @code{fi}.
@end table

@need 0.75
Aqui estão os designadores de palavra:

@table @code

@item 0 (zero)
A @code{0}enésima palavra.   Para muitas aplicações, isso é a palavra do 
comando.

@item @var{n}
A @var{n}ésima palavra.

@item ^
O primeiro argumento; isto é, palavra 1.

@item $
O último argumento.

@item %
A palavra coincidida pela mais recente busca @samp{?@var{string}?}.

@item @var{x}-@var{y}
Um intervalo de palavras; @samp{-@var{y}} abrevia @samp{0-@var{y}}.

@item *
Todas as palavras, exceto a @code{0}enésima.   Isso é um sinônimo para 
@samp{1-$}.   É um erro utilizar @samp{*} se existir apenas uma palavra 
no evento; a sequência de caracteres vazia é retornada nesse caso.

@item @var{x}*
Abrevia @samp{@var{x}-$}

@item @var{x}-
Abrevia @samp{@var{x}-$} como @samp{@var{x}*}, porém omite a última 
palavra.

@end table

Se um designador de palavra for fornecido sem uma especificação de 
evento, então o comando prévio é utilizado como o evento.

@node Modifiers
@subsection Modifiers

Após o designador opcional de palavra, você pode adicionar uma sequência 
de um ou mais dos seguintes modificadores, cada um precedido por 
@samp{:}.

@table @code

@item h
Remove um componente final de nome de caminho, deixando somente a 
cabeça.

@item t
Remove todos os componentes finais de nome de caminho, deixando a cauda.

@item r
Remove um sufixo inicial da forma @samp{.@var{suffix}}, deixando o nome 
de base.

@item e
Remove tudo, menos o sufixo final.

@item p
Imprime o comando novo, porém não o executa.

@ifset BashFeatures
@item q
Encapsula as palavras substituídas, encapsulando substituições 
adicionais.

@item x
Encapsula as palavras substituídas como com @samp{q}, porém quebra em 
palavras nos espaços, tabs, e nos marcadores newline.
@end ifset

@item s/@var{old}/@var{new}/
Substitui @var{new} para a primeira ocorrência de @var{old} na linha de 
evento.   Qualquer delimitador pode ser utilizado no lugar de @samp{/}.
O delimitador pode ser encapsulado em @var{old} e @var{new} com uma 
barra invertida única.   Se @samp{&} aparece em @var{new}, então ele é 
substituído por @var{old}.   Uma barra invertida única encapsulará o 
@samp{&}.   O delimitador final é opcional se ele for o último carácter 
na linha de entrada.

@item &
Repete a substituição prévia.

@item g
@itemx a
Faz com que mudanças sejam aplicadas sobre a linha de evento inteira.
Utilizado em conjunção com @samp{s}, como em 
@code{gs/@var{old}/@var{new}/}, ou com @samp{&}.

@item G
Aplica o modificador @samp{s} seguinte uma vez a cada palavra no evento.

@end table

@ignore
Jamenson Ferreira Espindula de Almeida Melo
Usuário GNU/Linux nº 166197
https://linuxcounter.net/cert/166197.png

Impressão digital da chave:
234D 1914 4224 7C53 BD13  6855 2AE0 25C0 08A8 6180
@end ignore


