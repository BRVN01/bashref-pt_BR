@comment %**start of header (This is for running Texinfo on a region.)
@setfilename rluser-pt_BR.info
@comment %**end of header (This is for running Texinfo on a region.)

@ignore
Este arquivo documenta a interface de usuário final para as 
características de edição de linha de comando da GNU.   Ele é para ser 
um apêndice a manuais para programas os quais utilizam estas 
características.   Existe um documento intitulado "readline.texinfo" o 
qual contém ambas as documentações para usuário final e programador para 
a biblioteca GNU Readline.

Direitos autorais @copyright{} 2015 da versão modificada traduzida para 
o português do Brasil: Jamenson Ferreira Espindula de Almeida Melo.

Direitos autorais @copyright{} 1988--2014 Free Software Foundation, Inc.

Da autoria de Brian Fox e Chet Ramey.

É dada permissão para processar este arquivo por meio de Tex e imprimir 
o resultado, contanto que o documento impresso carregue uma notícia de 
permissão de cópia idêntica a esta, exceto pela remoção deste parágrafo 
(este parágrafo não sendo relevante para o manual impresso).

É dada permissão para produzir e distribuir cópias literais deste 
manual, contanto que a notícia de direitos autorais e esta notícia de 
permissão sejam preservadas em todas as cópias.

É dada permissão para copiar e distribuir versões modificadas deste 
manual sob as condições para cópias literais, contanto também que a 
declaração de Direitos Autorais GNU esteja disponível para o 
distribuidor, e contanto que o trabalho derivado resultante inteiro seja 
distribuído sob os termos de uma notícia de permissão idêntica a esta.

É dada permissão para copiar e distribuir traduções deste manual em 
outra língua, sob as condições acima para versões modificadas.
@end ignore

@comment If you are including this manual as an appendix, then set the
@comment variable readline-appendix.

@ifclear BashFeatures
@defcodeindex bt
@end ifclear

@node Command Line Editing
@chapter Command Line Editing

Este capítulo descreve as características básicas da interface de edição 
de linha de comando @sc{gnu}.
@ifset BashFeatures
A edição de linha de comando é provida pela biblioteca Readline, a qual 
é utilizada por vários programas diferentes, incluindo Bash.
A edição de linha de comando está habilitada por padrão quando da 
utilização de um shell interativo, a menos que a opção 
@option{--noediting} seja fornecida na invocação de shell.
A edição de linha também é utilizada quando da utilização da opção 
@option{-e} para o comando interno @code{read} 
(veja-se @ref{Bash Builtins}).
Por padrão, os comandos de edição de linha são similares àqueles de 
Emacs.
Uma interface de edição de linha ao estilo do vi também está disponível.
A edição de linha pode ser habilitada a qualquer tempo utilizando-se as 
opções @option{-o emacs} ou @option{-o vi} para o comando interno 
@code{set} (veja-se @ref{The Set Builtin}), ou desabilitadas 
utilizando-se as opções @option{+o emacs} ou @option{+o vi} para 
@code{set}.
@end ifset

@menu
* Introduction and Notation::	Notação utilizada neste texto.
* Readline Interaction::	O conjunto minimo de comandos para se 
				editar uma linha.
* Readline Init File::		Personalizando Readine a partir da visão 
				do usuário.
* Bindable Readline Commands::	Uma descrição da maioria dos comandos de 
				Readline disponíveis para vinculação.
* Readline vi Mode::		Uma descrição curta de como fazer com 
				que Readline se comporte como o editor 
				vi.
@ifset BashFeatures
* Programmable Completion::	Como especificar as completações 
				possíveis para um comando específico.
* Programmable Completion Builtins::	Comandos internos para 
					especificar como completar 
					argumentos para um comando 
					particular.
* A Programmable Completion Example::	Uma função de shell exemplo para 
					gerar possíveis completações.
@end ifset
@end menu

@node Introduction and Notation
@section Introduction to Line Editing

Os parágrafos seguintes descrevem a notação utilizada para representar 
toques de tecla.

O texto @kbd{C-k} é lido como `Control-K' e descreve o carácter 
produzido quando a tecla @key{k} é teclada enquanto a tecla Control 
está mantida pressionada.

O texto @kbd{M-k} é lido como `Meta-K' e descreve o carácter produzido 
quando a tecla Meta (se você tiver uma) é mantida pressionada, e a tecla 
@key{k} é teclada.
A tecla Meta é rotulada como @key{ALT} em muitos teclados.
Em teclados com duas tecladas rotuladas como @key{ALT} (usualmente em 
ambos os lados da barra de espaços), o @key{ALT} no lado esquerdo é 
geralmente configurado para funcionar como uma tecla Meta.
A tecla @key{ALT} na direita também pode ser configurada para funcionar 
como uma tecla Meta ou pode ser configurada como algum outro 
modificador, tal como uma tecla Compose para a digitação de caracteres 
acentuados.

Se você não tiver uma tecla Meta ou @key{ALT}, ou outra tecla 
funcionando como uma tecla Meta, o pressionamento de tecla idêntico pode 
ser gerado digitando-se @key{ESC} @emph{primeiro}, e então digitando 
@key{k}.
Qualquer dos processos é conhecido como @dfn{metafying} a tecla @key{k}.

O texto @kbd{M-C-k} é lido como `Meta-Control-k' e descreve o carácter 
produzido por @dfn{metafying} @kbd{C-k}.

Adicionalmente, várias teclas tem seus próprios nomes.   
Especificamente, @key{DEL}, @key{ESC}, @key{LFD}, @key{SPC}, @key{RET}, 
e @key{TAB} todas significam elas mesmas quando vistas neste texto, ou 
em um arquivo init (veja-se @ref{Readline Init File}).
Se no seu teclado falta uma tecla @key{LFD}, a digitação de @key{C-j} 
produzirá o carácter desejado.
A tecla @key{RET} pode ser rotulada como @key{Return} ou @key{Enter} em 
alguns teclados.

@node Readline Interaction
@section Readline Interaction
@cindex interaction, readline

Frequentemente, durante uma sessão interativa, você digita uma linha 
longa de texto, apenas para se dar conta de que a primeira palavra 
naquela linha está escrita errada.   A biblioteca Readline te dá um 
conjunto de comandos para manipular o texto a medida que você o digita, 
te permitindo simplesmente consertar seu erro, e não te forçando a 
redigitar a maioria da linha.   Utilizando esses comandos de edição, 
você movimenta o cursor para o local que necessita de correção, e deleta 
ou insere o texto das correções.   Então, que você estiver satisfeito 
com a linha, você simplesmente pressiona @key{RET}.   Você não precisa 
estar ao final da linha para pressionar @key{RET}.; a linha inteira é 
aceita independentemente da localização do cursor dentro da linha.

@menu
* Readline Bare Essentials::	O mínimo que você precisa saber sobre 
				Readline.
* Readline Movement Commands::	Movimentando-se ao longo da linha de 
				entrada.
* Readline Killing Commands::	Como deletar texto, e como resgatá-lo.
* Readline Arguments::		Dando argumentos numéricos a comandos.
* Searching::			Procurando ao longo das linhas 
				anteriores.
@end menu

@node Readline Bare Essentials
@subsection Readline Bare Essentials
@cindex notation, readline
@cindex command editing
@cindex editing command lines

Para colocar caracteres em uma linha, simplesmente digite-os.   O 
carácter digitado aparece onde o cursor estava, e então o cursor se 
movimenta um espaço para a direita.   Se você errar a digitação de um 
carácter, você pode utilizar o seu carácter de apagamento para voltar e 
deletar o carácter digitado errado.

Algumas vezes você pode digitar um carácter errado, e não se dar conta 
do erro até que você tenha digitado vários outros caracteres.   Nesse 
caso, você pode digitar @kbd{C-b} para movimentar o cursor para a 
esquerda, e então corrigir seu erro.   Posteriormente, você pode mover o 
cursor para a direita com @kbd{C-f}.

Quando você adiciona texto no meio de uma linha, você notará que os 
caracteres do lado direito do cursor são "empurrados" para dar espaço 
para o texto que você acabou de inserir.   Da mesma maneira, quando você 
deleta texto sob o cursor, os caracteres do lado direito do cursor são 
"puxados" para preencher o espaço em braco criado pela remoção do texto.
Segue uma lista do essencial para a edição do texto de uma linha de 
entrada.

@table @asis
@item @kbd{C-b}
Movimenta um carácter para trás.
@item @kbd{C-f}
Movimenta um carácter para frente.
@item @key{DEL} ou @key{Backspace}
Apaga o carácter a esquerda do cursor.
@item @kbd{C-d}
Apaga o carácter embaixo do cursor.
@item @w{Printing characters}
Insere o carácter na linha na posição do cursor.
@item @kbd{C-_} ou @kbd{C-x C-u}
Desfaz o comando de edição mais recente.   Você pode desfazer todo o 
comando até uma linha vazia.
@end table

@noindent
(Dependendo da sua configuração, a tecla @key{Backspace} está 
configurada para apagar o carácter a esquerda do cursor e a tecla 
@key{DEL} configurada para apagar o carácter embaixo do cursor, como 
@kbd{C-d}, em vez do carácter a esquerda do cursor).

@node Readline Movement Commands
@subsection Readline Movement Commands


A tabela acima descreve os toques mais básicos que você precisa com o 
objetivo de editar a linha de entrada.   Para a sua conveniência, muitos 
outros comandos foram adicionados juntamente a @kbd{C-b}, @kbd{C-f}, 
@kbd{C-d}, e @key{DEL}.   Aqui estão alguns comandos para movimentar-se 
mais rapidamente ao longo da linha.

@table @kbd
@item C-a
Movimenta para o início da linha.
@item C-e
Movimenta para o final da linha.
@item M-f
Movimenta uma palavra para frente, onde uma palavra é composta de letras 
e dígitos.
@item M-b
Movimenta uma palavra para trás.
@item C-l
Limpa a tela, reimprimindo a linha atual no topo.
@end table

Perceba como @kbd{C-f} movimenta o cursor um carácter para frente, 
enquanto que @kbd{M-f} movimenta o cursor uma palavra para frente.   É 
uma convenção não escrita que o pressionamento de teclas de controle 
opera sobre caracteres enquanto que o pressionamento de tecla meta opera 
sobre palavras.

@node Readline Killing Commands
@subsection Readline Killing Commands

@cindex killing text
@cindex yanking text

@dfn{Killing} texto significa retirar o texto da linha, porém 
salvá-lo fora para uso posterior, usualmente com @dfn{yanking} 
(re-inserir) o texto de volta na linha.
("Recortar" e "colar" são jargão mais recente para `kill' e `yank').

Se a descrição para um comando diz que ele `kills' texto, então você 
pode ter certeza que você pode ter o texto de volta em um local 
diferente (ou o mesmo) depois.

Quando você utiliza um comando kill, o texto é salvo em um 
@dfn{kill-ring}.   Qualquer número de kills consecutivos salva todo o 
texto killed junto, de forma que quando você yank o texto de volta, você 
obtém o texto todo.   O "kill ring" não é específico de linha; o texto 
que você "matou" em uma linha digitada previamente está disponível para 
ser "arrancado" de volta mais tarde, quando você estiver digitando outra 
linha.
@cindex kill ring

Aqui está a lista de comandos para matar "killing" texto.

@table @kbd
@item C-k
Mata o texto a partir da posição atual do cursor até o final da linha.

@item M-d
Mata a partir do cursor até o final da palavra atual, ou, se entre 
palavras, até o final da próxima palavra.
Os limites de palavra são os mesmos que aqueles utilizados por 
@kbd{M-f}.

@item M-@key{DEL}
Mata a partir do cursor o início da palavra atual, ou, se entre 
palavras, até o início da palavra anterior.
Os limites de palavra são os mesmos que aqueles utilizados por 
@kbd{M-b}.

@item C-w
Mata a partir do cursor até o espaço em braco anterior.   Isso é 
diferente de @kbd{M-@key{DEL}}, pois os limites de palavra diferem.

@end table

Aqui está como "arrancar" (@dfn{yank}) o texto de volta para a linha.
Yanking significa copiar o texto mais recentemente "killed" a partir da 
área intermediária de memória "kill".

@table @kbd
@item C-y
"Yank" o texto mais recentemente "killed" de volta na área intermediária 
de memória no cursor.

@item M-y
Rotaciona o "kill-ring", e "yank" o novo topo.   Você somente pode fazer 
isso se o comando anterior for @kbd{C-y} ou @kbd{M-y}.
@end table

@node Readline Arguments
@subsection Readline Arguments

Você pode passar argumentos numéricos aos comandos Readline.   Algumas 
vezes o argumento atua como um contador de repetição, outras é o 
@i{sinal} do argumento que é significante.   Se você passar um argumento 
negativo para um comando o qual normalmente atua na direção para frente, 
então esse comando atuará na direção para trás.   Por exemplo, para 
"kill" texto de volta para o começo da linha, você pode digitar 
@samp{M-- C-k}.

A maneira geral de passar argumentos numéricos para um comando é digitar 
meta dígitos antes do comando.   Se o primeiro "dígito" digitado for um 
sinal de menos (@samp{-}), então o sinal do argumento será negativo.   
Uma vez que você tenha digitado um meta dígito para iniciar o argumento, 
você pode digitar o restante dos dígitos, e então o comando.   Por 
exemplo, para dar o argumento 10 para o comando @kbd{C-d}, você poderia 
digitar @samp{M-1 0 C-d},, o qual deletaria os próximos dez caracteres 
na linha de entrada.

@node Searching
@subsection Searching for Commands in the History

Readline provê comandos para a busca ao longo do histórico de comando
@ifset BashFeatures
(veja-se @ref{Bash History Facilities})
@end ifset
por linhas contendo a sequência de caracteres especificada.
Existem dois modos @dfn{incremental} e @dfn{não-incremental}.

As buscas incrementais iniciam antes que o usuário tenha finalizado a 
digitação da sequência de caracteres de busca.
A medida que cada carácter da sequência de caracteres de busca é 
digitado, Readline exibe a próxima entrada a partir do histórico que 
coincida com a sequência de caracteres digitada até agora.
Uma busca incremental exige apenas tantos caracteres quantos necessários 
para encontrar a entrada de histórico desejada.
Para pesquisar por uma sequência de caracteres particular para trás no 
histórico, digite @kbd{C-r}.   Digitando-se @kbd{C-s} pesquisa-se para 
frente no histórico.
Os caracteres presentes no valor da variável @code{isearch-terminators} 
são utilizados para terminar um pesquisa incremental.
Se a essa variável não foi atribuído um valor, então os caracteres 
@key{ESC} e @kbd{C-J} terminarão uma pesquisa incremental.
@kbd{C-g} abortará uma pesquisa incremental e restaurará a linha 
original.
Quando a pesquisa é terminada, a entrada de histórico contendo a 
sequência de caracteres de busca se torna a linha atual.

Para encontrar outras entradas coincidentes na lista de histórico, 
digite @kbd{C-r} ou @kbd{C-s}, conforme apropriado.
Isso pesquisará para trás ou para frente no histórico pela próxima 
entrada que coincida com a sequência de caracteres de pesquisa digitada 
até agora.
Qualquer outras sequência de tecla vinculada a um comando Readline 
terminará a pesquisa e executará aquele comando.
Por exemplo, um @key{RET} (enter) terminará a pesquisa e aceitará a 
linha, por conseguinte executando o comando a partir da lista de 
histórico.
Um comando de movimento terminará a pesquisa, tornará a última linha 
encontrada a linha atual, e iniciar a edição.

Readline se lembra da última sequência de caracteres de pesquisa 
incremental.   Se dois @kbd{C-r}s forem digitados sem quaisquer 
caracteres intervenientes que definam uma nova sequência de caracteres 
de busca, então qualquer sequência de caracteres de busca guardada é 
utilizada.

As buscas não incrementais leem a sequência de caracteres de pesquisa 
inteira antes de iniciar a busca por linhas de histórico coincidentes.
A sequência de caracteres de busca pode ser digitada pelo usuário ou ser 
parte do conteúdo da linha atual.

@node Readline Init File
@section Readline Init File
@cindex initialization file, readline

Apesar que a biblioteca Readline vem com um conjunto de vínculos de 
tecla estilo Emacs instalado por padrão, é possível se utilizar um 
conjunto diferente de vínculos de tecla.
Qualquer usuário pode personalizar programas que utilizem Readline 
colocando comandos em um arquivo @dfn{inputrc}, convencionalmente dentro 
de seu diretório "home".
O nome desse
@ifset BashFeatures
arquivo é tomado do valor da variável de shell @env{INPUTRC}.   Se
@end ifset
@ifclear BashFeatures
file is taken from the value of the environment variable @env{INPUTRC}.  If
@end ifclear
essa variável estiver desconfigurada, então o padrão é @file{~/.inputrc}.
Se esse arquivo não existir ou não puder ser lido, então o padrão final 
é @file{/etc/inputrc}.

Quando um programa que utiliza a biblioteca Readline inicializa, o 
arquivo init é lido, e as vinculações de tecla são configuradas.

Adicionalmente, o comando @code{C-x C-r} relê esse arquivo init, assim 
incorporando quaisquer modificações que você eventualmente possa ter 
feito nele.

@menu
* Readline Init File Syntax::	Sintaxe para os comandos no arquivo 
				inputrc.
* Conditional Init Constructs::	Vinculações de tecla condicionais no 
				arquivo inputrc.
* Sample Init File::		Um arquivo inputrc de exemplo.
@end menu

@node Readline Init File Syntax
@subsection Readline Init File Syntax

Existem somente umas poucas construções básicas permitidas no arquivo 
init de Readline.   As linhas em branco são ignoradas.
As linhas iniciando com um @samp{#} são comentários.
As linhas começando com um @samp{$} indicam construções condicionais 
(veja-se @ref{Conditional Init Constructs}).   Outras linhas denotam 
configurações de variáveis e vinculações de teclas.

@table @asis
@item Configurações de Variáveis

Você pode modificar o comportamento em tempo de execução de Readline 
alterando os valores de variáveis em Readline utilizando o comando 
@code{set} dentro do arquivo init.
A sintaxe é simples:

@example
set @var{variable} @var{value}
@end example

@noindent
Aqui, por exemplo, está como alternar da vinculação padrão de tecla 
estilo Emacs para utilizar comandos de edição de linha @code{vi}:

@example
set editing-mode vi
@end example

Os nomes de variáveis e valores, onde apropriado, são reconhecidos sem 
levar em consideração maiúsculas e minúsculas.   Os nomes de variável 
não reconhecidos são ignorados.

As variáveis booleanas (aquelas que podem ser configuradas para ligada 
ou desligada) são configuradas para ligada se o valor for nulo ou vazio, 
@var{on} (sem levar em consideração maiúsculas e minúsculas), ou 1.
Qualquer outro valor resulta na variável sendo configurada para 
desligada.

@ifset BashFeatures
O comando @w{@code{bind -V}} lista os nomes e valores atuais da variável 
Readline.   Veja-se @ref{Bash Builtins}.
@end ifset

Uma grande parte do comportamento em tempo de execução é modificável com 
as seguintes variáveis.

@cindex variables, readline
@table @code

@item bell-style
@vindex bell-style
Controla o que acontece quando Readline deseja soar o alerta sonoro do 
terminal.
Se configurado para @samp{none}, então Readline nunca soa o alerta.   Se 
configurada para @samp{visible}, então Readline utiliza um alerta 
visível se um estiver disponível.   Se configurado para @samp{audible} 
(o padrão), Readline tenta soar o alerta sonoro do terminal.

@item bind-tty-special-chars
@vindex bind-tty-special-chars
Se configurado para @samp{on}, Readline tenta vincular os caracteres de 
controle tratados especialmente pelo controlador de terminal do kernel 
para o equivalente Readline deles.

@item colored-stats
@vindex colored-stats
Se configurado para @samp{on}, Readline exibe as completações possíveis 
utilizando cores diferentes para indicar o tipo de arquivo delas.
As definições de cor são tomadas do valor da variável de ambiente 
@env{LS_COLORS}.
O padrão é @samp{off}.

@item comment-begin
@vindex comment-begin
A sequência de caracteres a inserir no inicio da linha quando o comando 
@code{insert-comment} for executado.   O valor padrão é @code{"#"}.

@item completion-display-width
@vindex completion-display-width
O número de colunas de tela utilizado para exibir possíveis 
coincidências quando da realização de completação.
O valor é ignorado se for menor que 0 ou maior que a largura de tela do 
terminal.
Um valor de 0 fará com que coincidências sejam exibidas uma por linha.
O valor pré-definido é -1.

@item completion-ignore-case
@vindex completion-ignore-case
Se configurado para @samp{on}, Readline realiza coincidência de nome de 
arquivo e completação em uma forma que não leva em consideração 
maiúsculas e minúsculas.
O valor pré-definido é @samp{off}.

@item completion-map-case
@vindex completion-map-case
Se configurado para @samp{on}, e @var{completion-ignore-case} estiver 
habilitada, então Readline trata hifens (@samp{-}) e sublinhados 
(@samp{_}) como equivalentes, quando da realização de coincidência e 
completação, sem levar em consideração maiúsculas e minúsculas, de nome 
de arquivo.

@item completion-prefix-display-length
@vindex completion-prefix-display-length
O comprimento em caracteres do prefixo comum de uma lista de 
completações possíveis que é exibida sem modificação.   Quando 
configurado para um valor maior que zero, os prefixos comuns maiores que 
esse valor são substituídos com uma elipse, quando da exibição de 
completações possíveis.

@item completion-query-items
@vindex completion-query-items
O número das completações possíveis que determina quando o usuário é 
questionado se a lista de possibilidades deveria ser exibida.
Se o número de completações possíveis for maior que esse valor, então 
Readline perguntará ao usuário se ou não deseja visualizá-las; do 
contrário, elas simplesmente são listadas.
Essa variável deve necessariamente ser configurada para um número 
inteiro maior que ou igual a 0.
Um valor negativo significa que Readline nunca deveria perguntar.
O limite pré-definido é @code{100}.

@item convert-meta
@vindex convert-meta
Se configurado para @samp{on}, então Readline converterá caracteres com 
o oitavo bit ligado para uma sequência de tecla @sc{ascii}, descartando 
o oitavo bit e prefixando um carácter @key{ESC}, convertendo-os para um 
sequência de tecla meta-prefixada.   O valor pré-definido é @samp{on}.

@item disable-completion
@vindex disable-completion
Se configurado para @samp{On}, Readline inibirá a completação de 
palavra.   Os caracteres de completação será inseridos na linha como se 
tivessem sido mapeados para @code{self-insert}.
O valor pré-definido é @samp{off}.

@item editing-mode
@vindex editing-mode
A variável @code{editing-mode} controla qual conjunto pré-definido de 
vinculações de tecla é utilizado.   Por predefinição, Readline 
inicializa no modo de edição Emacs, onde os toques de tecla são mais 
similares ao Emacs.   Essa variável pode ser configurada para ou 
@samp{emacs} ou @samp{vi}.

@item echo-control-characters
Quando configurado para @samp{on}, em sistemas operacionais que indicam 
que os suportam, Readline ecoa um carácter correspondente a um sinal 
gerado a partir do teclado.   O valor pré-definido é @samp{on}.

@item enable-keypad
@vindex enable-keypad
Quando configurado para @samp{on}, Readline tentará habilitar o teclado 
numérico da aplicação quando ele for chamado.   Alguns sistemas 
necessitam disso para habilitar as teclas direcionais.
O valor pré-definido é @samp{off}.

@item enable-meta-key
Quando configurado para @samp{on}, Readline tentará habilitar qualquer 
tecla meta modificadora que o terminal alegue suportar, quando for 
chamado.   Em muitos terminais, a tecla meta é utilizada para enviar 
caracteres de oito bits.
O valor pré-definido é @samp{on}.

@item expand-tilde
@vindex expand-tilde
Se configurado para @samp{on}, a expansão de til é realizada quando 
Readline tenta a completação de palavra.   O valor pré-definido é 
@samp{off}.

@item history-preserve-point
@vindex history-preserve-point
Se configurado para @samp{on}, o código de histórico tenta colocar o 
ponto (a posição atual do cursor) na mesma localização em cada linha de 
histórico recuperada com @code{previous-history} ou @code{next-history}.
O valor pré-definido é @samp{off}.

@item history-size
@vindex history-size
Configura o número máximo de entradas de histórico salvas na lista de 
histórico.   Se configurada para zero, então quaisquer entradas de 
histórico existentes são deletadas e nenhuma entrada nova é salva.
Se configurada para um valor menor que zero, então o número de entradas 
de histórico não é limitada.
Por predefinição, o número de entradas de histórico não é limitada.

@item horizontal-scroll-mode
@vindex horizontal-scroll-mode
Essa variável pode ser configurada para ou @samp{on} ou @samp{off}.
A configuração dela para @samp{on} significa que o texto das linhas 
sendo editadas passará na tela horizontalmente em uma única linha de 
tela quando forem maiores que a largura da tela, em vez de 
acondicioná-lo em uma nova linha de tela.   Por predefinição, essa 
variável é configurada para @samp{off}.

@item input-meta
@vindex input-meta
@vindex meta-flag
Se configurado para @samp{on}, Readline habilitará a entrada de oito 
bits (não limpará o oitavo bit nos caracteres que lê), independentemente 
do que o terminal alega que pode suportar.   O valor pré-definido é 
@samp{off}.   O nome @code{meta-flag} é um sinônimo para essa variável.

@item isearch-terminators
@vindex isearch-terminators
A sequência de caracteres dos caracteres que deveriam terminar uma 
pesquisa incremental sem executar subsequentemente o carácter como um 
comando (veja-se @ref{Searching}).
Se a essa variável não tiver sido dado um valor, então os caracteres 
@key{ESC} e @kbd{C-J} terminarão uma pesquisa incremental.

@item keymap
@vindex keymap
Configura a ideia de Readline acerca do mapa de teclas atual para os 
comandos de vinculação de tecla.
Os nomes aceitáveis de @code{keymap} são
@code{emacs},
@code{emacs-standard},
@code{emacs-meta},
@code{emacs-ctlx},
@code{vi},
@code{vi-move},
@code{vi-command}, e
@code{vi-insert}.
@code{vi} é equivalente a @code{vi-command}; @code{emacs} é equivalente 
a @code{emacs-standard}.   O valor pré-definido é @code{emacs}.
O valor da variável @code{editing-mode} também afeta o mapa de teclas 
pré-definido.

@item keyseq-timeout
Especifica a duração que Readline aguardará por um carácter quando da 
leitura de uma sequência de tecla ambigua (aquela que pode formar uma 
sequência de tecla completa utilizando a entrada lida até agora, ou pode 
tomar entrada adicional para completar uma sequência de tecla mais 
longa).
Se nenhuma entrada é recebida dentro do intervalo de tempo, então 
Readline utilizará a sequência de tecla mais curta, porém completa.
Readline utiliza esse valor para determinar quando ou não a entrada está 
disponível na fonte atual de entrada (por 
pré-definição @code{rl_instream}).
O valor é especificado em milisegundos, de forma que um valor de 1000 
significa que Readline aguardará um segundo por entrada adicional.
Se essa variável não estiver configurada para um valor menor que ou 
igual a zero, ou para um valor não numérico, então Readline aguardará 
até que outra tecla seja pressionada para decidir qual sequência de 
tecla completar.
O valor pré-definido é @code{500}.

@item mark-directories
Se configurado para @samp{on}, então os nomes completados de diretórios 
terão uma barra acrescentada. O valor pré-definido é @samp{on}.

@item mark-modified-lines
@vindex mark-modified-lines
Essa variável, quando configurada para @samp{on}, faz com que Readline 
exiba um asterisco (@samp{*}) no inicio de linhas de histórico que 
tenham sido modificadas.
Essa variável está @samp{off} por pré-definição.

@item mark-symlinked-directories
@vindex mark-symlinked-directories
Se configurada para @samp{on}, então os nomes completados que sejam 
vinculos simbólicos para diretórios terão uma barra acrescentada 
(sujeita ao valor de @code{mark-directories}).
O valor pré-definido é @samp{off}.

@item match-hidden-files
@vindex match-hidden-files
Essa variável, quando configurada para @samp{on}, faz com que Readline 
coincida arquivos cujos nomes iniciem com um @samp{.} (arquivos ocultos) 
quando da realização de completação de nome de arquivo.
Se configurada para @samp{off}, então o @samp{.} inicial deve 
necessariamente ser fornecido pelo usuário no nome de arquivo para ser 
completado.
Essa variável está @samp{on} por pré-definição.

@item menu-complete-display-prefix
@vindex menu-complete-display-prefix
Se configurada para @samp{on}, então a completação de menu exibe o 
prefixo comum da lista de possíveis completações (as quais podem estar 
vazias) antes de circular ao longo da lista.   O valor pré-definido é 
@samp{off}.

@item output-meta
@vindex output-meta
Se configurada para @samp{on}, então Readline exibirá caracteres com o 
oitavo bit configurado diretamente, em vez de uma sequência de escape 
meta prefixada.   O valor pré-definido é @samp{off}.

@item page-completions
@vindex page-completions
Se configurada para @samp{on}, então Readline utiliza um paginador 
interno estilo @code{more} para exibir uma tela completa de possiveis 
completações por vez.
Essa variável está @samp{on} por pré-definição.

@item print-completions-horizontally
Se configurada para @samp{on}, então Readline exibirá as completações 
com as coincidências ordenadas horizontalmente em ordem alfabética, em 
vez de o fazer tela abaixo.
O valor pré-definido é @samp{off}.

@item revert-all-at-newline
@vindex revert-all-at-newline
Se configurada para @samp{on}, então Readline desfazerá todas as 
modificações para as linhas de histórico antes do retorno quando 
@code{accept-line} for executada.   Por pré-definição, as linhas de 
histórico podem ser modificadas e reter listas individuais de desfazer 
entre chamadas a @code{readline}.   O valor pré-definido é @samp{off}.

@item show-all-if-ambiguous
@vindex show-all-if-ambiguous
Isso altera o comportamento pré-definido das funções de completação.
Se configurada para @samp{on}, então as palavras as quais tenham mais 
que uma completação possivel fazem com que as coincidências sejam 
listadas imediatamente, em vez de soar o alarme sonoro.
O valor pré-definido é @samp{off}.

@item show-all-if-unmodified
@vindex show-all-if-unmodified
Isso altera o comportamento pré-definido das funções de completação de 
uma maneira similar a @var{show-all-if-ambiguous}.
Se configurada para @samp{on}, então as palavras as quais tenham mais 
que uma completação possivel sem qualquer possivel completação parcial 
(as completações possiveis não compartilham um prefixo comum) fazem com 
que as coincidências sejam listadas imediatamente, em vez de soar o 
alarme sonoro.
O valor pré-definido é @samp{off}.

@item show-mode-in-prompt
@vindex show-mode-in-prompt
Se configurado para @samp{on}, então adiciona um carácter ao inicio do 
prompt, indicando o modo de edição: emacs (@samp{@@}); comando vi 
(@samp{:}); ou inserção vi (@samp{+}).
O valor pré-definido é @samp{off}.

@item skip-completed-text
@vindex skip-completed-text
Se configurada para @samp{on}, então isso altera o comportamento 
pré-definido de completação quando da inserção, na linha, de uma 
coincidência única.   Essa facilidade está ativa somente quando da 
realização de completação no meio de uma palavra.   Se habilitada, 
Readline não insere caracteres a partir da completação que coincidam com 
caracteres após o ponto na palavra sendo completada, de forma que as 
porções da palavra seguintes ao cursor não são duplicadas.
Por exemplo, se habilitada, a tentativa de completação quando o cursor 
estiver após o @samp{e} em @samp{Makefile} resultará em @samp{Makefile}, 
em vez de @samp{Makefilefile}, presumindo que exista uma única 
completação possivel.
O valor pré-definido é @samp{off}.

@item visible-stats
@vindex visible-stats
Se configurada para @samp{on}, então um carácter denotando um tipo do 
arquivo é acrescentado ao nome do arquivo, quando da listagem das 
completações possiveis.   O valor pré-definido é @samp{off}.

@end table

@item Key Bindings
A sintaxe para controle das vinculações de tecla no arquivo init é 
simples.   Primeiro, você precisa encontrar o nome do comando que você 
deseja modificar.   As seções seguintes contém tabelas de nome de 
comando, a vinculação padrão, se existente, e uma breve descrição do que 
o comando faz.

Uma vez que você saiba o nome do comando, simplesmente coloque em uma 
linha no arquivo init o nome da tecla a qual você deseja vincular o 
comando, uma vírgula, e então o nome do comando.
Não pode existir espaço em branco entre o nome da tecla e a vírgula -- 
isso será interpretado como sendo parte do nome da tecla.
O nome da tecla pode ser expresso em diferentes maneiras, dependendo do 
que você acha mais confortável.

Adicionalmente a nomes de comando, Readline permite que teclas sejam 
vinculadas a uma sequência de caracteres que é inserida quando a tecla 
for pressionada (uma @var{macro}).

@ifset BashFeatures
O comando @w{@code{bind -p}} exibe nomes de função Readline e 
vinculações em um formato que pode ser colocado diretamente em um 
arquivo de inicialização.
veja-se @ref{Bash Builtins}.
@end ifset

@table @asis
@item @w{@var{keyname}: @var{function-name} or @var{macro}}
@var{keyname} é o nome de uma tecla escrito em Inglês.   Por exemplo:
@example
Control-u: universal-argument
Meta-Rubout: backward-kill-word
Control-o: "> output"
@end example

No exemplo acima, @kbd{C-u} é vinculada à função 
@code{universal-argument}, @kbd{M-DEL} é vinculada à função 
@code{backward-kill-word}, e @kbd{C-o} é vinculada para executar a 
macro expressa no lado direito (isto é, para inserir o texto 
@samp{> output} na linha).

Um número de nomes simbólicos de caracteres são reconhecidos quando do 
processamento dessa sintaxe de vinculação de tecla:
@var{DEL},
@var{ESC},
@var{ESCAPE},
@var{LFD},
@var{NEWLINE},
@var{RET},
@var{RETURN},
@var{RUBOUT},
@var{SPACE},
@var{SPC},
and
@var{TAB}.

@item @w{"@var{keyseq}": @var{function-name} or @var{macro}}
@var{keyseq} se difere de @var{keyname} acima na medida em que 
sequências de caracteres que denotam uma sequência de tecla inteira 
podem ser especificadas, colocando-se a sequência de tecla entre aspas 
duplas.   Alguns escapes de tecla estilo @sc{gnu} Emacs podem ser 
utilizados, como no seguinte exemplo, porém os nomes especiais de 
caracteres não são reconhecidos.

@example
"\C-u": universal-argument
"\C-x\C-r": re-read-init-file
"\e[11~": "Function Key 1"
@end example

No exemplo acima, @kbd{C-u} é novamente vinculada à função 
@code{universal-argument} (da mesma forma que o foi no primeiro 
exemplo), @samp{@kbd{C-x} @kbd{C-r}} é vinculada à função 
@code{re-read-init-file}, e @samp{@key{ESC} @key{[} @key{1} @key{1} 
@key{~}} é vinculada para inserir o texto @samp{Function Key 1}.

@end table

As seguintes sequências de escape estilo @sc{gnu} Emacs estão 
disponíveis quando da especificação de sequência de tecla:

@table @code
@item @kbd{\C-}
prefixo control
@item @kbd{\M-}
prefixo meta
@item @kbd{\e}
um carácter de escape
@item @kbd{\\}
barra invertida
@item @kbd{\"}
@key{"}, uma marca de aspa dupla
@item @kbd{\'}
@key{'}, uma aspa simples ou apóstrofo
@end table

Adicionalmente às sequências de escape estilo @sc{gnu} Emacs, um segundo 
conjunto de escapes de barra invertida está disponível:

@table @code
@item \a
alerta sonoro (sino)
@item \b
backspace
@item \d
delete
@item \f
alimentar formulário
@item \n
nova linha
@item \r
retorno de carro
@item \t
tab horizontal
@item \v
tab vertical
@item \@var{nnn}
o carácter de oito bits cujo valor é o valor octal @var{nnn} (um a três 
dígitos)
@item \x@var{HH}
o carácter de oito bit cujo valor é o valor hexadecimal @var{HH} (um ou 
dois dígitos hexadecimais)
@end table

Quando da entrada de texto de uma macro, aspas siples ou duplas devem 
necessariamente ser utilizadas para indicar uma definição de macro.
Texto sem aspas é presumido que seja um nome de função.
No corpo da macro, os escapes de barra invertida descritos acima são 
expandidos.
Barra invertida encapsulará qualquer outro carácter no texto da macro, 
incluindo @samp{"} e @samp{'}.
Por exemplo, o seguinte vinculamento fará com que @samp{@kbd{C-x} \} 
insira uma única @samp{\} na linha:
@example
"\C-x\\": "\\"
@end example

@end table

@node Conditional Init Constructs
@subsection Conditional Init Constructs

Readline implements a facility similar in spirit to the conditional
compilation features of the C preprocessor which allows key
bindings and variable settings to be performed as the result
of tests.  There are four parser directives used.

@table @code
@item $if
The @code{$if} construct allows bindings to be made based on the
editing mode, the terminal being used, or the application using
Readline.  The text of the test extends to the end of the line;
no characters are required to isolate it.

@table @code
@item mode
The @code{mode=} form of the @code{$if} directive is used to test
whether Readline is in @code{emacs} or @code{vi} mode.
This may be used in conjunction
with the @samp{set keymap} command, for instance, to set bindings in
the @code{emacs-standard} and @code{emacs-ctlx} keymaps only if
Readline is starting out in @code{emacs} mode.

@item term
The @code{term=} form may be used to include terminal-specific
key bindings, perhaps to bind the key sequences output by the
terminal's function keys.  The word on the right side of the
@samp{=} is tested against both the full name of the terminal and
the portion of the terminal name before the first @samp{-}.  This
allows @code{sun} to match both @code{sun} and @code{sun-cmd},
for instance.

@item application
The @var{application} construct is used to include
application-specific settings.  Each program using the Readline
library sets the @var{application name}, and you can test for
a particular value. 
This could be used to bind key sequences to functions useful for
a specific program.  For instance, the following command adds a
key sequence that quotes the current or previous word in Bash:
@example
$if Bash
# Quote the current or previous word
"\C-xq": "\eb\"\ef\""
$endif
@end example
@end table

@item $endif
This command, as seen in the previous example, terminates an
@code{$if} command.

@item $else
Commands in this branch of the @code{$if} directive are executed if
the test fails.

@item $include
This directive takes a single filename as an argument and reads commands
and bindings from that file.
For example, the following directive reads from @file{/etc/inputrc}:
@example
$include /etc/inputrc
@end example
@end table

@node Sample Init File
@subsection Sample Init File

Here is an example of an @var{inputrc} file.  This illustrates key
binding, variable assignment, and conditional syntax.

@example
@page
# This file controls the behaviour of line input editing for
# programs that use the GNU Readline library.  Existing
# programs include FTP, Bash, and GDB.
#
# You can re-read the inputrc file with C-x C-r.
# Lines beginning with '#' are comments.
#
# First, include any system-wide bindings and variable
# assignments from /etc/Inputrc
$include /etc/Inputrc

#
# Set various bindings for emacs mode.

set editing-mode emacs 

$if mode=emacs

Meta-Control-h:	backward-kill-word	Text after the function name is ignored

#
# Arrow keys in keypad mode
#
#"\M-OD":        backward-char
#"\M-OC":        forward-char
#"\M-OA":        previous-history
#"\M-OB":        next-history
#
# Arrow keys in ANSI mode
#
"\M-[D":        backward-char
"\M-[C":        forward-char
"\M-[A":        previous-history
"\M-[B":        next-history
#
# Arrow keys in 8 bit keypad mode
#
#"\M-\C-OD":       backward-char
#"\M-\C-OC":       forward-char
#"\M-\C-OA":       previous-history
#"\M-\C-OB":       next-history
#
# Arrow keys in 8 bit ANSI mode
#
#"\M-\C-[D":       backward-char
#"\M-\C-[C":       forward-char
#"\M-\C-[A":       previous-history
#"\M-\C-[B":       next-history

C-q: quoted-insert

$endif

# An old-style binding.  This happens to be the default.
TAB: complete

# Macros that are convenient for shell interaction
$if Bash
# edit the path
"\C-xp": "PATH=$@{PATH@}\e\C-e\C-a\ef\C-f"
# prepare to type a quoted word --
# insert open and close double quotes
# and move to just after the open quote
"\C-x\"": "\"\"\C-b"
# insert a backslash (testing backslash escapes
# in sequences and macros)
"\C-x\\": "\\"
# Quote the current or previous word
"\C-xq": "\eb\"\ef\""
# Add a binding to refresh the line, which is unbound
"\C-xr": redraw-current-line
# Edit variable on current line.
"\M-\C-v": "\C-a\C-k$\C-y\M-\C-e\C-a\C-y="
$endif

# use a visible bell if one is available
set bell-style visible

# don't strip characters to 7 bits when reading
set input-meta on

# allow iso-latin1 characters to be inserted rather
# than converted to prefix-meta sequences
set convert-meta off

# display characters with the eighth bit set directly
# rather than as meta-prefixed characters
set output-meta on

# if there are more than 150 possible completions for
# a word, ask the user if he wants to see all of them
set completion-query-items 150

# For FTP
$if Ftp
"\C-xg": "get \M-?"
"\C-xt": "put \M-?"
"\M-.": yank-last-arg
$endif
@end example

@node Bindable Readline Commands
@section Bindable Readline Commands

@menu
* Commands For Moving::		Moving about the line.
* Commands For History::	Getting at previous lines.
* Commands For Text::		Commands for changing text.
* Commands For Killing::	Commands for killing and yanking.
* Numeric Arguments::		Specifying numeric arguments, repeat counts.
* Commands For Completion::	Getting Readline to do the typing for you.
* Keyboard Macros::		Saving and re-executing typed characters
* Miscellaneous Commands::	Other miscellaneous commands.
@end menu

This section describes Readline commands that may be bound to key
sequences.
@ifset BashFeatures
You can list your key bindings by executing
@w{@code{bind -P}} or, for a more terse format, suitable for an
@var{inputrc} file, @w{@code{bind -p}}.  (@xref{Bash Builtins}.)
@end ifset
Command names without an accompanying key sequence are unbound by default.

In the following descriptions, @dfn{point} refers to the current cursor
position, and @dfn{mark} refers to a cursor position saved by the
@code{set-mark} command.
The text between the point and mark is referred to as the @dfn{region}.

@node Commands For Moving
@subsection Commands For Moving
@ftable @code
@item beginning-of-line (C-a)
Move to the start of the current line.

@item end-of-line (C-e)
Move to the end of the line.

@item forward-char (C-f)
Move forward a character.

@item backward-char (C-b)
Move back a character.

@item forward-word (M-f)
Move forward to the end of the next word.
Words are composed of letters and digits.

@item backward-word (M-b)
Move back to the start of the current or previous word.
Words are composed of letters and digits.

@ifset BashFeatures
@item shell-forward-word ()
Move forward to the end of the next word.
Words are delimited by non-quoted shell metacharacters.

@item shell-backward-word ()
Move back to the start of the current or previous word.
Words are delimited by non-quoted shell metacharacters.
@end ifset

@item clear-screen (C-l)
Clear the screen and redraw the current line,
leaving the current line at the top of the screen.

@item redraw-current-line ()
Refresh the current line.  By default, this is unbound.

@end ftable

@node Commands For History
@subsection Commands For Manipulating The History

@ftable @code
@item accept-line (Newline or Return)
@ifset BashFeatures
Accept the line regardless of where the cursor is.
If this line is
non-empty, add it to the history list according to the setting of
the @env{HISTCONTROL} and @env{HISTIGNORE} variables.
If this line is a modified history line, then restore the history line
to its original state.
@end ifset
@ifclear BashFeatures
Accept the line regardless of where the cursor is.
If this line is
non-empty, it may be added to the history list for future recall with
@code{add_history()}.
If this line is a modified history line, the history line is restored
to its original state.
@end ifclear

@item previous-history (C-p)
Move `back' through the history list, fetching the previous command.

@item next-history (C-n)
Move `forward' through the history list, fetching the next command.

@item beginning-of-history (M-<)
Move to the first line in the history.

@item end-of-history (M->)
Move to the end of the input history, i.e., the line currently
being entered.

@item reverse-search-history (C-r)
Search backward starting at the current line and moving `up' through
the history as necessary.  This is an incremental search.

@item forward-search-history (C-s)
Search forward starting at the current line and moving `down' through
the the history as necessary.  This is an incremental search.

@item non-incremental-reverse-search-history (M-p)
Search backward starting at the current line and moving `up'
through the history as necessary using a non-incremental search
for a string supplied by the user.

@item non-incremental-forward-search-history (M-n)
Search forward starting at the current line and moving `down'
through the the history as necessary using a non-incremental search
for a string supplied by the user.

@item history-search-forward ()
Search forward through the history for the string of characters
between the start of the current line and the point.
The search string must match at the beginning of a history line.
This is a non-incremental search.
By default, this command is unbound.

@item history-search-backward ()
Search backward through the history for the string of characters
between the start of the current line and the point.
The search string must match at the beginning of a history line.
This is a non-incremental search.
By default, this command is unbound.

@item history-substr-search-forward ()
Search forward through the history for the string of characters
between the start of the current line and the point.
The search string may match anywhere in a history line.
This is a non-incremental search.
By default, this command is unbound.

@item history-substr-search-backward ()
Search backward through the history for the string of characters
between the start of the current line and the point.
The search string may match anywhere in a history line.
This is a non-incremental search.
By default, this command is unbound.

@item yank-nth-arg (M-C-y)
Insert the first argument to the previous command (usually
the second word on the previous line) at point.
With an argument @var{n},
insert the @var{n}th word from the previous command (the words
in the previous command begin with word 0).  A negative argument
inserts the @var{n}th word from the end of the previous command.
Once the argument @var{n} is computed, the argument is extracted
as if the @samp{!@var{n}} history expansion had been specified.

@item yank-last-arg (M-. or M-_)
Insert last argument to the previous command (the last word of the
previous history entry).
With a numeric argument, behave exactly like @code{yank-nth-arg}.
Successive calls to @code{yank-last-arg} move back through the history
list, inserting the last word (or the word specified by the argument to
the first call) of each line in turn.
Any numeric argument supplied to these successive calls determines
the direction to move through the history.  A negative argument switches
the direction through the history (back or forward).
The history expansion facilities are used to extract the last argument,
as if the @samp{!$} history expansion had been specified.

@end ftable

@node Commands For Text
@subsection Commands For Changing Text

@ftable @code

@item @i{end-of-file} (usually C-d)
The character indicating end-of-file as set, for example, by
@code{stty}.  If this character is read when there are no characters
on the line, and point is at the beginning of the line, Readline
interprets it as the end of input and returns @sc{eof}.

@item delete-char (C-d)
Delete the character at point.  If this function is bound to the
same character as the tty @sc{eof} character, as @kbd{C-d}
commonly is, see above for the effects.

@item backward-delete-char (Rubout)
Delete the character behind the cursor.  A numeric argument means
to kill the characters instead of deleting them.

@item forward-backward-delete-char ()
Delete the character under the cursor, unless the cursor is at the
end of the line, in which case the character behind the cursor is
deleted.  By default, this is not bound to a key.

@item quoted-insert (C-q or C-v)
Add the next character typed to the line verbatim.  This is
how to insert key sequences like @kbd{C-q}, for example.

@ifclear BashFeatures
@item tab-insert (M-@key{TAB})
Insert a tab character.
@end ifclear

@item self-insert (a, b, A, 1, !, @dots{})
Insert yourself.

@item transpose-chars (C-t)
Drag the character before the cursor forward over
the character at the cursor, moving the
cursor forward as well.  If the insertion point
is at the end of the line, then this
transposes the last two characters of the line.
Negative arguments have no effect.

@item transpose-words (M-t)
Drag the word before point past the word after point,
moving point past that word as well.
If the insertion point is at the end of the line, this transposes
the last two words on the line.

@item upcase-word (M-u)
Uppercase the current (or following) word.  With a negative argument,
uppercase the previous word, but do not move the cursor.

@item downcase-word (M-l)
Lowercase the current (or following) word.  With a negative argument,
lowercase the previous word, but do not move the cursor.

@item capitalize-word (M-c)
Capitalize the current (or following) word.  With a negative argument,
capitalize the previous word, but do not move the cursor.

@item overwrite-mode ()
Toggle overwrite mode.  With an explicit positive numeric argument,
switches to overwrite mode.  With an explicit non-positive numeric
argument, switches to insert mode.  This command affects only
@code{emacs} mode; @code{vi} mode does overwrite differently.
Each call to @code{readline()} starts in insert mode.

In overwrite mode, characters bound to @code{self-insert} replace
the text at point rather than pushing the text to the right.
Characters bound to @code{backward-delete-char} replace the character
before point with a space.

By default, this command is unbound.

@end ftable

@node Commands For Killing
@subsection Killing And Yanking

@ftable @code

@item kill-line (C-k)
Kill the text from point to the end of the line.

@item backward-kill-line (C-x Rubout)
Kill backward to the beginning of the line.

@item unix-line-discard (C-u)
Kill backward from the cursor to the beginning of the current line.

@item kill-whole-line ()
Kill all characters on the current line, no matter where point is.
By default, this is unbound.

@item kill-word (M-d)
Kill from point to the end of the current word, or if between
words, to the end of the next word.
Word boundaries are the same as @code{forward-word}.

@item backward-kill-word (M-@key{DEL})
Kill the word behind point.
Word boundaries are the same as @code{backward-word}.

@ifset BashFeatures
@item shell-kill-word ()
Kill from point to the end of the current word, or if between
words, to the end of the next word.
Word boundaries are the same as @code{shell-forward-word}.

@item shell-backward-kill-word ()
Kill the word behind point.
Word boundaries are the same as @code{shell-backward-word}.
@end ifset

@item unix-word-rubout (C-w)
Kill the word behind point, using white space as a word boundary.
The killed text is saved on the kill-ring.

@item unix-filename-rubout ()
Kill the word behind point, using white space and the slash character
as the word boundaries.
The killed text is saved on the kill-ring.

@item delete-horizontal-space ()
Delete all spaces and tabs around point.  By default, this is unbound.

@item kill-region ()
Kill the text in the current region.
By default, this command is unbound.

@item copy-region-as-kill ()
Copy the text in the region to the kill buffer, so it can be yanked
right away.  By default, this command is unbound.

@item copy-backward-word ()
Copy the word before point to the kill buffer.
The word boundaries are the same as @code{backward-word}.
By default, this command is unbound.

@item copy-forward-word ()
Copy the word following point to the kill buffer.
The word boundaries are the same as @code{forward-word}.
By default, this command is unbound.

@item yank (C-y)
Yank the top of the kill ring into the buffer at point.

@item yank-pop (M-y)
Rotate the kill-ring, and yank the new top.  You can only do this if
the prior command is @code{yank} or @code{yank-pop}.
@end ftable

@node Numeric Arguments
@subsection Specifying Numeric Arguments
@ftable @code

@item digit-argument (@kbd{M-0}, @kbd{M-1}, @dots{} @kbd{M--})
Add this digit to the argument already accumulating, or start a new
argument.  @kbd{M--} starts a negative argument.

@item universal-argument ()
This is another way to specify an argument.
If this command is followed by one or more digits, optionally with a
leading minus sign, those digits define the argument.
If the command is followed by digits, executing @code{universal-argument}
again ends the numeric argument, but is otherwise ignored.
As a special case, if this command is immediately followed by a
character that is neither a digit or minus sign, the argument count
for the next command is multiplied by four.
The argument count is initially one, so executing this function the
first time makes the argument count four, a second time makes the
argument count sixteen, and so on.
By default, this is not bound to a key.
@end ftable

@node Commands For Completion
@subsection Letting Readline Type For You

@ftable @code
@item complete (@key{TAB})
Attempt to perform completion on the text before point.
The actual completion performed is application-specific.
@ifset BashFeatures
Bash attempts completion treating the text as a variable (if the
text begins with @samp{$}), username (if the text begins with
@samp{~}), hostname (if the text begins with @samp{@@}), or
command (including aliases and functions) in turn.  If none 
of these produces a match, filename completion is attempted.
@end ifset
@ifclear BashFeatures
The default is filename completion.
@end ifclear

@item possible-completions (M-?)
List the possible completions of the text before point.
When displaying completions, Readline sets the number of columns used
for display to the value of @code{completion-display-width}, the value of
the environment variable @env{COLUMNS}, or the screen width, in that order.

@item insert-completions (M-*)
Insert all completions of the text before point that would have
been generated by @code{possible-completions}.

@item menu-complete ()
Similar to @code{complete}, but replaces the word to be completed
with a single match from the list of possible completions.
Repeated execution of @code{menu-complete} steps through the list
of possible completions, inserting each match in turn.
At the end of the list of completions, the bell is rung
(subject to the setting of @code{bell-style})
and the original text is restored.
An argument of @var{n} moves @var{n} positions forward in the list
of matches; a negative argument may be used to move backward
through the list.
This command is intended to be bound to @key{TAB}, but is unbound
by default.

@item menu-complete-backward ()
Identical to @code{menu-complete}, but moves backward through the list
of possible completions, as if @code{menu-complete} had been given a
negative argument.

@item delete-char-or-list ()
Deletes the character under the cursor if not at the beginning or
end of the line (like @code{delete-char}).
If at the end of the line, behaves identically to
@code{possible-completions}.
This command is unbound by default.

@ifset BashFeatures
@item complete-filename (M-/)
Attempt filename completion on the text before point.

@item possible-filename-completions (C-x /)
List the possible completions of the text before point,
treating it as a filename.

@item complete-username (M-~)
Attempt completion on the text before point, treating
it as a username.

@item possible-username-completions (C-x ~)
List the possible completions of the text before point,
treating it as a username.

@item complete-variable (M-$)
Attempt completion on the text before point, treating
it as a shell variable.

@item possible-variable-completions (C-x $)
List the possible completions of the text before point,
treating it as a shell variable.

@item complete-hostname (M-@@)
Attempt completion on the text before point, treating
it as a hostname.

@item possible-hostname-completions (C-x @@)
List the possible completions of the text before point,
treating it as a hostname.

@item complete-command (M-!)
Attempt completion on the text before point, treating
it as a command name.  Command completion attempts to
match the text against aliases, reserved words, shell
functions, shell builtins, and finally executable filenames,
in that order.

@item possible-command-completions (C-x !)
List the possible completions of the text before point,
treating it as a command name.

@item dynamic-complete-history (M-@key{TAB})
Attempt completion on the text before point, comparing
the text against lines from the history list for possible
completion matches.

@item dabbrev-expand ()
Attempt menu completion on the text before point, comparing
the text against lines from the history list for possible
completion matches.

@item complete-into-braces (M-@{)
Perform filename completion and insert the list of possible completions
enclosed within braces so the list is available to the shell
(@pxref{Brace Expansion}).

@end ifset
@end ftable

@node Keyboard Macros
@subsection Keyboard Macros
@ftable @code

@item start-kbd-macro (C-x ()
Begin saving the characters typed into the current keyboard macro.

@item end-kbd-macro (C-x ))
Stop saving the characters typed into the current keyboard macro
and save the definition.

@item call-last-kbd-macro (C-x e)
Re-execute the last keyboard macro defined, by making the characters
in the macro appear as if typed at the keyboard.

@item print-last-kbd-macro ()
Print the last keboard macro defined in a format suitable for the
@var{inputrc} file.

@end ftable

@node Miscellaneous Commands
@subsection Some Miscellaneous Commands
@ftable @code

@item re-read-init-file (C-x C-r)
Read in the contents of the @var{inputrc} file, and incorporate
any bindings or variable assignments found there.

@item abort (C-g)
Abort the current editing command and
ring the terminal's bell (subject to the setting of
@code{bell-style}).

@item do-uppercase-version (M-a, M-b, M-@var{x}, @dots{})
If the metafied character @var{x} is lowercase, run the command
that is bound to the corresponding uppercase character.

@item prefix-meta (@key{ESC})
Metafy the next character typed.  This is for keyboards
without a meta key.  Typing @samp{@key{ESC} f} is equivalent to typing
@kbd{M-f}.

@item undo (C-_ or C-x C-u)
Incremental undo, separately remembered for each line.

@item revert-line (M-r)
Undo all changes made to this line.  This is like executing the @code{undo}
command enough times to get back to the beginning.

@ifset BashFeatures
@item tilde-expand (M-&)
@end ifset
@ifclear BashFeatures
@item tilde-expand (M-~)
@end ifclear
Perform tilde expansion on the current word.

@item set-mark (C-@@)
Set the mark to the point.  If a
numeric argument is supplied, the mark is set to that position.

@item exchange-point-and-mark (C-x C-x)
Swap the point with the mark.  The current cursor position is set to
the saved position, and the old cursor position is saved as the mark.

@item character-search (C-])
A character is read and point is moved to the next occurrence of that
character.  A negative count searches for previous occurrences.

@item character-search-backward (M-C-])
A character is read and point is moved to the previous occurrence
of that character.  A negative count searches for subsequent
occurrences.

@item skip-csi-sequence ()
Read enough characters to consume a multi-key sequence such as those
defined for keys like Home and End.  Such sequences begin with a
Control Sequence Indicator (CSI), usually ESC-[.  If this sequence is
bound to "\e[", keys producing such sequences will have no effect
unless explicitly bound to a readline command, instead of inserting
stray characters into the editing buffer.  This is unbound by default,
but usually bound to ESC-[.

@item insert-comment (M-#)
Without a numeric argument, the value of the @code{comment-begin}
variable is inserted at the beginning of the current line.
If a numeric argument is supplied, this command acts as a toggle:  if
the characters at the beginning of the line do not match the value
of @code{comment-begin}, the value is inserted, otherwise
the characters in @code{comment-begin} are deleted from the beginning of
the line.
In either case, the line is accepted as if a newline had been typed.
@ifset BashFeatures
The default value of @code{comment-begin} causes this command
to make the current line a shell comment.
If a numeric argument causes the comment character to be removed, the line
will be executed by the shell.
@end ifset

@item dump-functions ()
Print all of the functions and their key bindings to the
Readline output stream.  If a numeric argument is supplied,
the output is formatted in such a way that it can be made part
of an @var{inputrc} file.  This command is unbound by default.

@item dump-variables ()
Print all of the settable variables and their values to the
Readline output stream.  If a numeric argument is supplied,
the output is formatted in such a way that it can be made part
of an @var{inputrc} file.  This command is unbound by default.

@item dump-macros ()
Print all of the Readline key sequences bound to macros and the
strings they output.  If a numeric argument is supplied,
the output is formatted in such a way that it can be made part
of an @var{inputrc} file.  This command is unbound by default.

@ifset BashFeatures
@item glob-complete-word (M-g)
The word before point is treated as a pattern for pathname expansion,
with an asterisk implicitly appended.  This pattern is used to
generate a list of matching file names for possible completions.

@item glob-expand-word (C-x *)
The word before point is treated as a pattern for pathname expansion,
and the list of matching file names is inserted, replacing the word.
If a numeric argument is supplied, a @samp{*} is appended before
pathname expansion.

@item glob-list-expansions (C-x g)
The list of expansions that would have been generated by
@code{glob-expand-word} is displayed, and the line is redrawn.
If a numeric argument is supplied, a @samp{*} is appended before
pathname expansion.

@item display-shell-version (C-x C-v)
Display version information about the current instance of Bash.

@item shell-expand-line (M-C-e)
Expand the line as the shell does.
This performs alias and history expansion as well as all of the shell
word expansions (@pxref{Shell Expansions}).

@item history-expand-line (M-^)
Perform history expansion on the current line.

@item magic-space ()
Perform history expansion on the current line and insert a space
(@pxref{History Interaction}).

@item alias-expand-line ()
Perform alias expansion on the current line (@pxref{Aliases}).

@item history-and-alias-expand-line ()
Perform history and alias expansion on the current line.

@item insert-last-argument (M-. or M-_)
A synonym for @code{yank-last-arg}.

@item operate-and-get-next (C-o)
Accept the current line for execution and fetch the next line
relative to the current line from the history for editing.  Any
argument is ignored.

@item edit-and-execute-command (C-xC-e)
Invoke an editor on the current command line, and execute the result as shell
commands.
Bash attempts to invoke
@code{$VISUAL}, @code{$EDITOR}, and @code{emacs}
as the editor, in that order.

@end ifset

@ifclear BashFeatures
@item emacs-editing-mode (C-e)
When in @code{vi} command mode, this causes a switch to @code{emacs}
editing mode.

@item vi-editing-mode (M-C-j)
When in @code{emacs} editing mode, this causes a switch to @code{vi}
editing mode.

@end ifclear

@end ftable

@node Readline vi Mode
@section Readline vi Mode

While the Readline library does not have a full set of @code{vi}
editing functions, it does contain enough to allow simple editing
of the line.  The Readline @code{vi} mode behaves as specified in
the @sc{posix} standard.

@ifset BashFeatures
In order to switch interactively between @code{emacs} and @code{vi}
editing modes, use the @samp{set -o emacs} and @samp{set -o vi}
commands (@pxref{The Set Builtin}).
@end ifset
@ifclear BashFeatures
In order to switch interactively between @code{emacs} and @code{vi}
editing modes, use the command @kbd{M-C-j} (bound to emacs-editing-mode
when in @code{vi} mode and to vi-editing-mode in @code{emacs} mode).
@end ifclear
The Readline default is @code{emacs} mode.

When you enter a line in @code{vi} mode, you are already placed in
`insertion' mode, as if you had typed an @samp{i}.  Pressing @key{ESC}
switches you into `command' mode, where you can edit the text of the
line with the standard @code{vi} movement keys, move to previous
history lines with @samp{k} and subsequent lines with @samp{j}, and
so forth.

@ifset BashFeatures
@node Programmable Completion
@section Programmable Completion
@cindex programmable completion

When word completion is attempted for an argument to a command for
which a completion specification (a @var{compspec}) has been defined
using the @code{complete} builtin (@pxref{Programmable Completion Builtins}),
the programmable completion facilities are invoked. 

First, the command name is identified.
If a compspec has been defined for that command, the
compspec is used to generate the list of possible completions for the word.
If the command word is the empty string (completion attempted at the
beginning of an empty line), any compspec defined with
the @option{-E} option to @code{complete} is used.
If the command word is a full pathname, a compspec for the full
pathname is searched for first.
If no compspec is found for the full pathname, an attempt is made to
find a compspec for the portion following the final slash.
If those searches do not result in a compspec, any compspec defined with
the @option{-D} option to @code{complete} is used as the default.

Once a compspec has been found, it is used to generate the list of
matching words.
If a compspec is not found, the default Bash completion
described above (@pxref{Commands For Completion}) is performed.

First, the actions specified by the compspec are used.
Only matches which are prefixed by the word being completed are
returned.
When the @option{-f} or @option{-d} option is used for filename or
directory name completion, the shell variable @env{FIGNORE} is
used to filter the matches.
@xref{Bash Variables}, for a description of @env{FIGNORE}.

Any completions specified by a filename expansion pattern to the
@option{-G} option are generated next.
The words generated by the pattern need not match the word being completed.
The @env{GLOBIGNORE} shell variable is not used to filter the matches,
but the @env{FIGNORE} shell variable is used.

Next, the string specified as the argument to the @option{-W} option
is considered.
The string is first split using the characters in the @env{IFS}
special variable as delimiters.
Shell quoting is honored.
Each word is then expanded using
brace expansion, tilde expansion, parameter and variable expansion,
command substitution, and arithmetic expansion,
as described above (@pxref{Shell Expansions}).
The results are split using the rules described above
(@pxref{Word Splitting}).
The results of the expansion are prefix-matched against the word being
completed, and the matching words become the possible completions.

After these matches have been generated, any shell function or command
specified with the @option{-F} and @option{-C} options is invoked.
When the command or function is invoked, the @env{COMP_LINE},
@env{COMP_POINT}, @env{COMP_KEY}, and @env{COMP_TYPE} variables are
assigned values as described above (@pxref{Bash Variables}).
If a shell function is being invoked, the @env{COMP_WORDS} and
@env{COMP_CWORD} variables are also set.
When the function or command is invoked, the first argument ($1) is the
name of the command whose arguments are being completed, the
second argument ($2) is the word being completed, and the third argument
($3) is the word preceding the word being completed on the current command
line.
No filtering of the generated completions against the word being completed
is performed; the function or command has complete freedom in generating
the matches.

Any function specified with @option{-F} is invoked first.
The function may use any of the shell facilities, including the
@code{compgen} and @code{compopt} builtins described below
(@pxref{Programmable Completion Builtins}), to generate the matches.
It must put the possible completions in the @env{COMPREPLY} array
variable, one per array element.

Next, any command specified with the @option{-C} option is invoked
in an environment equivalent to command substitution.
It should print a list of completions, one per line, to
the standard output.
Backslash may be used to escape a newline, if necessary.

After all of the possible completions are generated, any filter
specified with the @option{-X} option is applied to the list.
The filter is a pattern as used for pathname expansion; a @samp{&}
in the pattern is replaced with the text of the word being completed.
A literal @samp{&} may be escaped with a backslash; the backslash
is removed before attempting a match.
Any completion that matches the pattern will be removed from the list.
A leading @samp{!} negates the pattern; in this case any completion
not matching the pattern will be removed.

Finally, any prefix and suffix specified with the @option{-P} and @option{-S}
options are added to each member of the completion list, and the result is
returned to the Readline completion code as the list of possible
completions.

If the previously-applied actions do not generate any matches, and the
@option{-o dirnames} option was supplied to @code{complete} when the
compspec was defined, directory name completion is attempted. 

If the @option{-o plusdirs} option was supplied to @code{complete} when
the compspec was defined, directory name completion is attempted and any
matches are added to the results of the other actions.

By default, if a compspec is found, whatever it generates is returned to
the completion code as the full set of possible completions.
The default Bash completions are not attempted, and the Readline default
of filename completion is disabled.
If the @option{-o bashdefault} option was supplied to @code{complete} when
the compspec was defined, the default Bash completions are attempted
if the compspec generates no matches.
If the @option{-o default} option was supplied to @code{complete} when the
compspec was defined, Readline's default completion will be performed
if the compspec (and, if attempted, the default Bash completions)
generate no matches.

When a compspec indicates that directory name completion is desired,
the programmable completion functions force Readline to append a slash
to completed names which are symbolic links to directories, subject to
the value of the @var{mark-directories} Readline variable, regardless
of the setting of the @var{mark-symlinked-directories} Readline variable.

There is some support for dynamically modifying completions.  This is
most useful when used in combination with a default completion specified
with @option{-D}.  It's possible for shell functions executed as completion
handlers to indicate that completion should be retried by returning an
exit status of 124.  If a shell function returns 124, and changes
the compspec associated with the command on which completion is being
attempted (supplied as the first argument when the function is executed),
programmable completion restarts from the beginning, with an
attempt to find a new compspec for that command.  This allows a set of
completions to be built dynamically as completion is attempted, rather than
being loaded all at once.

For instance, assuming that there is a library of compspecs, each kept in a
file corresponding to the name of the command, the following default
completion function would load completions dynamically:

@example
_completion_loader()
@{
    . "/etc/bash_completion.d/$1.sh" >/dev/null 2>&1 && return 124
@}
complete -D -F _completion_loader -o bashdefault -o default
@end example

@node Programmable Completion Builtins
@section Programmable Completion Builtins
@cindex completion builtins

Three builtin commands are available to manipulate the programmable completion
facilities: one to specify how the arguments to a particular command are to
be completed, and two to modify the completion as it is happening.

@table @code
@item compgen
@btindex compgen
@example
@code{compgen [@var{option}] [@var{word}]}
@end example

Generate possible completion matches for @var{word} according to
the @var{option}s, which may be any option accepted by the
@code{complete}
builtin with the exception of @option{-p} and @option{-r}, and write
the matches to the standard output.
When using the @option{-F} or @option{-C} options, the various shell variables
set by the programmable completion facilities, while available, will not
have useful values.

The matches will be generated in the same way as if the programmable
completion code had generated them directly from a completion specification
with the same flags.
If @var{word} is specified, only those completions matching @var{word}
will be displayed.

The return value is true unless an invalid option is supplied, or no
matches were generated.

@item complete
@btindex complete
@example
@code{complete [-abcdefgjksuv] [-o @var{comp-option}] [-DE] [-A @var{action}] [-G @var{globpat}] [-W @var{wordlist}]
[-F @var{function}] [-C @var{command}] [-X @var{filterpat}]
[-P @var{prefix}] [-S @var{suffix}] @var{name} [@var{name} @dots{}]}
@code{complete -pr [-DE] [@var{name} @dots{}]}
@end example

Specify how arguments to each @var{name} should be completed.
If the @option{-p} option is supplied, or if no options are supplied, existing
completion specifications are printed in a way that allows them to be
reused as input.
The @option{-r} option removes a completion specification for
each @var{name}, or, if no @var{name}s are supplied, all
completion specifications.
The @option{-D} option indicates that the remaining options and actions should
apply to the ``default'' command completion; that is, completion attempted
on a command for which no completion has previously been defined.
The @option{-E} option indicates that the remaining options and actions should
apply to ``empty'' command completion; that is, completion attempted on a 
blank line.

The process of applying these completion specifications when word completion
is attempted is described above (@pxref{Programmable Completion}).  The
@option{-D} option takes precedence over @option{-E}.

Other options, if specified, have the following meanings.
The arguments to the @option{-G}, @option{-W}, and @option{-X} options
(and, if necessary, the @option{-P} and @option{-S} options)
should be quoted to protect them from expansion before the
@code{complete} builtin is invoked.


@table @code
@item -o @var{comp-option}
The @var{comp-option} controls several aspects of the compspec's behavior
beyond the simple generation of completions.
@var{comp-option} may be one of: 

@table @code

@item bashdefault
Perform the rest of the default Bash completions if the compspec
generates no matches.

@item default
Use Readline's default filename completion if the compspec generates
no matches.

@item dirnames
Perform directory name completion if the compspec generates no matches.

@item filenames
Tell Readline that the compspec generates filenames, so it can perform any
filename-specific processing (like adding a slash to directory names
quoting special characters, or suppressing trailing spaces).
This option is intended to be used with shell functions specified
with @option{-F}.

@item noquote
Tell Readline not to quote the completed words if they are filenames
(quoting filenames is the default).

@item nospace
Tell Readline not to append a space (the default) to words completed at
the end of the line.

@item plusdirs
After any matches defined by the compspec are generated, 
directory name completion is attempted and any
matches are added to the results of the other actions.

@end table

@item -A @var{action}
The @var{action} may be one of the following to generate a list of possible
completions:

@table @code
@item alias
Alias names.  May also be specified as @option{-a}.

@item arrayvar
Array variable names.

@item binding
Readline key binding names (@pxref{Bindable Readline Commands}).

@item builtin
Names of shell builtin commands.  May also be specified as @option{-b}.

@item command
Command names.  May also be specified as @option{-c}.

@item directory
Directory names.  May also be specified as @option{-d}.

@item disabled
Names of disabled shell builtins.

@item enabled
Names of enabled shell builtins.

@item export
Names of exported shell variables.  May also be specified as @option{-e}.

@item file
File names.  May also be specified as @option{-f}.

@item function
Names of shell functions.

@item group
Group names.  May also be specified as @option{-g}.

@item helptopic
Help topics as accepted by the @code{help} builtin (@pxref{Bash Builtins}).

@item hostname
Hostnames, as taken from the file specified by the
@env{HOSTFILE} shell variable (@pxref{Bash Variables}).

@item job
Job names, if job control is active.  May also be specified as @option{-j}.

@item keyword
Shell reserved words.  May also be specified as @option{-k}.

@item running
Names of running jobs, if job control is active.

@item service
Service names.  May also be specified as @option{-s}.

@item setopt
Valid arguments for the @option{-o} option to the @code{set} builtin
(@pxref{The Set Builtin}).

@item shopt
Shell option names as accepted by the @code{shopt} builtin
(@pxref{Bash Builtins}).

@item signal
Signal names.

@item stopped
Names of stopped jobs, if job control is active.

@item user
User names.  May also be specified as @option{-u}.

@item variable
Names of all shell variables.  May also be specified as @option{-v}.
@end table

@item -C @var{command}
@var{command} is executed in a subshell environment, and its output is
used as the possible completions.

@item -F @var{function}
The shell function @var{function} is executed in the current shell
environment.
When it is executed, $1 is the name of the command whose arguments are
being completed, $2 is the word being completed, and $3 is the word
preceding the word being completed, as described above
(@pxref{Programmable Completion}).
When it finishes, the possible completions are retrieved from the value
of the @env{COMPREPLY} array variable.

@item -G @var{globpat}
The filename expansion pattern @var{globpat} is expanded to generate
the possible completions.

@item -P @var{prefix}
@var{prefix} is added at the beginning of each possible completion
after all other options have been applied.

@item -S @var{suffix}
@var{suffix} is appended to each possible completion
after all other options have been applied.

@item -W @var{wordlist}
The @var{wordlist} is split using the characters in the
@env{IFS} special variable as delimiters, and each resultant word
is expanded.
The possible completions are the members of the resultant list which
match the word being completed.

@item -X @var{filterpat}
@var{filterpat} is a pattern as used for filename expansion.
It is applied to the list of possible completions generated by the
preceding options and arguments, and each completion matching
@var{filterpat} is removed from the list.
A leading @samp{!} in @var{filterpat} negates the pattern; in this
case, any completion not matching @var{filterpat} is removed.
@end table

The return value is true unless an invalid option is supplied, an option
other than @option{-p} or @option{-r} is supplied without a @var{name}
argument, an attempt is made to remove a completion specification for
a @var{name} for which no specification exists, or
an error occurs adding a completion specification.

@item compopt
@btindex compopt
@example
@code{compopt} [-o @var{option}] [-DE] [+o @var{option}] [@var{name}]
@end example
Modify completion options for each @var{name} according to the
@var{option}s, or for the currently-executing completion if no @var{name}s
are supplied.
If no @var{option}s are given, display the completion options for each
@var{name} or the current completion.
The possible values of @var{option} are those valid for the @code{complete}
builtin described above.
The @option{-D} option indicates that the remaining options should
apply to the ``default'' command completion; that is, completion attempted
on a command for which no completion has previously been defined.
The @option{-E} option indicates that the remaining options should
apply to ``empty'' command completion; that is, completion attempted on a 
blank line.

The @option{-D} option takes precedence over @option{-E}.

The return value is true unless an invalid option is supplied, an attempt
is made to modify the options for a @var{name} for which no completion
specification exists, or an output error occurs.

@end table

@node A Programmable Completion Example
@section A Programmable Completion Example

The most common way to obtain additional completion functionality beyond
the default actions @code{complete} and @code{compgen} provide is to use
a shell function and bind it to a particular command using @code{complete -F}.

The following function provides completions for the @code{cd} builtin.
It is a reasonably good example of what shell functions must do when
used for completion.  This function uses the word passsed as @code{$2}
to determine the directory name to complete.  You can also use the
@code{COMP_WORDS} array variable; the current word is indexed by the
@code{COMP_CWORD} variable.

The function relies on the @code{complete} and @code{compgen} builtins
to do much of the work, adding only the things that the Bash @code{cd}
does beyond accepting basic directory names:
tilde expansion (@pxref{Tilde Expansion}),
searching directories in @var{$CDPATH}, which is described above
(@pxref{Bourne Shell Builtins}),
and basic support for the @code{cdable_vars} shell option
(@pxref{The Shopt Builtin}).
@code{_comp_cd} modifies the value of @var{IFS} so that it contains only
a newline to accommodate file names containing spaces and tabs --
@code{compgen} prints the possible completions it generates one per line.

Possible completions go into the @var{COMPREPLY} array variable, one
completion per array element.  The programmable completion system retrieves
the completions from there when the function returns.

@example
# A completion function for the cd builtin
# based on the cd completion function from the bash_completion package
_comp_cd()
@{
    local IFS=$' \t\n'    # normalize IFS
    local cur _skipdot _cdpath
    local i j k

    # Tilde expansion, with side effect of expanding tilde to full pathname
    case "$2" in
    \~*)    eval cur="$2" ;;
    *)      cur=$2 ;;
    esac

    # no cdpath or absolute pathname -- straight directory completion
    if [[ -z "$@{CDPATH:-@}" ]] || [[ "$cur" == @@(./*|../*|/*) ]]; then
        # compgen prints paths one per line; could also use while loop
        IFS=$'\n'
        COMPREPLY=( $(compgen -d -- "$cur") )
        IFS=$' \t\n'
    # CDPATH+directories in the current directory if not in CDPATH
    else
        IFS=$'\n'
        _skipdot=false
        # preprocess CDPATH to convert null directory names to .
        _cdpath=$@{CDPATH/#:/.:@}
        _cdpath=$@{_cdpath//::/:.:@}
        _cdpath=$@{_cdpath/%:/:.@}
        for i in $@{_cdpath//:/$'\n'@}; do
            if [[ $i -ef . ]]; then _skipdot=true; fi
            k="$@{#COMPREPLY[@@]@}"
            for j in $( compgen -d -- "$i/$cur" ); do
                COMPREPLY[k++]=$@{j#$i/@}        # cut off directory
            done
        done
        $_skipdot || COMPREPLY+=( $(compgen -d -- "$cur") )
        IFS=$' \t\n'
    fi

    # variable names if appropriate shell option set and no completions
    if shopt -q cdable_vars && [[ $@{#COMPREPLY[@@]@} -eq 0 ]]; then
        COMPREPLY=( $(compgen -v -- "$cur") )
    fi

    return 0
@}
@end example

We install the completion function using the @option{-F} option to
@code{complete}:

@example
# Tell readline to quote appropriate and append slashes to directories;
# use the bash default completion for other arguments
complete -o filenames -o nospace -o bashdefault -F _comp_cd cd
@end example

@noindent
Since we'd like Bash and Readline to take care of some
of the other details for us, we use several other options to tell Bash
and Readline what to do.  The @option{-o filenames} option tells Readline
that the possible completions should be treated as filenames, and quoted
appropriately.  That option will also cause Readline to append a slash to
filenames it can determine are directories (which is why we might want to
extend @code{_comp_cd} to append a slash if we're using directories found
via @var{CDPATH}: Readline can't tell those completions are directories).
The @option{-o nospace} option tells Readline to not append a space
character to the directory name, in case we want to append to it.
The @option{-o bashdefault} option brings in the rest of the "Bash default"
completions -- possible completion that Bash adds to the default Readline
set.  These include things like command name completion, variable completion
for words beginning with @samp{@{}, completions containing pathname
expansion patterns (@pxref{Filename Expansion}), and so on.

Once installed using @code{complete}, @code{_comp_cd} will be called every
time we attempt word completion for a @code{cd} command.

Many more examples -- an extensive collection of completions for most of
the common GNU, Unix, and Linux commands -- are available as part of the
bash_completion project.  This is installed by default on many GNU/Linux
distributions.  Originally written by Ian Macdonald, the project now lives
at @url{http://bash-completion.alioth.debian.org/}.  There are ports for
other systems such as Solaris and Mac OS X.

An older version of the bash_completion package is distributed with bash
in the @file{examples/complete} subdirectory.

@end ifset
