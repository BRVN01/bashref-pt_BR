\input texinfo.tex @c -*- texinfo -*-
@c %**start of header
@setfilename bashref-pt_BR.info
@documentencoding UTF-8
@settitle Manual de Referência do Bash

@include version.texi
@c %**end of header

@copying
Este texto é uma breve descrição das características que estão presentes 
no shell Bash (version @value{VERSION}, @value{UPDATED}).

Esta é a Edição @value{EDITION}, mais recentemente atualizada em 
@value{UPDATED}, do @cite{The GNU Bash Reference Manual}, para 
@code{Bash}, Versão @value{VERSION}.

Copyright @copyright{} 2015 da versão traduzida para português 
do Brasil Jamenson Ferreira Espindula de Almeida Melo.

Copyright @copyright{} 1988--2014 Free Software Foundation, Inc.

@quotation
É concedida permissão para copiar, distribuir e/ou modificar este Manual 
de Referência do Bash, edição 4.3, versão traduzida para a língua 
portuguesa sob os termos da Licença de Documentação Livre GNU, versão 
1.3 ou qualquer versão posterior publicada pela Free Software 
Foundation; sem Seções Invariantes, sem Textos de Capa Frontal e sem 
Textos de Quarta Capa.   Uma cópia da licença está incluída na seção 
intitulada "GNU Free Documentation Licence".


Permission is granted to copy, distribute and/or modify this Bash 
Reference Manual, edition 4.3, version translated into brazilian 
portuguese under the terms of the GNU Free Documentation License, 
Version 1.3 or any later version published by the Free Software 
Foundation; with no Invariant Sections, no Front-Cover Texts, and no 
Back-Cover Texts.   A copy of the license is included in the section 
entitled ``GNU Free Documentation License''.
@end quotation
@end copying

@defcodeindex bt
@defcodeindex rw
@set BashFeatures

@dircategory Basics
@direntry
* Bash: (bash).                     The GNU Bourne-Again SHell.
@end direntry

@finalout

@titlepage
@title Manual de Referência do Bash
@subtitle Documentação de Referência para o Bash
@subtitle Edição @value{EDITION}, para @code{Bash} Versão 
@value{VERSION}.
@subtitle @value{UPDATED-MONTH}
@author Chet Ramey, Case Western Reserve University
@author Brian Fox, Free Software Foundation

@page
@vskip 0pt plus 1filll
@insertcopying

@end titlepage

@contents

@ifnottex
@node Top, Introduction, (dir), (dir)
@top Características do Bash

Este texto é uma breve descrição das características que estão presentes 
no shell Bash (version @value{VERSION}, @value{UPDATED}).
A home page do Bash é @url{http://www.gnu.org/software/bash/}.

Esta é a Edição @value{EDITION}, atualizada mais recentemente em 
@value{UPDATED}, do @cite{The GNU Bash Reference Manual},
para @code{Bash}, Versão @value{VERSION}.

O Bash contém características que aparecem em outros shells populares, e 
algumas características que aparecem somente no Bash.   Alguns dos 
shells dos quais Bash tomou emprestado conceitos são o Bourne Shell 
(@file{sh}), o Korn Shell (@file{ksh}), e o C-shell (@file{csh} e o 
sucessor dele, @file{tcsh}).  O menu seguinte quebra as 
características em categorias, nenhuma das quais foi inspirada por 
outros shells e as quais são específicas para Bash.

Este manual é entendido como uma breve introdução às características 
encontradas no Bash.   A página de manual do Bash deveria ser utilizada 
como a referência definitiva acerca do comportamento do shell.

@menu
* Introduction::		Uma introdução ao shell.
* Definitions::			Algumas definições utilizadas no 
				restante deste manual.
* Basic Shell Features::	Os "blocos de construção" do shell.
* Shell Builtin Commands::	Comandos que são uma parte do shell.
* Shell Variables::		Variáveis utilizadas ou 
				configuradas por Bash.
* Bash Features::		Características encontradas apenas no 
				Bash.
* Job Control::			O que é controle de tarefa e como 
				Bash permite que você o utilize.
* Command Line Editing::	Capítulo descrevendo as 
				características de edição de linha de 
				comando.
* Using History Interactively::	Expansão do Histórico de Comando
* Installing Bash::		Como construir e instalar Bash em 
				seu sistema.
* Reporting Bugs::		Como relatar bugs no Bash.
* Major Differences From The Bourne Shell::	Uma lista concisa entre 
						Bash e versões
						históricas de 
						/bin/sh.
* GNU Free Documentation License::	Copiando e compartilhando esta 
					documentação.
* Indexes::			Varios índices para este manual.
@end menu
@end ifnottex

@node Introduction
@chapter Introduction
@menu
* What is Bash?::		Uma breve descrição do Bash.
* What is a shell?::		Uma breve introdução aos shells.
@end menu

@node What is Bash?
@section What is Bash?

Bash é o shell, ou interpretador de linguagem de comando, para o sistema 
operacional @sc{gnu}.
O nome é um acrônimo para o @samp{Bourne-Again SHell}, uma homenagem a 
Stephen Bourne, o autor do ancestral direto do shell Unix atual 
@code{sh}, o qual apareceu na versão do Unix da Sétima Edição do Bell 
Labs Research.

Bash é largamente compatível com @code{sh} e incorpora características 
úteis oriundas do shell Korn @code{ksh} e do shell C @code{csh}.
Ele é entendido para ser uma implementação conforme da porção das 
Ferramentas e Shell do @sc{ieee} @sc{posix} da especificação @sc{ieee} 
@sc{posix} (Padrão @sc{ieee} 1003.1).
Ele oferece melhoramentos funcionais sobre o @code{sh} para ambos 
uso interativo e programação.

Ao mesmo tempo em que o sistema operacional @sc{gnu} fornece 
outros shells, incluindo uma versão do @code{csh}, Bash é o shell 
padrão.
Como outros softwares @sc{gnu}, Bash é facilmente portável.   Ele 
atualmente roda em quase todas as versões de Unix e alguns outros 
sistemas operacionais @minus{} existem implementações independentemente 
suportadas para @sc{ms-dos}, @sc{os/2}, e plataformas Windows.

@node What is a shell?
@section What is a shell?

Na base, um shell é simplesmente um processador de macro que executa 
comandos.   O termo processador de macro significa funcionalidade onde 
texto e símbolos são expandidos para criar expressões mais amplas.

Um shell Unix é ambos um interpretador de comando e uma linguagem de 
programação.   Como um interpretador de comando, o shell fornece a 
interface de usuário para o rico conjunto de utilitários @sc{gnu}.   As 
características de linguagem de programação permitem que tais 
utilitários sejam combinados.   Arquivos contendo comandos podem ser 
criados, e se tornarem eles mesmos comandos.   Esses novos comandos tem 
o mesmo status que os comandos de sistema em diretórios como 
@file{/bin}, permitindo aos usuários e grupos estabelecerem ambientes 
personalizados para automatizar suas tarefas cotidianas.

Shells podem ser utilizados interativamente ou não interativamente.   No 
modo interativo, eles aceitam entrada digitada no teclado.   Quando da 
execução não-interativamente, shells executam comandos lidos a partir de 
um arquivo.

Um shell permite a execução de comandos @sc{gnu}, ambos síncronamente e 
assíncronamente.
O shell aguarda comandos síncronos completarem antes de aceitar mais 
entrada; comandos assíncronos continuam a executar em paralelo com o 
shell enquanto ele lê e executa comandos adicionais.
As construções @dfn{redirection} permitem um controle refinado da 
entrada e saída de tais comandos.
Além disso, o shell permite controle sobre o conteúdo dos ambientes de 
comandos.

Shells também fornecem um pequeno conjunto de comandos internos 
(@dfn{builtins}) implementando funcionalidade impossível ou 
inconveniente de se obter via utilitários separados.
Por exemplo, @code{cd}, @code{break}, @code{continue}, e @code{exec}
não podem ser implementados do lado de fora do shell, pois eles 
manipulam diretamente o próprio shell.
Os comandos internos @code{history}, @code{getopts}, @code{kill}, ou 
@code{pwd}, entre outros, poderiam ser implementados em utilitários 
separados, mas eles são mais convenientes de se utilizar como comandos 
internos.   Todos os comandos internos do shell são descritos em seções 
subsequentes.

Ao tempo em que executar comandos é essencial, a maior parte do poder (e 
complexidade) dos shells é devida às suas linguagens de programação 
embutidas.   Como qualquer linguagem de alto-nível, o shell fornece 
variáveis, contrutores de fluxo de controle, citações e funções.

Shells ofecerem recursos especificamente voltados para uso interativo ao 
invés de aumentar a linguagem de programação.   Essas características 
interativas incluem controle de tarefa, edição de linha de comando, 
histórico de comando e apelidos.   Cada uma dessas características está 
descrita neste manual.

@node Definitions
@chapter Definitions
Estas definições são utilizadas em todo o restante deste manual.

@table @code

@item POSIX
@cindex POSIX
Uma família de padrões abertos de sistema baseado no Unix.   Bash é 
concernente primariamente com a porção de Shell e Utilitários do padrão 
@sc{posix} 1003.1.

@item blank
Um caracter tab ou espaço.

@item builtin
@cindex builtin
Um comando que é implementado internamente pelo próprio shell, ao invés 
de o ser por algum programa executável em algum lugar no sistema de 
arquivo.

@item control operator
@cindex control operator
Um @code{token} que desempenha uma função de controle.   Ele é um 
@code{newline} ou um dos seguintes: @samp{||}, @samp{&&}, @samp{&}, 
@samp{;}, @samp{;;}, @samp{|}, @samp{|&}, @samp{(}, or @samp{)}.

@item exit status
@cindex exit status
O valor retornado por um comando para quem o executou.   O valor é 
restrito a oito bits, de forma que o valor máximo é 255.

@item field
@cindex field
Uma unidade de texto que é o resultado de uma das expansões de shell.   
Após a expansão, quando da execução de um comando, os campos resultantes 
são utilizados como o nome do comando e argumentos.

@item filename
@cindex filename
Uma sequência de caracteres utilizada para identificar um arquivo.

@item job
@cindex job
Um conjunto de tarefas compreendendo um canal de comunicação (pipeline), 
e quaisquer processos que descendam dele, os quais estão todos no mesmo 
grupo de processos.

@item job control
@cindex job control
Um mecanismo pelo qual usuários podem seletivamente parar (suspend) e 
reiniciar (resume) a execução de processos.

@item metacharacter
@cindex metacharacter
Um caracter que, sem aspas, separa palavras.   Um metacaracter é um 
@code{blank} ou um dos caracteres seguintes: @samp{|}, @samp{&}, 
@samp{;}, @samp{(}, @samp{)}, @samp{<}, ou @samp{>}.

@item name
@cindex name
@cindex identifier
Uma @code{word} consistindo apenas de letras, números, e sublinhados, e 
iniciando com uma letra ou sublinhado.  @code{Name}s são utilizados 
como variáveis de shell e como nomes de função.
Também referenciado como um @code{identifier}.

@item operator
@cindex operator, shell
Um @code{control operator} ou um  @code{redirection operator}.
Veja-se @xref{Redirections}, para uma lista de operadores de 
redireção.   Operadores contém ao menos um @code{metacharacter} fora de 
aspas.

@item process group
@cindex process group
Uma coleção de processos relacionados cada qual tendo o mesmo @sc{id} de 
grupo de processo.

@item process group ID
@cindex process group ID
Um identificador único que representa um @code{process group} durante 
seu tempo de vida.

@item reserved word
@cindex reserved word
Uma @code{word} que tem um significado especial para o shell.   A maior 
parte das palavras reservadas introduz construções de controle de fluxo 
do shell, tais como @code{for} e @code{while}.

@item return status
@cindex return status
Um sinônimo para @code{exit status}.

@item signal
@cindex signal
Um mecanismo pelo qual um processo pode ser notificado de um evento 
ocorrente no sistema pelo kernel.

@item special builtin
@cindex special builtin
Um comando interno de shell o qual foi classificado como especial pelo 
padrão @sc{posix}.

@item token
@cindex token
Uma sequência de caracteres considerada como sendo uma unidade simples 
pelo shell.   Essa sequência é ou uma @code{word} ou um @code{operator}.

@item word
@cindex word
Uma sequência de caracteres tratada como uma unidade pelo shell.   
Palavras não podem incluir @code{metacharacters} fora de aspas.
@end table

@node Basic Shell Features
@chapter Basic Shell Features
@cindex Bourne shell

Bash é um acrônimo para @samp{Bourne-Again SHell}.   O shell Bourne é o 
shell Unix tradicional originalmente escrito por Stephen Bourne.   Todos 
os comandos internos do shell Bourne estão disponíveis no Bash.   As 
regras para avaliação e encapsulamento dentro de aspas são tomadas da 
especificação @sc{posix} para o shell Unix 'padrão'.

Este capítulo sumariza brevemente os 'blocos de construção' do shell: 
comandos, estruturas de controle, funções de shell, @i{parameters} do 
shell, expansões do shell, @i{redirections}, os quais são uma forma de 
direcionar entrada e saída de e para arquivos nomeados, e como o shell 
executa comandos.

@menu
* Shell Syntax::		O que sua entrada significa para o 
				shell.
* Shell Commands::		Os tipos de comandos que você pode 
				utilizar.
* Shell Functions::		Agrupando comandos pelo nome.
* Shell Parameters::		Como o shell armazena valores.
* Shell Expansions::		Como Bash expande parâmetros e as 
				várias expansões disponíveis.
* Redirections::		Uma forma de controlar para aonde vai 
				entrada e saída.
* Executing Commands::		O que acontece quando você executa 
				um comando.
* Shell Scripts::		Executando arquivos de comandos do 
				shell.
@end menu

@node Shell Syntax
@section Shell Syntax
@menu
* Shell Operation::	A operação básica do shell.
* Quoting::		Como remover o significado especial dos 
			caracteres.
* Comments::		Como especificar comentários.
@end menu

Quando o shell lê entrada, ele percorre uma sequência de operações.   Se 
a entrada indica o início de um comando, o shell ignora o símbolo de 
comentário (@samp{#}), e o restante daquela linha.

De outro lado, grosseiramente falando, o shell lê sua entrada e divide a 
entrada em palavras e operadores, empregando as regras de encapsulamento 
entre aspas para selecionar quais significados atribuir para as várias 
palavras e caracteres.

O shell então processa esses tokens em comandos e outros construtores, 
remove o significado especial de certas palavras ou caracteres, expande 
outros, redireciona entrada e saída conforme necessário, executa o 
comando especificado, aguarda pelo status de saída do comando, e torna 
esse status de saída disponível para inspeção posterior ou 
processamento.


@node Shell Operation
@subsection Shell Operation

O seguinte é uma breve descrição da operação do shell quando ele lê e 
executa um comando.   Basicamente, o shell faz o seguinte:

@enumerate
@item
Lê a entrada a partir de um arquivo (@pxref{Shell Scripts}), a 
partir de uma cadeia de caracteres fornecida como um argumento para 
a opção de invocação @option{-c} (@pxref{Invoking Bash}), ou a 
partir do terminal do usuário.

@item
Divide a entrada em palavras e operadores, obedecendo às regras de 
encapsulamento entre aspas descritas em @ref{Quoting}.  Esses tokens 
são separados por @code{metacharacters}.  A expansão de apelidos é 
feita por esse passo (@pxref{Aliases}).

@item
Processa os tokens em comandos simples e comandos compostos 
(@pxref{Shell Commands}).

@item
Desempenha as várias expansões de shell (@pxref{Shell Expansions}), 
dividindo os tokens expandidos em listas de nomes de arquivos 
(@pxref{Filename Expansion}) e comandos e argumentos.

@item
Desempenha quaisquer redireções necessárias (@pxref{Redirections}) e 
remove os operadores de redireção e seus operandos da lista de 
argumentos.

@item
Executa o comando (@pxref{Executing Commands}).

@item
Opcionalmente aguarda o término da execução do comando e coleta seu 
status de saída (@pxref{Exit Status}).

@end enumerate

@node Quoting
@subsection Quoting
@cindex quoting
@menu
* Escape Character::	Como remover o significado especial de um 
			caracter único.
* Single Quotes::	Como inibir toda a interpretação de uma 
			sequência de caracteres.
* Double Quotes::	Como suprimir a maior parte da interpretação 
			de uma seqência de caracteres.
* ANSI-C Quoting::	Como expandir sequências ANSI-C em cadeias de 
			caracteres encapsuladas entre aspas.
* Locale Translation::	Como traduzir cadeias de caracteres em 
			idiomas diferentes.
@end menu

O encapsulamento entre aspas é utilizado para remover o significado 
especial de determinados caracteres ou palavras para o shell.   O 
encapsulamento pode ser utilizado para desabilitar o tratamento especial 
para caracteres especiais, previnir palavras reservadas de serem 
reconhecidas como tais, e prevenir a expansão de parâmetro.

Cada um dos metacaracteres do shell (@pxref{Definitions}) tem um 
significado especial para o shell e devem ser encapsulados caso devam 
representar eles mesmos.
Quando as facilidades da expansão de histórico de comandos estão sendo 
utilizadas (@pxref{History Interaction}), o caracter de @var{history 
expansion}, em regra @samp{!}, deve ser encapsulado para prevenir a 
expansão de histórico.   Veja-se @xref{Bash History Facilities}, para 
mais detalhes acerca da expansão de histórico.

Existem três mecanismos de encapsulamento em aspas: o @var{escape 
character}, encapsulamento simples, e encapsulamento duplo.

@node Escape Character
@subsubsection Escape Character
Uma barra invertida não encapsulada @samp{\} é o caracter de escape do 
Bash.   Esse caracter preserva o valor literal do próximo caracter que 
se segue, com exceção do @code{newline}.   Se um par @code{\newline} 
aparece, e a própria barra invertida não estiver encapsulada entre 
aspas, o @code{\newline} é tratado como uma continuação de linha (isto 
é, ele é removido do fluxo de entrada e efetivamente ignorado).

@node Single Quotes
@subsubsection Single Quotes

Encapsular caracteres em aspas simples (@samp{'}) preserva o valor 
literal de cada caracter dentro do encapsulamento.   Um encapsulamento 
simples não deve ocorrer entre aspas simples, ainda que precedido por 
uma barra invertida.

@node Double Quotes
@subsubsection Double Quotes

Encapsular caracteres em aspas duplas (@samp{"}) preserva o valor 
literal de todos os caracteres dentro das aspas, com exceção de 
@samp{$}, @samp{`}, @samp{\}, e, quando a expansão de histórico esteja 
habilitada, @samp{!}.
Os caracteres @samp{$} e @samp{`} conservam o significado especial deles 
quando dentro de aspas duplas (@pxref{Shell Expansions}).
A barra invertida conserva seu significado especial apenas quando 
seguida por um dos seguintes caracteres: @samp{$}, @samp{`}, @samp{"}, 
@samp{\}, ou @code{newline}.
Dentro de aspas duplas, barras invertidas que são seguidas por um desses 
caracteres são removidas.   Barras invertidas precedendo caracteres sem 
um significado especial são deixadas sem modificação.
Uma aspa dupla pode ser encapsulada em aspas duplas precedendo-se ela 
com uma barra invertida.
Se habilitada, a expansão de histórico será feita, a menos que um 
@samp{!} que esteja aparecendo em aspas duplas seja encapsulado 
utilizando-se uma barra invertida.
A barra invertida que precede um @samp{!} não é removida.

Os parâmetros especiais @samp{*} e @samp{@@} tem significado 
especial quando estejam entre aspas duplas (@pxref{Shell Parameter 
Expansion}).

@node ANSI-C Quoting
@subsubsection ANSI-C Quoting
@cindex quoting, ANSI

Palavras da forma @code{$'@var{string}'} são tratadas especialmente.   A 
palavra expande para @var{string}, com caracteres encapsulados por 
barras invertidas sendo substituídos conforme especificado pelo padrão 
ANSI C.   As sequências de encapsulamento de barra invertida, se 
presentes, são decodificadas conforme a seguir:

@table @code
@item \a
alerta (sino)
@item \b
barra invertida
@item \e
@itemx \E
um caracter de encapsulamento (não ANSI C)
@item \f
alimentação de formulário
@item \n
nova linha
@item \r
retorno de carro
@item \t
tab horizontal
@item \v
tab vertical
@item \\
barra invertida
@item \'
aspa simples
@item \"
aspa dupla
@item \@var{nnn}
o caracter de oito bits cujo valor é o valor octal @var{nnn}
(de um até três dígitos)
@item \x@var{HH}
o caracter de oito bits cujo valor é o valor hexadecimal @var{HH}
(um ou dois dígitos hexadecimais)
@item \u@var{HHHH}
o caracter Unicode (ISO/IEC 10646) cujo valor é o valor hexadecimal 
@var{HHHH} (de um até quatro dígitos hexadecimais)
@item \U@var{HHHHHHHH}
o caracter Unicode (ISO/IEC 10646) cujo valor é o valor hexadecimal 
@var{HHHHHHHH} (de um até oito dígitos hexadecimais)
@item \c@var{x}
um caracter control-@var{x}
@end table

@noindent
O resultado expandido é encapsulado entre aspas simples, como se o sinal 
de dólar não estivesse presente.

@node Locale Translation
@subsubsection Locale-Specific Translation
@cindex localization
@cindex internationalization
@cindex native languages
@cindex translation, native languages

Uma cadeia de caracteres dentro de um encapsulamento em aspas duplas 
precedido por um sinal de dólar (@samp{$}) fará com que a cadeia de 
caracteres seja traduzida conforme o locale atual.
Se o locale atual é @code{C} ou @code{POSIX}, o sinal de dólar é 
ignorado.   Se a cadeira de caracteres for traduzida e substituída, o 
substituto é encapsulado entre aspas duplas.

@vindex LC_MESSAGES
@vindex TEXTDOMAIN
@vindex TEXTDOMAINDIR
Alguns sistemas utilizam o catálogo de mensagem selecionado pela 
variável de shell @env{LC_MESSAGES}.   Outros criam o nome do catálogo 
de mensagem a partir do valor da variável de shell @env{TEXTDOMAIN}, 
possivelmente adicionando um sufixo @samp{.mo}.   Se você utiliza a 
variável @env{TEXTDOMAIN}, você obrigatoriamente precisa configurar a 
variável @env{TEXTDOMAINDIR} para a localização dos arquivos de catálogo 
de mensagem.   Outros ainda utilizam ambas as variáveis neste desenho:
@env{TEXTDOMAINDIR}/@env{LC_MESSAGES}/LC_MESSAGES/@env{TEXTDOMAIN}.mo.

@node Comments
@subsection Comments
@cindex comments, shell

Em um shell não interativo, ou um shell interativo no qual a opção 
@code{interactive_comments} para o comando interno @code{shopt} esteja 
habilitada (@pxref{The Shopt Builtin}), uma palavra iniciando com 
@samp{#} faz com que essa palavra e todos os caracteres restantes 
naquela linha sejam ignorados.   Um shell interativo sem a opção 
@code{interactive_comments} habilitada não permite comentários.   A 
opção @code{interactive_comments} é habilitada por padrão em shells 
interativos.   Veja-se @xref{Interactive Shells}, para uma descrição do 
que torna um shell interativo.

@node Shell Commands
@section Shell Commands
@cindex commands, shell

Um comando de shell simples como @code{echo a b c} consiste do próprio 
comando seguido por argumentos, separados por espaços.

Comandos de shell mais complexos são compostos de comandos simples 
arranjados juntos em uma variedade de possibilidades: em um canal de 
comunicação (pipeline) no qual a saída de um comando se torna a entrada 
de um segundo, em um loop ou construção condicional, ou em algum outro 
agrupamento.

@menu
* Simple Commands::		O tipo de comando mais comum.
* Pipelines::			Conectando a entrada e saída de 
				vários comandos.
* Lists::			Como executar comandos 
				sequencialmente.
* Compound Commands::		Comandos de shell para controlar 
				fluxo.
* Coprocesses::			Comunicação de duas vias entre 
				comandos.
* GNU Parallel::		Executando comandos em paralelo.
@end menu

@node Simple Commands
@subsection Simple Commands
@cindex commands, simple

Um comando simples é o tipo de comando encontrado mais frequentemente.   
Ele é simplesmente uma sequência de palavras separadas por 
@code{blank}s, terminada por um dos operadores de controle do shell 
(@pxref{Definitions}).   A primeira palavra geralmente especifica um 
comando a ser executado, com o restante das palavras sendo os argumentos 
daquele comando.

O status de retorno (@pxref{Exit Status}) de um comando simples é seu 
status de saída como fornecido pela função @code{waitpid} definida no 
padrão @sc{posix} 1003.1, ou 128+@var{n} se o comando foi terminado pelo 
sinal @var{n}.

@node Pipelines
@subsection Pipelines
@cindex pipeline
@cindex commands, pipelines

Um canal de comunicação (@code{pipeline}) é uma sequência de comandos 
simples separada por um dos operadores de controle @samp{|} ou 
@samp{|&}.

@rwindex time
@rwindex !
@cindex command timing
O formato de um tubo é
@example
[time [-p]] [!] @var{command1} [ | or |& @var{command2} ] @dots{}
@end example

@noindent
A saída de cada comando dentro do canal de comunicação é conectada 
via tubo à entrada do próximo comando.   Isto é, cada comando lê a saída 
do comando anterior.   Essa conexão é feita antes de quaisquer 
redireções especificadas pelo comando.

Se @samp{|&} for utilizado, o descritor de erro padrão do 
@var{command1}, em adição ao seu descritor de saída padrão, é conectado 
ao descritor de entrada padrão do @var{command2} por meio do tubo; isso 
é um atalho para @code{2>&1 |}.
Essa redireção implícita do descritor de erro padrão para o descritor de 
saída padrão é feita após quaisquer redireções especificadas pelo 
comando.

A palavra reservada @code{time} faz com que sejam impressas estatísticas 
de temporização para o canal de comunicação tão logo ele finalize.
As estatísticas atualmente consistem do tempo (wall-clock) decorrido e 
tempo de usuário e de sistema consumidos pela execução do comando.
A opção @option{-p} modifica o formato da saída para aquele especificado 
por @sc{posix}.
Quando o shell está em modo @sc{posix} (@pxref{Bash POSIX Mode}), ele 
não reconhece @code{time} como uma palavra reservada se o próximo token 
inicia com um @samp{-}.
A variável @env{TIMEFORMAT} pode ser configurada para um formato de 
cadeia de caracteres que especifique como a informação de temporização 
deveria ser exibida.   Veja-se @xref{Bash Variables} para uma descrição 
dos formatos disponíveis.
O uso de @code{time} como uma palavra reservada permite a temporização 
de comandos internos do shell, de funções do shell, e de canais de 
comunicação (pipelines).   Um comando @code{time} externo não pode 
temporizar esses facilmente.

Quando o shell está em modo @sc{posix} (@pxref{Bash POSIX Mode}), 
@code{time} deve ser seguido por um newline.   Nesse caso, o shell exibe 
o tempo de usuário e de sistema total consumido pelo shell e seus 
filhos.
A variável @env{TIMEFORMAT} deve ser utilizada para especificar o 
formato da informação de temporização.

Se o canal de comunicação não estiver sendo executado assíncronamente 
(@pxref{Lists}), o shell aguarda que todos os comandos no canal de 
comunicação finalizem.

Cada comando em um canal de comunicação é executado em seu próprio 
subshell (@pxref{Command Execution Environment}).   O status de saída de 
um canal de comunicação é o status de saída do último comando no canal 
de comunicação, a menos que a opção @code{pipefail} esteja habilitada 
(@pxref{The Set Builtin}).
Se a opção @code{pipefail} estiver habilitada, o status de retorno do 
canal de comunicação é o valor do último (mais à direita) comando a sair 
com um status diferente de zero, ou zero se todos os comandos saírem com 
sucesso.
Se a palavra reservada @samp{!} preceder o canal de comunicação, o 
status de saída é a negação lógica do status de saída conforme descrito 
acima.
O shell aguarda que todos os comandos no canal de comunicação terminem 
antes de retornar um valor.

@node Lists
@subsection Lists of Commands
@cindex commands, lists

Uma @code{list} é uma sequência de um os mais canais de comunicação 
separados por um dos operadores @samp{;}, @samp{&}, @samp{&&}, ou 
@samp{||}, e opcionalmente finalizados por um @samp{;}, @samp{&}, ou um
@code{newline}.

Dessa lista de operadores, @samp{&&} e @samp{||} tem igual precedência, 
seguidos por @samp{;} e @samp{&}, os quais tem igual precedência.

Uma sequência de um ou mais newlines podem aparecer em uma @code{list} 
para delimitar comandos, equivalente a ponto e vírgula.

Se um comando é finalizado pelo operador de controle @samp{&}, o shell 
executa o comando assíncronamente em um subshell.
Isso é conhecido como executar o comando no @var{background}.
O shell não aguarda que o comando finalize a execução, e o status de 
retorno é 0 (verdadeiro).
Quando o controle de tarefas não está ativo (@pxref{Job Control}), a 
entrada padrão para comandos assíncronos, na ausência de quaisquer 
redireções explícitas, é redirecionada a partir de @code{/dev/null}.

Comandos separados por um @samp{;} são executados sequêncialmente; o 
shell aguarda que cada comando finalize sua execução.   O status de 
retorno é o status de saída do último comando executado.

As listas @sc{and} e @sc{or} são sequências de um ou mais canais de 
comunicação separados por operadores de controle @samp{&&} e @samp{||}, 
respectivamente.   As listas @sc{and} e @sc{or} são executadas com 
associatividade à esquerda.

Uma lista @sc{and} tem a forma
@example
@var{command1} && @var{command2}
@end example

@noindent
@var{command2} é executado se, e somente se, @var{command1}
retorna um status de saída igual a zero.

Uma lista @sc{or} tem a forma
@example
@var{command1} || @var{command2}
@end example

@noindent
@var{command2} é executado se, e somente se, @var{command1}
retorna um status de saída qualquer diferente de zero.

O status de retorno das listas @sc{and} e @sc{or} é o status de saída do 
último comando executado na lista.

@node Compound Commands
@subsection Compound Commands
@cindex commands, compound

@menu
* Looping Constructs::		Comandos de shell para ação interativa.
* Conditional Constructs::	Comandos de shell para execução 
condicional.
* Command Grouping::		Maneiras de agrupar comandos.
@end menu

Comandos de composição são os construtores de programação do shell.
Cada construtor inicia com uma palavra reservada ou operador de controle 
e é finalizado pela palavra reservada ou operador correspondentes.
Quaisquer redireções (@pxref{Redirections}) associadas com um comando de 
composição se aplicam a todos os comandos dentro desse comando de 
composição a menos que explicitamente sobrepostas.

Na maioria dos casos uma lista de comandos em uma descrição de comando 
de composição pode ser separada do restante do comando por um ou mais 
newlines, e pode ser seguida por um newline ao invés de um ponto e 
vírgula.

Bash disponibiliza construtores de loops, comandos condicionais e 
mecanismos para agrupar comandos e executá-los como uma unidade.

@node Looping Constructs
@subsubsection Looping Constructs
@cindex commands, looping

Bash suporta os seguintes construtores de loops.

Note que sempre que um @samp{;} aparecer na descrição de uma sintaxe de 
comando, ele pode ser substituído por um ou mais newlines.

@table @code
@item until
@rwindex until
@rwindex do
@rwindex done
A sintaxe do comando @code{until} é:

@example
until @var{test-commands}; do @var{consequent-commands}; done
@end example

Execute @var{consequent-commands} tantas vezes quantas 
@var{test-commands} tenham um status de saída qualquer diferente de 
zero.
O status de retorno é o status de saída do último comando executado no 
@var{consequent-commands}, ou zero se nenhum comando foi executado.

@item while
@rwindex while
A sintaxe do comando @code{while} é:

@example
while @var{test-commands}; do @var{consequent-commands}; done
@end example

Execute @var{consequent-commands} tantas vezes quantas 
@var{test-commands} tenham um status de saída igual a zero.
O status de retorno é o status de saída do último comando executado em 
@var{consequent-commands}, ou zero se nenhum comando foi executado.

@item for
@rwindex for
A sintaxe do comando @code{for} é:

@example
for @var{name} [ [in [@var{words} @dots{}] ] ; ] do @var{commands}; done
@end example

Expanda @var{words}, e execute @var{commands} uma vez para cada membro 
na lista resultante, com @var{name} apontando para o membro atual.
Se @samp{in @var{words}} não estiver presente, o comando @code{for} 
executa os @var{commands} uma vez para cada parâmetro posicional que 
estiver configurado, como se @samp{in "$@@"} tivesse sido especificado 
(@pxref{Special Parameters}).
O status de retorno é o status de saída do último comando que executar.
Se não existirem itens na expansão de @var{words}, nenhum comando é 
executado, e o status de retorno será igual a zero.

Uma forma altenartiva do comando @code{for} também é suportada:

@example
for (( @var{expr1} ; @var{expr2} ; @var{expr3} )) ; do @var{commands} ; done
@end example

Primeiro, a expressão aritmética @var{expr1} é calculada de acordo com 
as regras descritas abaixo (@pxref{Shell Arithmetic}).
A expressão aritmética @var{expr2} é então calculada repetidamente até 
que ela seja igual a zero.
A cada vez que @var{expr2} seja igual a um valor qualquer diferente de 
zero, @var{commands} são executados e a expressão aritmética @var{expr3} 
é calculada.
Se qualquer expressão for omitida, ela se comporta como se o resultado 
dela fosse igual a 1.
O valor de retorno é o status de saída do último comando em 
@var{commands} que for executado, ou falso se quaisquer das expressões 
for inválida.
@end table

Os comandos internos @code{break} e @code{continue} podem ser utilizados 
para controlar a execução do loop.

@node Conditional Constructs
@subsubsection Conditional Constructs
@cindex commands, conditional

@table @code
@item if
@rwindex if
@rwindex then
@rwindex else
@rwindex elif
@rwindex fi
A sintaxe do comando @code{if} é:

@example
if @var{test-commands}; then
  @var{consequent-commands};
[elif @var{more-test-commands}; then
  @var{more-consequents};]
[else @var{alternate-consequents};]
fi
@end example

A lista @var{test-commands} é executada, e se o seu status de retorno 
for igual a zero, a lista @var{consequent-commands} é executada.
Se @var{test-commands} retornar um status diferente de zero, cada lista 
@code{elif} é executada, e se o seu status de saída for igual a zero, os 
@var{more-consequents} correspondentes são executados e o comando 
finaliza.
Se @samp{else @var{alternate-consequents}} estiver presente, e o comando 
final na cláusula @code{if} ou @code{elif} final tiver um status de 
saída qualquer diferente de zero, então @var{alternate-consequents} são 
executados.
O status de retorno é o status de saída do último comando executado, ou 
zero se nenhuma condição testada for verdadeira.

@item case
@rwindex case
@rwindex in
@rwindex esac
A sintaxe do comando @code{case} é:

@example
case @var{word} in [ [(] @var{pattern} [| @var{pattern}]@dots{}) @var{command-list} ;;]@dots{} esac
@end example

@code{case} seletivamente executará a @var{command-list} correspondente 
à primeira variável @var{pattern} que coincidir com a variável @var{word}.
Se a opção de shell @code{nocasematch} (veja-se a descrição de 
@code{shopt} em @ref{The Shopt Builtin}) estiver habilitada, então a 
coincidência é testada sem considerar maiúsculas e minúsculas.
O caracter @samp{|} é utilizado para separar múltiplas variáveis 
@var{pattern}, e o operador @samp{)} finaliza a lista de variáveis.
Uma lista de variáveis @var{pattern} e uma lista de comandos associada é 
conhecida como uma @var{clause}.

Cada cláusula deve necessariamente ser finalizada com um @samp{;;}, 
@samp{;&}, ou um @samp{;;&}.
A @var{word} está sujeita a expansão de til, expansão de parâmetro, 
substituição de comando, expansão aritmética e remoção de aspas antes 
que a coincidência seja testada.   Cada @var{pattern} está sujeita a 
expansão de til, expansão de parâmetro, substituição de comando e 
expansão aritmética.

Pode existir um número arbitrário de cláusulas @code{case}, cada uma das 
quais finalizada por um @samp{;;}, @samp{;&}, ou um @samp{;;&}.
O primeiro padrão que coincidir determina a lista de comandos a serem 
executados.
É bastante comum utilizar @samp{*} como o padrão final para definir o 
caso padrão, sabido que tal padrão sempre coincidirá.

Eis um exemplo utilizando @code{case} em um script que poderia ser 
utilizado para descrever uma característica interessante de um animal:

@example
echo -n "Informe o nome de um animal: "
read ANIMAL
echo -n "O $ANIMAL tem "
case $ANIMAL in
  cavalo | cachorro | gato) echo -n "quatro";;
  homem | canguru ) echo -n "duas";;
  *) echo -n "um número desconhecido de";;
esac
echo " pernas."
@end example

@noindent

Se o operador @samp{;;} for utilizado, então nenhuma coincidência 
subsequente é tentada após o primeiro padrão coincidir.
A utilização de um @samp{;&} no lugar de um @samp{;;} faz com que a 
execução continue com a @var{command-list} associada com a próxima 
cláusula, se existir alguma.
A utilização de um @samp{;&} no lugar de um @samp{;;} faz com que o 
shell teste os padrões na próxima cláusula, caso exista alguma, e 
execute quaisquer @var{command-list} associadas em cima de uma 
coincidência testada com sucesso.

O status de retorno é zero se nenhuma variável @var{pattern} coincidir.   
Por outro lado, o status de retorno é o status de saída da 
@var{command-list} executada.

@item select
@rwindex select

O construtor @code{select} permite a fácil geração de menus.
Ele tem quase a mesma sintaxe que o comando @code{for}:

@example
select @var{name} [in @var{words} @dots{}]; do @var{commands}; done
@end example

A lista de palavras seguintes a @code{in} é expandida, gerando uma lista 
de itens.   O conjunto de palavras expandidas é impresso no fluxo 
de saída padrão de erro, cada uma das quais precedida por um número.   
Se o @samp{in @var{words}} for omitido, os parâmetros posicionais serão 
impressos, como se @samp{in "$@@"} tivesse sido especificado.
O prompt @env{PS3} é então exibido e uma linha é lida a partir da 
entrada padrão.
Se a linha consistir de um número correspondente a uma das palavras 
exibidas, então o valor de @var{name} é configurada para aquela palavra.
Se a linha estiver vazia, então o comando @code{select} completa sua 
execução.
Qualquer outro valor lido faz com que @var{name} seja configurada para 
nulo.
A linha lida é salva na variável @env{REPLY}.

Os @var{commands} são executados após cada seleção até que um comando 
@code{break} seja executado, ponto no qual o comando @code{select} 
completa a sua execução.

Eis um exemplo que permite ao usuário pegar um nome de arquivo a partir 
do diretório de trabalho atual, e exibir o nome e índice do arquivo 
selecionado.

@example
select fname in *;
do
	echo você selecionou $fname \($REPLY\)
	break;
done
@end example

@item ((@dots{}))
@example
(( @var{expression} ))
@end example

A @var{expression} aritmética é calculada de acordo com as regras 
descritas abaixo (@pxref{Shell Arithmetic}).
Se o valor da expressão for diferente de zero, então o status de retorno 
é 0; do contrário o status de retorno é 1.   Isso é exatamente 
equivalente a
@example
let "@var{expression}"
@end example
@noindent
Veja-se @xref{Bash Builtins}, para uma descrição completa acerca do 
comando interno @code{let}.

@item [[@dots{}]]
@rwindex [[
@rwindex ]]
@example
[[ @var{expression} ]]
@end example

Retorna um status de 0 ou 1 dependendo da avaliação da expressão 
condicional @var{expression}.
Expressões são compostas de primários descritos abaixo em @ref{Bash 
Conditional Expressions}.
A divisão de palavras (word splitting) e a expansão de nome de arquivo 
não são feitas nas palavras contidas entre o @code{[[} e o @code{]]}; 
expansão de til, expansão de variável e parâmetro, expansão aritmética, 
substituição de comando, substituição de processo e remoção de aspas são 
feitas.
Operadores condicionais tais como @samp{-f} devem necessariamente estar 
fora de aspas para serem reconhecidos como primários.

Quando utilizados com @code{[[}, os operadores @samp{<} e @samp{>} 
ordenam lexicograficamente utilizando o locale atual.

Quando os operadores @samp{==} e @samp{!=} são utilizados, a sequência 
de caracteres à direita do operador é considerada um padrão e uma 
coinciência é tentada de acordo com as regras descritas abaixo em 
@ref{Pattern Matching}, como se a opção de shell @code{extglob} 
estivesse habilitada.
O operador @samp{=} é idêntico ao @samp{==}.
Se a opção de shell @code{nocasematch} (veja-se a descrição de 
@code{shopt} em @ref{The Shopt Builtin}) estiver habilitada, então a 
coincidência é feita sem levar em consideração maiúsculas e minúsculas.
O valor de retorno é 0 se a sequência de caracteres coincidir 
(@samp{==}) ou não coincidir (@samp{!=}) com o padrão, e 1 nos outros 
casos.
Qualquer parte do padrão pode ser colocada entre aspas para forçar que 
tal porção seja testada como uma sequência de caracteres.

Um operador binário adicional, @samp{=~}, está disponível, com a mesma 
precedência que @samp{==} e @samp{!=}.
Quando esse operador é utilizado, a sequência de caracteres à direita do 
operador é considerada como sendo uma expressão regular extendida e uma 
coincidência é tentada de acordo (como em @i{regex}3)).
O valor de retorno é 0 se a sequência de caracteres coincidir com o 
padrão, e 1 caso contrário.
Se a expressão regular estiver sintaticamente incorreta, o valor de 
retorno da expressão condicional é igual a 2.
Se a opção de shell @code{nocasematch} (veja-se a descrição de 
@code{shopt} em @ref{The Shopt Builtin}) estiver habilitada, a 
coincidência é tentada sem levar em consideração maiúsculas e 
minúsculas.
Qualquer parte do padrão pode ser colocado entre aspas para forçar que 
essa porção seja tratada como sendo uma sequência de caracteres.
As expressões entre parênteses em expressões regulares devem 
necessariamente serem tratadas cuidadosamente, dado que caracteres 
normais para indicar aspas perdem seus significados entre parênteses.
Se o padrão for armazenado em uma variável de shell, então colocar-se a 
expansão da variável entre aspas força o padrão inteiro ser tratado como 
sendo uma sequência de caracteres.
As subsequências de caracteres testadas por subexpressões entre 
parênteses dentro da expressão regular são salvas na variável de vetor 
@code{BASH_REMATCH}.
O elemento do @code{BASH_REMATCH} cujo indice é 0 é a porção da 
sequência de caracteres coincidente com a expressão regular inteira.
O elemento do @code{BASH_REMATCH} cujo índice é @var{n} é a porção da 
sequência de caracteres coincidente com a @var{n}ésima subexpressão 
entre parênteses.

Por exemplo, o seguinte coincidirá com uma linha (armazenada na 
variável de shell @var{line})
Se existir uma sequência de caracteres no valor consistente de qualquer 
número, incluindo zero; de caracteres espaço; zero ou um instâncias de 
@samp{a}, então um @samp{b}:
@example
[[ $line =~ [[:space:]]*(a)?b ]]
@end example

@noindent
Isso significa que valores como @samp{aab} e @samp{  aaaaaab} 
coincidirão, como também coincidirá uma linha que contenha um @samp{b} 
em qualquer lugar no seu valor.

O armazenamento da expressão regular em uma variável de shell é 
frequentemente uma maneira útil de se evitar problemas com caracteres 
que fazem encapsulamento e que são especiais para o shell.
As vezes é difícil de se especificar uma expressão regular literalmente 
sem se utilizar aspas, ou se manter um controle do encapsulamento 
utilizado por expressões regulares enquanto se presta atenção à remoção 
de aspas do shell.

A utilização de uma variável de shell para armazenar o padrão reduz tais 
problemas.   Por exemplo, o seguinte é equivalente ao acima:
@example
pattern='[[:space:]]*(a)?b'
[[ $line =~ $pattern ]]
@end example

@noindent
Se você deseja coincidir um caracter que seja especial para a gramática 
da expressão regular, então esse caracter tem de ser encapsulado para 
remover o seu significado especial.
Isso significa que no padrão @samp{xxx.txt}, o @samp{.} coincide com 
qualquer caracter na sequência de caracteres (seu significado usual de 
expressão regular), porém no padrão @samp{"xxx.txt"} ele pode apenas 
coincidir com um @samp{.} literal.
Os programadores shell deveriam ter um cuidado especial com as barras 
invertidas, dado que as barras invertidas são utilizadas tanto pelo 
shell quanto por expressões regulares para remover o significado 
especial do caracter seguinte à barra invertida.
Os dois conjuntos de comandos seguintes @emph{não} são equivalentes:
@example
pattern='\.'

[[ . =~ $pattern ]]
[[ . =~ \. ]]

[[ . =~ "$pattern" ]]
[[ . =~ '\.' ]]
@end example

@noindent
Os primeiros dois terão sucesso, porém os dois últimos não, pois nos 
dois últimos a barra invertida será parte do padrão a ser testado.
Nos primeiros dois exemplos, a barra invertida remove o significado 
especial do @samp{.}, de forma que o @samp{.} literal coincide.
Se a sequência de caracteres nos dois primeiros exemplos fosse qualquer 
outra coisa que não o @samp{.}, diga-se @samp{a}, o padrão não 
coincidiria, pois o @samp{.} encapsulado no padrão perde seu significado 
especial de coincidir com qualquer caracter único.

As expressões podem ser combinadas utilizando-se os seguintes 
operadores, listados em ordem decrescente de precedência:

@table @code
@item ( @var{expression} )
Retorna o valor de @var{expression}.
Isso pode ser utilizado para anular a precedência normal de operadores.

@item ! @var{expression}
Verdadeiro se @var{expression} for falsa.

@item @var{expression1} && @var{expression2}
Verdadeiro se ambas @var{expression1} e @var{expression2} forem falsas.

@item @var{expression1} || @var{expression2}
Verdadeiro se ou @var{expression1} ou @var{expression2} for 
verdadeira.
@end table

@noindent
Os operadores @code{&&} e @code{||} não calculam @var{expression2} se o 
valor de @var{expression1} for suficiente para determinar o valor de 
retorno da expressão condicional inteira.
@end table

@node Command Grouping
@subsubsection Grouping Commands
@cindex commands, grouping

Bash provê duas maneiras de agrupar uma lista de comandos a serem 
executados como uma unidade.   Quando comandos são agrupados, as 
redireções podem ser aplicadas à lista de comandos inteira.   Por 
exemplo, a saída de todos os comandos na lista pode ser redirecionada 
para um fluxo único.

@table @code
@item ()
@example
( @var{list} )
@end example

Colocar uma lista de comandos entre parênteses faz com que um ambiente 
de subshell seja criado (@pxref{Command Execution Environment}), e cada 
um dos comandos na @var{list} sejam executados nesse subshell.   Uma vez 
que a @var{list} seja executada em um subshell, atribuições à variáveis 
não permanecem em efeito após a finalização do subshell.

@item @{@}
@rwindex @{
@rwindex @}
@example
@{ @var{list}; @}
@end example

Colocar uma lista de comandos entre chaves faz com que a lista seja 
executada no contexto do shell atual.   Nenhum subshell é criado.
O ponto e vírgula (ou newline) seguinte a @var{list} é obrigatório.
@end table

Adicionalmente à criação de um subshell, existe uma diferença sútil 
entre essas duas construções devida a razões históricas.   As chaves são 
@code{reserved words}, de forma que elas devem necessariamente serem 
separadas da @var{list} por @code{blank}s ou outros metacaracteres de 
shell.
Os parênteses são @code{operators}, e são reconhecidos como tokens 
separados pelo shell mesmo se eles não forem separados da @var{list} por 
espaços em branco.

O status de saída de ambas dessas construções é o status de saída de 
@var{list}.

@node Coprocesses
@subsection Coprocesses
@cindex coprocess

Um @code{coprocess} é um comando de shell precedido pela palavra 
reservada @code{coproc}.
Um coprocesso é executado assíncronamente em um subshell, como se o 
comando tivesse sido finalizado com o operador de controle @samp{&}, com 
um tubo de mão dupla estabelecido entre o shell em execução e o 
coprocesso.

O formato de um coprocesso é:
@example
coproc [@var{NAME}] @var{command} [@var{redirections}]
@end example

@noindent
Isso cria um coprocesso chamado @var{NAME}.
Se @var{NAME} não for informado, então o nome padrão é @var{COPROC}.
@var{NAME} deve necessariamente não ser informado se @var{command} for 
um comando simples (@pxref{Simple Commands}); do contrário, @var{NAME} é 
interpretada como sendo a primeira palavra do comando simples.

Quando o coprocesso é executado, o shell cria um vetor variável 
(@pxref{Arrays}) chamado @env{NAME} no contexto do shell em execução.
A saída padrão de @var{command} é conectada via tubo ao arquivo 
descritor no shell em execução, e esse arquivo descritor é atribuído ao 
primeiro elemento do vetor que é @env{NAME}[0].
A entrada padrão de @var{command} é conectada via tubo ao arquivo 
descritor no shell em execução, e esse arquivo descritor é atribuído ao 
segundo elemento do vetor que é @env{NAME}[1].
Esse tubo é estabelecido antes de quaisquer redireções especificadas 
pelo comando (@pxref{Redirections}).
Os descritores de arquivo podem ser utilizados como argumentos para 
redireções e comandos de shell utilizando-se expansões de palavras 
padrão.
Os descritores de arquivo não estão disponíveis em subshells.

O Identificador (ID) de processo do shell gerado para executar o 
coprocesso está disponível como sendo o valor da variável 
@env{NAME}_PID.
O comando interno @code{wait} pode ser utilizado para aguardar o 
coprocesso finalizar.

Dado que o coprocesso é criado como um comando assíncrono, o comando 
@code{coproc} sempre retorna sucesso.
O status de retorno de um coprocesso é o status de saída de 
@var{command}.

@node GNU Parallel
@subsection GNU Parallel

Existem maneiras de executar comandos em paralelo os quais não são 
internos ao Bash.
GNU Parallel é uma ferramenta para fazer justamente isso.

GNU Parallel, como seu próprio nome sugere, pode ser utilizado para 
construir e executar comandos em paralelo.   Você pode executar o 
mesmo comando com argumentos diferentes, quer sejam nomes de arquivos, 
nomes de usuários, nomes de máquinas ou linhas lidas de um arquivo.   
GNU Parallel fornece referências de atalhos para muitas das mais comuns 
operações (linhas de entrada, várias porções da linha de entrada, 
maneiras diferentes de especificar a fonte de entrada e assim por 
diante).   GNU Parallel pode substituir @code{xargs} ou alimentar 
comandos a partir de suas fontes de entrada para várias instâncias 
distintas de Bash.

Para uma descrição completa, veja-se a documentação de GNU Parallel.   
Alguns exemplos deveriam fornecer uma introdução breve ao seu uso.

Por exemplo, é simples substituir @code{xargs} para compactar todos os 
arquivos html com gzip no diretório atual e seus subdiretórios:
@example
find . -type f -name '*.html' -print | parallel gzip
@end example
@noindent
Se você necessitar proteger caracteres especiais tais como newlines em 
nomes de arquivos, utilize a opção do find @option{-print0} e a opção do 
GNU Parallel @option{-0}.

Você pode utilizar GNU Parallel para mover arquivos do diretório atual 
quando o número de arquivos for demasiadamente grande para se processar 
com uma invocação de @code{mv}:
@example
ls | parallel mv @{@} destdir
@end example

Como se pode observar, o @{@} é substituído por cada linha lida a partir 
da entrada padrão.
Ao tempo em que a utilização de @code{ls} funcionará na maioria das 
instâncias, isso não é suficiente para lidar com todos os nomes de 
arquivos.
Caso se necessite acomodar caracteres especiais em nomes de arquivos, 
pode-se utilizar

@example
find . -depth 1 \! -name '.*' -print0 | parallel -0 mv @{@} destdir
@end example

@noindent
conforme mencionado acima.

Isso executará tantos comandos @code{mv} quantos sejam os arquivos no 
diretório de trabalho atual.
Pode-se simular um @code{xargs} paralelo adicionando-se a opção 
@option{-X}:
@example
find . -depth 1 \! -name '.*' -print0 | parallel -0 -X mv @{@} destdir
@end example

GNU Parallel pode substituir certos idiomas comuns que operam em linhas 
lidas a partir de um arquivo (nesse caso, nomes de arquivos listados um 
por linha):
@example
	while IFS= read -r x; do
		do-something1 "$x" "config-$x"
		do-something2 < "$x"
	done < file | process-output
@end example

@noindent
com uma sintaxe mais compacta reminiscente das anônimas:
@example
cat list | parallel "do-something1 @{@} config-@{@} ; do-something2 < @{@}" | process-output
@end example

GNU Parallel fornece um mecanismo implementado internamente para remover 
extensões de nomes de arquivos, o qual se presta a transformações de 
arquivos em lote ou renomeamento:
@example
ls *.gz | parallel -j+0 "zcat @{@} | bzip2 >@{.@}.bz2 && rm @{@}"
@end example
@noindent
Isso irá recompactar todos os arquivos no diretório de trabalho atual 
com nomes terminando em .gz utilizando bzip2, executando uma tarefa por 
CPU (-j+0) em paralelo.
(Utiliza-se @code{ls} para brevidade aqui; utilizando-se @code{find} 
como acima é mais robusto em face de nomes de arquivos contendo 
caracteres inesperados).
GNU Parallel pode obter argumentos a partir da linha de comando; o 
exemplo acima também pode ser escrito como

@example
parallel "zcat @{@} | bzip2 >@{.@}.bz2 && rm @{@}" ::: *.gz
@end example

Se um comando gerar saída, pode-se desejar preservar a ordem de entrada 
na saída.   Por exemplo, o comando seguinte
@example
@{ echo foss.org.my ; echo debian.org; echo freenetproject.org; @} | parallel traceroute
@end example
@noindent
Exibirá aquela saída da invocação de traceroute que finalizar primeiro.
Adicionando-se a opção @option{-k}
@example
@{ echo foss.org.my ; echo debian.org; echo freenetproject.org; @} | parallel -k traceroute
@end example
@noindent
se terá a certeza de que a saída de @code{traceroute foss.org.my} será 
exibida primeiro.

Finalmente, GNU Parallel pode ser utilizado para se executar uma 
sequência de comandos de shell em paralelo, similar a @samp{cat file | bash}.
Não é incomum tomar-se uma lista de nomes de arquivos, criar-se uma 
série de comandos de shell para operar em cima deles, e fornecer tal 
lista de comandos a um shell.
GNU Parallel pode acelerar isso.   Presumindo-se que @file{file} contém 
uma lista de comandos de shell, um por linha,

@example
parallel -j 10 < file
@end example

@noindent
irá avaliar os comandos utilizando o shell (dado que nenhum comando 
explícito é fornecido como um argumento), em blocos de dez (10) tarefas 
de shell por vez.

@node Shell Functions
@section Shell Functions
@cindex shell function
@cindex functions, shell

Funções de shell são uma maneira de agrupar comandos para execução 
posterior utilizando um nome único para o grupo.   Elas são executadas 
exatamente como um comando "regular".
Quando o nome de uma função de shell é utilizada como um nome de comando 
simples, a lista dos comandos associados com aquele nome de função é 
executada.
Funções de shell são executadas no contexto do shell atual; nenhum 
processo novo é criado para interpretá-los.

As funções são declaradas utilizando-se esta sintaxe:

@rwindex function
@example
@var{name} () @var{compound-command} [ @var{redirections} ]
@end example

or

@example
function @var{name} [()] @var{compound-command} [ @var{redirections} ]
@end example

Isso define uma função de shell chamada @var{name}.   A palavra 
reservada @code{function} é opcional.   Se a palavra reservada 
@code{function} for informada, então os parênteses são opcionais.
O @var{body} da função é o comando composto @var{compound-command} 
(@pxref{Compound Commands}).
Esse comando é em regra uma @var{list} encapsulada entre @{ e @}, porém 
pode ser qualquer comando composto listado acima.
@var{compound-command} é executado sempre que @var{name} for 
especificado como o nome do comando.
Quando o shell está em modo @sc{posix} (@pxref{Bash POSIX Mode}), 
@var{name} pode não ser o mesmo que um dos comandos internos especiais 
(@pxref{Special Builtins}).
Quaisquer redireções (@pxref{Redirections}) associadas com a função de 
shell são feitas quando a função é executada.

Uma definição de função pode ser deletada utilizando-se a opção 
@option{-f} para o comando interno @code{unset} (@pxref{Bourne Shell 
Builtins}).

O status de saída de uma definição de função é zero a menos que um erro 
de sintaxe ocorra ou uma função somente leitura com o mesmo nome já 
exista.
Quando executada, o status de saída de uma função é o status de saída do 
último comando executado no corpo dessa função.

Perceba que, por razões históricas, no uso mais comum as chaves que 
envolvem o corpo de uma função devem necessariamente serem separadas do 
corpo por caracteres @code{blank}s ou newlines.
Isso é porque as chaves são palavras reservadas e apenas são 
reconhecidas como tais quando elas estão separadas da lista de comando 
por espaço em branco ou um outro metacaracter de shell.
Também, quando da utilização de chaves, a @var{list} deve 
necessariamente ser finalizada por um ponto e vírgula, ou por um 
@samp{&}, ou por um newline.

Quando a função é executada, os argumentos para a função se tornam os 
parâmetros posicionais durante a execução da função (@pxref{Positional 
Parameters}).
O parâmetro especial @samp{#} que é expandido para o número de 
parâmetros posicionais é atualizado para refletir a mudança.
O parâmetro especial @code{0} fica imodificado.
O primeiro elemento da variável @env{FUNCNAME} é configurado para o nome 
da função ao tempo em que a função é executada.

Todos os outros aspectos do ambiente de execução de shell são idênticos 
entre a função e quem a invoca, com as seguintes exceções:
os coletores @env{DEBUG} e @env{RETURN} não são herdados, a menos que a 
função tenha recebido o atributo @code{trace} utilizando o comando 
interno @code{declare} ou a opção @code{-o functrace} tenha sido 
habilitada com o comando interno @code{set}, (caso no qual todas as 
funções herdam os coletores @env{DEBUG} e @env{RETURN}, o coletor 
@env{ERR} não é herdado, a menos que a opção de shell @code{-o errtrace} 
tenha sido habilitada.
Veja-se @xref{Bourne Shell Builtins}, para a descrição do comando 
interno @code{trap}.

A variável @env{FUNCNEST}, se configurada para um valor numérico maior 
que zero, define um nível máximo de aninhamento de função.   As 
invocações de função que excederem o limite fazem com que o comando 
inteiro aborte.

Se o comando inteiro @code{return} for executado em uma função, então a 
função completa sua execução e reinicia com o próximo comando após a 
chamada de função.
Qualquer comando associado com o coletor @code{RETURN} é executado antes 
que a função reinicie sua execução.
Quando uma função completa sua execução, os valores dos parâmetros 
posicionais e o parâmetro especial @samp{#} são restaurados para os 
valores que eles tinham antes da execução da função.   Se um argumento 
numérico é dado ao @code{return}, então esse é o status de retorno da 
função; do contrário o status de retorno da função é o status de saída 
do último comando executado antes do @code{return}.

Variáveis locais para a função podem ser declaradas com o comando 
interno @code{local}.   Essas variáveis são visíveis apenas para a 
função e aos comandos que a função invocar.

Os nomes de função e definições podem ser listados com a opção 
@option{-f} para o comando interno @code{declare} (@code{typeset}) 
(@pxref{Bash Builtins}).
A opção @option{-F} para @code{declare} ou @code{typeset} listará 
apenas os nomes de funções (e opcionalmente o arquivo fonte e número da 
linha, se a opção de shell @code{extdebug} estiver habilitada).
As funções podem ser exportadas, de forma que subshells automaticamente 
tenham elas definidas com a opção @option{-f} para o comando interno 
@code{export} (@pxref{Bourne Shell Builtins}).
Perceba que as funções e variáveis de shell com o mesmo nome podem 
resultar em entradas múltiplas identicamente nomeadas no ambiente 
passadas para os filhos do shell.
Cuidado deveria ser tomado em casos onde isso pode causar um problema.

As funções podem ser recursivas.
A variável @code{FUNCNEST} pode ser utilizada para limitar a 
profundidade da pilha de chamada da função e restringir o número de 
invocações de função.
Por padrão, nenhum limite é colocado no número de chamadas recursivas.

@node Shell Parameters
@section Shell Parameters
@cindex parameters
@cindex variable, shell
@cindex shell variable

@menu
* Positional Parameters::	Os argumentos de linha de comando do 
shell.
* Special Parameters::		Parâmetros denotados por caracteres 
especiais.
@end menu

Um @var{parameter} é uma entidade que armazena valores.   Pode ser um 
@code{name}, um número, ou um dos caracteres especiais listados abaixo.
Uma @var{variable} é um parâmetro denotado por um @code{name}.
Uma variável tem um @var{value} e zero ou mais @var{attributes}.
Atributos são atribuídos utilizando-se o comando interno @code{declare} 
(veja-se a descrição do comando interno @code{declare} em @ref{Bash 
Builtins}).

Um parâmetro é configurado se a ele foi atribuído um valor.   A frase 
null é um valor válido.   Uma vez que uma variável for configurada, ela 
pode ser desconfigurada apenas utilizando-se o comando interno 
@code{unset}.

Pode-se atribuir um valor a uma variável com uma declaração da forma
@example
@var{name}=[@var{value}]
@end example
@noindent
Se @var{value} não for dado, é atribuída para a variável a palavra null.  
Todos os @var{value}s estão sujeitos à expansão de til, expansão de 
parâmetro e variável, substituição de comando, expansão aritmética e 
remoção de aspas (detalhadas abaixo).   Se a variável tiver seu atributo 
@code{integer} configurado, então @var{value} é calculado como uma 
expressão aritmética mesmo se a expansão @code{$((@dots{}))} não for 
utilizada (veja-se @ref{Arithmetic Expansion}).
Divisão de palavra não é feita, com a exceção de @code{"$@@"} conforme 
abaixo exposto.
Expansão de nome de arquivo não é feita.
Declarações de atribuição também podem aparecer como argumentos para os 
comandos internos @code{alias}, @code{declare}, @code{typeset}, 
@code{export}, @code{readonly}, e @code{local}.
Quando em modo @sc{posix} (veja-se @ref{Bash POSIX Mode}), esse comandos 
internos podem aparecer em um comando após uma ou mais instâncias do 
comando interno @code{command} e conservar essas propriedades de 
declaração de atribuição.

No contexto onde uma declaração de atribuição está atribuindo um valor 
para uma variável de shell ou índice de vetor (veja-se @ref{Arrays}), o 
operador @samp{+=} pode ser utilizado ou para acrescentar ou para somar 
ao valor prévio da variável.
Quando @samp{+=} é aplicado a uma variável para a qual o atributo 
@var{integer} tenha sido configurado, @var{value} é calculado como uma 
expressão aritmética e adicionado ao valor atual da variável, o qual 
também é calculado.
Quando @samp{+=} é aplicado a uma variável de vetor utilizando-se 
atribuição composta (veja-se @ref{Arrays}), o valor da variável não é 
desconfigurado (como o é ao se utilizar @samp{=}), e novos valores são 
acrescentados ao vetor iniciando naquele valor maior que o índice máximo 
do vetor (para vetores indexados), ou somados como pares de valor-chave 
adicionais em um vetor associativo.
Quando aplicado a uma variável de valor de sequência de caracteres, 
@var{value} é expandido e acrescentado ao valor da variável.

O atributo @var{nameref} de uma variável pode ser atribuído 
utilizando-se a opção @option{-n} para os comandos internos 
\fBdeclare\fP ou \fBlocal\fP (veja-se @ref{Bash Builtins}) para criar 
uma @var{nameref}, ou uma referência a uma outra variável.
Isso permite que variáveis sejam manipuladas indiretamente.
Sempre que a variável nameref é referênciada ou é atribuída, a operação 
é atualmente feita na variável especificada pelo valor da variável 
nameref.
Uma variável nameref é usualmente utilizada dentro de funções de shell 
para referenciar uma variável cujo nome é passado como um argumento para 
a função.
Por exemplo, se um nome de variável é passado para uma função de shell 
como o seu primeiro argumento, executar
@example
declare -n ref=$1
@end example
@noindent
dentro da função cria uma variável nameref @var{ref} cujo valor é o nome 
da variável passado como o primeiro argumento.
Referências e atribuições a @var{ref} são tratadas como referências e 
atribuições à variável cujo nome foi passado como @code{$1}.

Se a variável de controle em um loop @code{for} tem o atributo nameref, 
a lista de palavras pode ser uma lista de variáveis de shell, e uma 
referência de nome será estabelecida para cada palavra na lista, em 
sequência, quando o loop é executado.
Às variáveis de vetores não pode ser atribuído o atributo @option{-n}.
Entretanto, variáveis nameref podem referênciar variáveis de vetor e 
variáveis de vetor subscritas.
Os nameref podem ser desconfigurados utilizando-se a opção @option{-n} 
para o comando interno @code{unset} (veja-se @ref{Bourne Shell 
Builtins}).
Do contrário, se @code{unset} for executado com o nome de uma variável 
nameref como um argumento, a variável referênciada pela variável nameref 
será desconfigurada.

@node Positional Parameters
@subsection Positional Parameters
@cindex parameters, positional

Um @var{positional parameter} é um parâmetro denotado por um ou mais 
dígitos, qualquer outro diferente do dígito único @code{0}.   Parâmetros 
posicionais são atribuídos via argumentos de shell quando esse é 
invocado, e podem ser reatribuídos utilizando-se o comando interno 
@code{set}.
O parâmetro posicional @code{N} pode ser referenciado como 
@code{$@{N@}}, ou como @code{$N} quando @code{N} consiste de um dígito 
único.
Parãmetros posicionais não podem ser atribuídos com declarações de 
atribuição.
Os comandos internos @code{set} e @code{shift} são utilizados para 
configurar e desconfigurar os parâmetros posicionais (veja-se @ref{Shell 
Builtin Commands}).
Os parâmetros posicionais são substituídos temporariamente quando uma 
função de shell é executada (veja-se @ref{Shell Functions}).

Quando um parâmetro posicional consistindo de mais que um dígito único é 
expandido, ele deve necessariamente estar contido entre chaves.

@node Special Parameters
@subsection Special Parameters
@cindex parameters, special

O shell trata diversos parâmetros especialmente.   Tais parâmetros 
apenas podem ser referênciados; atribuição a eles não é permitida.

@vtable @code

@item *
@vindex $*
($*) Expande para os parâmetros posicionais, iniciando de um.
Quando a expansão não está dentro de aspas duplas, cada parâmetro 
posicional expande para uma palavra separada.
Em contextos nos quais tal expansão é feita, as mencionadas palavras são 
objeto de separação mais ampla de palavras e de expansão de nome de 
caminho.
Quando a expansão acontece dentro de aspas duplas, ela expande para uma 
palavra única com o valor de cada parâmetro separado pelo primeiro 
caracter da variável especial @env{IFS}.   Isto é, @code{"$*"} é 
equivalente a @code{"$1@var{c}$2@var{c}@dots{}"}, onde @var{c} é o 
primeiro caracter do valor da variável @code{IFS}.
Se @env{IFS} estiver desconfigurada, os parâmetros são separados por 
espaços.
Se @env{IFS} for null, os parâmetros são unidos sem separadores 
intervenientes.

@item @@
@vindex $@@
($@@) Expande para os parâmetros posicionais, iniciando em um.   Quando 
a expansão acontece dentro de aspas duplas, cada parâmetro expande para 
uma palavra separada.   Isto é, @code{"$@@"} é equivalente a @code{"$1" 
"$2" @dots{}}.
Se a expansão de aspas duplas ocorre dentro de uma palavra, a expansão 
do primeiro parâmetro é unido com a parte inicial da palavra original, e 
a expansão do último parâmetro é unido com a última parte da palavra 
original.
Quando não existem parâmetros posicionais, @code{"$@@"} e @code{$@@} 
expandem para nada (ou seja, os parâmetros posicionais são removidos).

@item #
@vindex $#
($#) Expande para o número de parâmetros posicionais em decimal.

@item ?
@vindex $?
($?) Expande para o status de saída do canal de comunicação executado em 
primeiro plano mais recentemente.

@item -
@vindex $-
($-, um hífen.)  Expande para as flags de opção atuais conforme 
especificadas ao tempo da invocação, pelo comando interno @code{set}, ou 
aquelas configuradas pelo próprio shell (tal como a opção @option{-i}).

@item $
@vindex $$
($$) Expande para o @sc{id} de processo do shell.   Dentro de um 
subshell @code{()}, ele expande para o @sc{id} de processo do shell que 
invoca, não o do subshell.

@item !
@vindex $!
($!) Expande para o @sc{id} de processo da tarefa colocada mais 
recentemente em segundo plano, seja executada como um comando assíncrono 
ou utilizando o comando interno @code{bg} (veja-se @ref{Job Control 
Builtins}).

@item 0
@vindex $0
($0) Expande para o nome do shell ou o do script de shell.   Isso é 
configurado na inicialização do shell.   Se Bash for invocado com um 
arquivo de comandos (veja-se @ref{Shell Scripts}), @code{$0} é 
configurado para o nome desse arquivo.
Se Bash for iniciado com a opção @option{-c} (veja-se @ref{Invoking 
Bash}), então @code{$0} é configurado para o primeiro argumento após a 
sequência de caracteres ser executada, caso uma esteja presente.   Do 
contrário, é configurado para o nome do arquivo utilizado para invocar 
Bash, conforme dado pelo argumento zero.

@item _
@vindex $_
($_, um sublinhado.)
Na inicialização do shell, configurado para o nome de caminho absoluto 
utilizado para invocar o shell ou script de shell sendo executado 
conforme passado no ambiente ou na lista de argumento.
Subsequentemente, expande para o último argumento ao comando prévio, 
após expansão.
Também configurado para o nome de caminho completo utilizado para 
invocar cada comando executado e colocado no ambiente exportado para 
esse comando.
Quando da verificação de mensagem, esse parâmetro mantém o nome do 
arquivo de mensagem.
@end vtable

@node Shell Expansions
@section Shell Expansions
@cindex expansion

A expansão é realizada na linha de comando após ela ter sido dividida em 
@code{token}s.   Existem sete tipos de expansão realizadas:

@itemize @bullet
@item expansão de chave
@item expansão de til
@item expansão de parâmetro e variável
@item substituição de comando
@item expansão aritmética
@item divisão de palavra
@item expansão de nome de arquivo
@end itemize

@menu
* Brace Expansion::		Expansão de expressões dentro de chaves.
* Tilde Expansion::		Expansão do caracter ~.
* Shell Parameter Expansion::	Como Bash expande variáveis para seus 
				valores.
* Command Substitution::	Utilizando a saída de um comando como um 
				argumento.
* Arithmetic Expansion::	Como utilizar aritmética em expansões de 
				shell.
* Process Substitution::	Uma maneira de escrever e ler para e de 
				um comando.
* Word Splitting::	Como os resultados da expansão são divididos em 
			argumentos separados.
* Filename Expansion::	Uma abreviação para especificar nomes de 
			arquivos que conferem com padrões.
* Quote Removal::	Como e quando caracteres de aspas são removidos 
			de palavras.
@end menu

A ordem das expansões é: expansão de chave; expansão de til, expansão de 
parâmetro e variável, expansão aritmética, e substituição de comando 
(feita da esquerda para a direita); divisão de palavra; e expansão de 
nome de arquivo.

Em sistemas que podem suportar, existe uma expansão adicional 
disponível: @var{process substitution}.
Essa é realizada ao mesmo tempo que til, parâmetro, variável, e expansão 
aritmética e substituição de comando.

Apenas a expansão de chave, divisão de palavra e expansão de nome de 
arquivo podem mudar o número de palavras da expansão; outras expansões 
expandem a palavra única para uma palavra única.
As únicas exceções a isso são as expansões de @code{"$@@"} 
(veja-se @ref{Special Parameters}) e @code{"$@{@var{name}[@@]@}"}
(veja-se @ref{Arrays}).

Após todas as expansões @code{quote removal} (veja-se @ref{Quote 
Removal}) é realizada.

@node Brace Expansion
@subsection Brace Expansion
@cindex brace expansion
@cindex expansion, brace

Expansão de chave é um mecanismo pelo qual sequências de caracteres 
arbitrárias podem ser geradas.
Esse mecenismo é similar a @var{filename expansion} 
(veja-se @ref{Filename Expansion}), porém os nomes de arquivo gerados 
não podem existir.
Padrões para serem expandidos de chave assumem a forma de um 
@var{preamble} opcional, segiuido de ou uma série de sequências de 
caracteres separadas por vírgulas ou uma expressão sequêncial entre um 
par de chaves, seguida por um @var{postscript} opcional.
O preâmbulo é prefixado para cada sequência de caracteres contida nas 
chaves, e o postscript é então adicionado a cada sequência de caracteres 
resultante, expandindo da esquerda para a direita.

Expansões de chave podem ser aninhadas.
Os resultados de cada sequência de caracteres expandida não são 
ordenados; a ordem da esquerda para a direita é preservada.
Por exemplo,
@example
bash$ echo a@{d,c,b@}e
ade ace abe
@end example

Uma expressão sequêncial assume a forma 
@code{@{@var{x}..@var{y}[..@var{incr}]@}}, onde @var{x} e @var{y} são ou 
inteiros ou caracteres simples, e @var{incr}, um incremento opcional, é 
um inteiro.
Quando inteiros são fornecidos, a expressão expande para cada número 
entre @var{x} e @var{y}, inclusive.
Inteiros informados podem ser prefixados com @samp{0} para forçar cada 
termo a ter o mesmo comprimento.
Quando ou @var{x} ou @var{y} começam com um zero, o shell tenta forçar 
todos os termos gerados a conterem o mesmo número de dígitos, 
completando com zeros onde necessário.
Quando caracteres são informados, a expressão expande para cada caracter 
lexicograficamente entre @var{x} e @var{y}, inclusive, utilizando o 
locale C padrão.
Note que ambas @var{x} e @var{y} devem necessariamente ser do mesmo 
tipo.
Quando o incremento é informado, ele é utilizado como a diferença entre 
cada termo.   O incremento padrão é um (1) ou -1 conforme for 
apropriado.

Expansão de chave é realizada antes de quaisquer outras expansões, e 
quaisquer caracteres especiais para outras expansões são preservados no 
resultado.   É estritamente textual.   O Bash não aplica qualquer 
interpretação sintática ao contexto da expansão ou ao texto entre as 
chaves.
Para evitar conflitos com a expansão de parâmetro, a sequência 
@samp{$@{} não é considerada apta para expansão de chave.

Uma expansão de chave corretamente formada deve necessariamente conter 
chaves que abrem e fecham fora de aspas, e ao menos uma vírgula fora de 
aspas ou uma expressão sequêncial válida.
Qualquer expansão de chave incorreta é deixada não modificada.

Um @{ ou uma @samp{,} podem ser encapsuladas com uma barra invertida 
para prevenir que sejam considerados parte de uma expressão de chave.
Para evitar conflitos com a expansão de parâmetro, a sequência 
@samp{$@{} não é considerada apta para expansão de chave.

Esta construção é tipicamente utilizada como abreviação quando o prefixo 
comum das sequências de caracteres a serem geradas é maior que no 
exemplo acima:
@example
mkdir /usr/local/src/bash/@{old,new,dist,bugs@}
@end example
ou
@example
chown root /usr/@{ucb/@{ex,edit@},lib/@{ex?.?*,how_ex@}@}
@end example

@node Tilde Expansion
@subsection Tilde Expansion
@cindex tilde expansion
@cindex expansion, tilde

Se uma palavra se inicia com um caracter til fora de aspas (@samp{~}), 
todos os caracteres até a primeira barra fora de aspas (ou todos os 
caracteres, se não existir barra fora de aspas) são considerados como 
sendo um @var{tilde-prefix}.
Se nenhum dos caracteres dentro do tilde-prefix estiver dentro de aspas, 
os caracteres dentro do tilde-prefix seguinte ao til são tratados como 
sendo um possível @var{login name}.
Se esse nome de login for a sequência de caracteres "null", então o til 
é substituído pelo valor da variável de shell @env{HOME}.
Se @env{HOME} estiver desconfigurada, então o diretório home do usuário 
que executa o shell é substituído.
Do contrário, o tilde-prefix é substituído pelo diretório home associado 
com o nome de login especificado.

Se o prefix-tilde for @samp{~+}, então o valor da variável de shell 
@env{PWD} substitue o tilde-prefix.
Se o tilde-prefix for @samp{~-}, então o valor da variável de shell 
@env{OLDPWD}, se ele estiver configurado, é substituído.

Se os caracteres seguintes ao til dentro do tilde-prefix consistem de um 
número @var{N}, opcionalmente prefixado por um @samp{+} ou um @samp{-}, 
então o tilde-prefix é substituído com o elemento correspondente 
originado da pilha de diretório, como se ele pudesse ser exibido pelo 
comando interno @code{dirs} invocado com os caracteres seguindo til no 
tilde-prefix como um argumento (veja-se @ref{The Directory Stack}).
Se o tilde-prefix, sem o til, consiste de um número sem um @samp{+} ou 
@samp{-} iniciais, então @samp{+} é presumido.

Se o nome de login for inválido, ou a expansão de til falhar, a palavra 
é deixada imodificada.

Cada atribuição a variável é testada para tilde-prefixes fora de aspas 
imediatamente seguinte a @samp{:} ou o primeiro @samp{=}.
Nesse casos, a expansão de til também é feita.
Consequentemente, pode-se utilizar nomes de arquivos com tios em 
atribuições a @env{PATH}, @env{MAILPATH}, e @env{CDPATH}, e o shell 
atribui o valor expandido.

A tabela seguinte mostra como Bash trata tilde-prefixes fora de aspas:

@table @code
@item ~
O valor de @code{$HOME}
@item ~/foo
@file{$HOME/foo}

@item ~fred/foo
O subdiretório @code{foo} do diretório home do usuário @code{fred}

@item ~+/foo
@file{$PWD/foo}

@item ~-/foo
@file{$@{OLDPWD-'~-'@}/foo}

@item ~@var{N}
A sequência de caracteres que poderia ser exibida por @samp{dirs 
+@var{N}}

@item ~+@var{N}
A sequência de caracteres que poderia ser exibida por @samp{dirs 
+@var{N}}

@item ~-@var{N}
A sequência de caracteres que poderia ser exibida por @samp{dirs 
-@var{N}}
@end table

@node Shell Parameter Expansion
@subsection Shell Parameter Expansion
@cindex parameter expansion
@cindex expansion, parameter

O caracter @samp{$} introduz a expansão de parâmetro, substituição de 
comando, ou expansão aritmética.   O nome de parâmetro ou símbolo a ser 
expandido pode ser encapsulado entre chaves, as quais são opcionais, 
porém servem para proteger a variável a ser expandida dos caracteres 
imediatamente seguintes a ela, os quais poderiam ser interpretados como 
sendo parte do nome.

Quando chaves são utilizadas, a chave que finaliza e confere é o 
primeiro @samp{@}} não encapsulado por uma barra invertida ou contido em 
uma sequência de caracteres encapsulada por aspas, e não contida em uma 
expansão aritmética embutida, substituição de comando, ou expansão de 
parâmetro.

A forma básica da expansão de parâmetro é $@{@var{parameter}@}.
O valor de @var{parameter} é substituído.
O @var{parameter} é um parâmetro de shell conforme descrito acima 
(veja-se @ref{Shell Parameters}) ou uma referência de vetor 
(veja-se @ref{Arrays}).
As chaves são obrigatórias quando @var{parameter} é um parâmetro 
posicional com mais que um dígito, ou quando @var{parameter} for seguido 
por um caracter que não é para ser interpretado como sendo parte de seu 
nome.

Se o primeiro caracter de @var{parameter} for um ponto de exclamação 
(!), então isso introduz um nível de indireção de variável.
Bash utiliza o valor da variável formada a partir do resto de 
@var{parameter} como sendo o nome da variável; essa variável é então 
expandida e aquele valor é utilizado no restante da substituição, em vez 
do valor do próprio @var{parameter}.
Isso é conhecido como @code{indirect expansion}.
As exceções a isso são as expansões de $@{!@var{prefix}*@}
e $@{!@var{name}[@@]@} descritas abaixo.
O ponto de exclamação deve necessariamente imediatamente seguir o 
abre chaves com o objetivo de introduzir a expansão indireta.

Em cada um dos casos abaixo, @var{word} é objeto de expansão de til, 
expansão de parâmetro, substituição de comando, e expansão aritmética.

Quando não for realizada expansão de substring, utilizando a forma 
descrita abaixo (por exemplo, @samp{:-}), Bash testa se um parâmetro 
está desconfigurado ou é nulo.
A omissão dos dois pontos resulta em um teste apenas para um parâmetro 
que está desconfigurado.
Colocado de outra maneira, se os dois pontos forem incluídos, o operador 
verifica a existência de ambos os @var{parameter}s e se o seu valor não 
é nulo; se os dois pontos são omitidos, então o operador testa apenas a 
existência.

@table @code

@item $@{@var{parameter}:@minus{}@var{word}@}
Se @var{parameter} estiver desconfigurado ou for nulo, a expansão de 
@var{word} é substituida.   Do contrário, o valor de @var{parameter} é 
substituido.

@item $@{@var{parameter}:=@var{word}@}
Se @var{parameter} estiver desconfigurado ou for nulo, a expansão de 
@var{word} é atribuida a @var{parameter}.
O valor de @var{parameter} é então substituido.
Parâmetros posicionais e parâmetros especiais não podem ser atribuídos 
dessa maneira.

@item $@{@var{parameter}:?@var{word}@}
Se @var{parameter} for nulo ou estiver desconfigurado, a expansão de 
@var{word} (ou uma mensagem para esse efeito se @var{word} não estiver 
presente) é escrita para o descritor de erro padrão e o shell, se não 
for interativo, sai.   Do contrário, o valor de @var{parameter} é 
substituido.

@item $@{@var{parameter}:+@var{word}@}
Se @var{parameter} for nulo ou estiver desconfigurado, nada é 
substituido, do contrário a expansão de @var{word} é substituida.

@item $@{@var{parameter}:@var{offset}@}
@itemx $@{@var{parameter}:@var{offset}:@var{length}@}
Isso é referenciado como Expansão de Substring.
Ela expande até @var{length} caracteres do valor de @var{parameter} 
iniciando no caracter especificado por @var{offset}.
Se @var{parameter} for @samp{@@}, um vetor indexado subscrito por 
@samp{@@} ou @samp{*}, ou um nome de vetor associativo, os resultados 
diferem conforme descritos abaixo.
Se @var{length} for omitido, expande para a substring do valor de 
@var{parameter} iniciando no caracter especificado por @var{offset} e se 
estendo até o fim do valor.
@var{length} e @var{offset} são expressões aritméticas 
(veja-se @ref{Shell Arithmetic}).

Se o valor de @var{offset} for calculado para um número menor que zero, 
o valor é utilizado como um offset em caracteres a partir do fim do 
valor de @var{parameter}.
Se o valor de @var{length} for calculado para um número menor que zero, 
ela é interpretada como sendo um offset em caracteres a partir do fim do 
valor de @var{parameter} em vez de um número de caracteres, e a expansão 
são os caracteres entre @var{offset} e aquele resultado.
Perceba-se que um offset negativo deve necessariamente ser separado dos 
dois pontos por pelo menos um espaço para evitar que seja confundido com 
a expansão de @samp{:-}.

Aqui estão alguns exemplos ilustrando a Expansão de Substring sobre 
parâmetros e vetores subscritos:

@verbatim
$ string=01234567890abcdefgh
$ echo ${string:7}
7890abcdefgh
$ echo ${string:7:0}

$ echo ${string:7:2}
78
$ echo ${string:7:-2}
7890abcdef
$ echo ${string: -7}
bcdefgh
$ echo ${string: -7:0}

$ echo ${string: -7:2}
bc
$ echo ${string: -7:-2}
bcdef
$ set -- 01234567890abcdefgh
$ echo ${1:7}
7890abcdefgh
$ echo ${1:7:0}

$ echo ${1:7:2}
78
$ echo ${1:7:-2}
7890abcdef
$ echo ${1: -7}
bcdefgh
$ echo ${1: -7:0}

$ echo ${1: -7:2}
bc
$ echo ${1: -7:-2}
bcdef
$ array[0]=01234567890abcdefgh
$ echo ${array[0]:7}
7890abcdefgh
$ echo ${array[0]:7:0}

$ echo ${array[0]:7:2}
78
$ echo ${array[0]:7:-2}
7890abcdef
$ echo ${array[0]: -7}
bcdefgh
$ echo ${array[0]: -7:0}

$ echo ${array[0]: -7:2}
bc
$ echo ${array[0]: -7:-2}
bcdef
@end verbatim

Se @var{parameter} for @samp{@@}, o resultado é @var{length} parâmetros 
posicionais iniciando em @var{offset}.
Um @var{offset} negativo é tomado relativo a um maior que o maior 
parâmetro posicional, de maneira que um offset de -1 tem por resultado o 
último parâmetro posicional.
É um erro de expansão se @var{length} tiver por resultado um número 
menor que zero.

Os exemplos seguintes ilustram Expansão de Substring utilizando 
parâmetos posicionais:

@verbatim
$ set -- 1 2 3 4 5 6 7 8 9 0 a b c d e f g h
$ echo ${@:7}
7 8 9 0 a b c d e f g h
$ echo ${@:7:0}

$ echo ${@:7:2}
7 8
$ echo ${@:7:-2}
bash: -2: substring expression < 0
$ echo ${@: -7:2}
b c
$ echo ${@:0}
./bash 1 2 3 4 5 6 7 8 9 0 a b c d e f g h
$ echo ${@:0:2}
./bash 1
$ echo ${@: -7:0}

@end verbatim

Se @var{parameter} for um nome de vetor indexado subscrito por @samp{@@} 
ou @samp{*}, o resultado é o @var{length} de membros do vetor iniciando 
com @code{$@{@var{parameter}[@var{offset}]@}}.
Um @var{offset} negativo é tomado relativo ao um maior que o índice 
máximo do vetor especificado.
É um erro de expansão se @var{length} for calculado para um número menor 
que zero.

Estes exemplos mostram como se pode utilizar Expansão de Substring com 
vetores indexados:

@verbatim
$ array=(0 1 2 3 4 5 6 7 8 9 0 a b c d e f g h)
$ echo ${array[@]:7}
7 8 9 0 a b c d e f g h
$ echo ${array[@]:7:2}
7 8
$ echo ${array[@]: -7:2}
b c
$ echo ${array[@]: -7:-2}
bash: -2: substring expression < 0
$ echo ${array[@]:0}
0 1 2 3 4 5 6 7 8 9 0 a b c d e f g h
$ echo ${array[@]:0:2}
0 1
$ echo ${array[@]: -7:0}

@end verbatim

Expansão de Substring aplicada a um vetor associativo produz resultados 
indefinidos.

A indexação de substring é baseada em zero, a menos que os parâmetros 
posicionais sejam utilizados, caso no qual a indexação começa no um (1) 
por padrão.
Se @var{offset} for zero (0), e os parâmetros posicionais forem 
utilizados, @code{$@@} é prefixado à lista.

@item $@{!@var{prefix}*@}
@itemx $@{!@var{prefix}@@@}
Expande para os nomes das variáveis cujos nomes iniciam com 
@var{prefix}, separados pelo primeiro caracter da variável especial 
@env{IFS}.
Quando @samp{@@} for utilizada e a expansão aparece dentro de aspas 
duplas, cada nome de variável expande para uma palavra separada.

@item $@{!@var{name}[@@]@}
@itemx $@{!@var{name}[*]@}
Se @var{name} for uma variável de vetor, expande para a lista de índices 
de vetor (chaves) atribuídos em @var{name}.
Se @var{name} não for um vetor, expande para zero (0) se @var{name} 
estiver configurada e nulo caso contrário.
Quando @samp{@@} for utilizada e a expansão aparecer dentro de aspas 
duplas, cada chave expande para uma palavra separada.

@item $@{#@var{parameter}@}
O tamanho em caracteres do valor expandido de @var{parameter} é 
substituído.
Se @var{parameter} for @samp{*} ou @samp{@@}, o valor substituído é o 
número de parâmetros posicionais.
Se @var{parameter} for um nome de vetor subscrito por @samp{*} ou 
@samp{@@}, o valor substituído é o número de elementos no vetor.
Se @var{parameter} for um nome de vetor indexado subscrito por um número 
negativo, esse número é interpretado como relativo a um maior que o 
índice máximo de @var{parameter}, de maneira que índices negativos 
contam de volta do fim do vetor, e um índice de -1 referencia o último 
elemento.

@item $@{@var{parameter}#@var{word}@}
@itemx $@{@var{parameter}##@var{word}@}
A @var{word} é expandida para produzir um padrão exatamente como em 
expansão de nome de arquivo (veja-se @ref{Filename Expansion}).   Se o 
padrão coincidir com o inicio do valor expandido de @var{parameter}, 
então o resultado da expansão é o valor expandido de @var{parameter} com 
o padrão mais curto que coincidir (o caso do @samp{#}) ou o padrão mais 
longo que coincidir (o caso do @samp{##}) deletado.
Se @var{parameter} for @samp{@@} ou @samp{*}, a operação de remoção do 
padrão é aplicada a cada parâmetro posicional em sequência, e a expansão 
é a lista resultante.
Se @var{parameter} for uma variável de vetor subscrito com @samp{@@} ou 
@samp{*}, a operação de remoção de padrão é aplicada a cada membro do 
vetor em sequência, e a expansão é a lista resultante.

@item $@{@var{parameter}%@var{word}@}
@itemx $@{@var{parameter}%%@var{word}@}
A @var{word} é expandida para produzir um padrão exatamente como na 
expansão de nome de arquivo.
Se o padrão coincidir com uma porção ao final do valor expandido de 
@var{parameter}, então o resultado da expansão é o valor de 
@var{parameter} com o padrão mais curto que coincidir (o caso do 
@samp{%}) ou o padrão mais longo que coincidir (o caso do @samp{%%}) 
deletado.
Se @var{parameter} for @samp{@@} ou @samp{*}, a operação de remoção de 
padrão é aplicada a cada parâmetro posicional em sequência, e a expansão 
é a lista resultante.
Se @var{parameter} for uma variável de vetor subscrito com @samp{@@} ou 
@samp{*}, a operação de remoção de padrão é aplicada a cada membro do 
vetor em sequência, e a expansão é a lista resultante.

@item $@{@var{parameter}/@var{pattern}/@var{string}@} 
O @var{pattern} é expandido para produzir um padrão exatamente como em 
expansão de nome de arquivo.
@var{Parameter} é expandido e a coincidência mais longa de @var{pattern} 
contra seu valor é substituída com @var{string}.
Se @var{pattern} iniciar com uma @samp{/}, todas as coincidências de 
@var{pattern} são substituídas com @var{string}.   Normalmente apenas a 
primeira coincidência é substituída.
Se @var{pattern} se iniciar com @samp{#}, é necessário coincidir no 
início do valor expandido de @var{parameter}.
Se @var{pattern} se iniciar com @samp{%}, é necessário coincidir no 
final do valor expandido de @var{parameter}.
Se @var{string} for nula, as coincidências de @var{pattern} são 
deletadas e a @code{/} que se seguir a @var{pattern} pode ser omitida.
Se @var{parameter} for @samp{@@} ou @samp{*}, a operação de substituição 
é aplicada a cada parâmetro posicional em sequência, e a expansão é a 
lista resultante.
Se @var{parameter} for uma variável de vetor subscrito com @samp{@@} ou 
@samp{*}, a operação de substituição é aplicada a cada parâmetro 
posicional em sequência, e a expansão é a lista resultante.
Se @var{parameter} for uma variável de vetor subscrito com @samp{@@} ou 
@samp{*}, a operação de substituição é aplicada a cada membro do vetor 
em sequência, e a expansão é a lista resultante.

@item $@{@var{parameter}^@var{pattern}@}
@itemx $@{@var{parameter}^^@var{pattern}@}
@itemx $@{@var{parameter},@var{pattern}@}
@itemx $@{@var{parameter},,@var{pattern}@}
Esta expansão modifica o tipo dos caracteres alfabéticos em @var{parameter}.
O @var{parameter} é expandido para produzir um padrão exatamente como na 
expansão de nome de arquivo.
Cada caracter no valor expandido de @var{parameter} é testado contra 
@var{pattern}, e, se coincidir com o padrão, aconteçe a conversão de 
caso.
O padrão não deveria tentar coincidir mais que um caracter.
O operador @samp{^} converte letras minúsculas coincidentes com 
@var{pattern} para maiúsculas; o operador @samp{,} converte letras 
maiúsculas coincidentes com @var{pattern} para minúsculas.
As expansões @samp{^^} e @samp{,,} convertem cada caracter coincidido no 
valor expandido; as expansões @samp{^} e @samp{,} coincidem e convertem 
apenas o primeiro caracter no valor expandido.
Se @var{pattern} for omitido, ele é tratado como um @samp{?}, o qual 
coincide com cada caracter.
Se @var{parameter} for @samp{@@} ou @samp{*}, a operação de modificação 
de caso é aplicada a cada parâmetro posicional em sequência, e a 
expansão é a lista resultante.
Se @var{parameter} for uma variável de vetor subscrito com @samp{@@} ou 
@samp{*}, a operação de modificação de caso é aplicada a cada membro do 
vetor em sequência, e a expansão é a lista resultante.
@end table

@node Command Substitution
@subsection Command Substitution
@cindex command substitution

A substituição de comando permite que a saída de um comando substitua o 
próprio comando.
A substituição de comando ocorre quando um comando é encapsulado 
conforme segue:
@example
$(@var{command})
@end example
@noindent
ou
@example
`@var{command}`
@end example

@noindent
Bash realiza a expansão executando @var{command} e substituindo a 
substituição de comando com a saída padrão do comando, com cada marcador 
de nova linha sendo deletado.
Os marcadores de nova linha embutidos não são deletados, porém eles 
podem ser removidos durante a divisão de palavra.
A substituição de comando @code{$(cat @var{file})} pode ser substituída 
pelo equivalente, mas mais rápido @code{$(< @var{file})}.

Quando a forma de substituição estilo antigo de aspa invertida é 
utilizada, a barra invertida mantém o seu significado literal exceto 
quando seguido por @samp{$}, @samp{`}, ou @samp{\}.
A primeira aspa invertida não precedida por uma barra invertida termina 
a substituição de comando.
Quando da utilização da forma @code{$(@var{command})}, todos os 
caracteres entre os parênteses compõem o comando; nenhum é tratado 
especialmente.

As substituições de comando podem ser aninhadas.   Para aninhar quando 
da utilização da forma de aspa invertida, encapsule as aspas invertidas 
internas com barras invertidas.

Se a substituição aparece dentro de aspas duplas, divisão de palavra e 
expansão de nome de arquivo não são realizadas sobre os resultados.

@node Arithmetic Expansion
@subsection Arithmetic Expansion
@cindex expansion, arithmetic
@cindex arithmetic expansion

A expansão aritmética permite o cálculo de uma expressão aritmética e a 
substituição do resultado.   O formato para expansão aritmética é:

@example
$(( @var{expression} ))
@end example

A expressão é tratada como se ela estivesse contida entre aspas duplas, 
porém uma aspa dupla dentro de parênteses não é tratada especialmente.
Todos os tokens na expressão estão sujeitos a expansão de parâmetro e 
variável, substituição de comando, e remoção de aspas.
O resultado é tratado como a expressão aritmética a ser calculada.
Expansões aritméticas podem ser aninhadas.

O cálculo é realizado de acordo com as regras listadas abaixo 
(veja-se @ref{Shell Arithmetic}).
Se a expressão for inválida, Bash imprime uma mensagem indicando a falha 
para o descritor de erro padrão e não ocorre substituição.

@node Process Substitution
@subsection Process Substitution
@cindex process substitution

A substituição de processo é suportada em sistemas que suportam tubos 
nomeados (@sc{fifo}s) ou o método @file{/dev/fd} de nomear arquivos 
abertos.
A substituição de processo assume a forma de
@example
<(@var{list})
@end example
@noindent
ou
@example
>(@var{list})
@end example
@noindent
A @var{list} de processo é executada com a entrada ou saída dela 
conectada ao @sc{fifo} ou algum arquivo em @file{/dev/fd}.   O nome 
desse arquivo é passado como um argumento para o comando atual como 
resultado da expansão.   Se a forma @code{>(@var{list})} for utilizada, 
então a escrita para o arquivo fornecerá entrada para @var{list}.   Se a 
forma @code{<(@var{list})} for utilizada, o arquivo passado como um 
argumento deveria ser lido para obter a saída de @var{list}.
Perceba-se que nenhum espaço pode aparecer entre o @code{<} ou @code{>} 
e o abre parênteses, do contrário a contrução seria interpretada como 
sendo uma redireção.

Quando disponível, a substituição de processo é realizada 
simultâneamente com a expansão de parâmetro e variável, substituição de 
comando, e expansão aritmética.

@node Word Splitting
@subsection Word Splitting
@cindex word splitting

O shell escaneia os resultados da expansão de parâmetro, substituição de 
comando, e expansão aritmética que não ocorreu dentro de aspas duplas 
para divisão de palavra.

O shell trata cada caracter de @env{$IFS} como sendo um delimitador, e 
reparte os resultado das outras expansões em palavras utilizando esses 
caracteres como termonadores de campo.
Se @env{IFS} estiver desconfigurada, ou o valor dela for exatamente 
@code{<space><tab><newline>}, o padrão, então as sequências de @code{ 
<space>}, @code{<tab>}, e @code{<newline>} no início e final dos 
resultados das expansões prévias são ignoradas, e quaisquer sequências 
de @env{IFS} caracteres que não estejam no início ou no final servem 
para delimitar palavras.
Se @env{IFS} tiver um outro valor qualquer diferente do padrão, então 
as sequências de caracteres de espaço em branco @code{space} e 
@code{tab} são ignoradas no início e no final da palavra, até onde o 
caracter espaço em branco esteja no valor de @env{IFS} (um caracter de 
espaço em branco @env{IFS}).
Qualquer caracter em @env{IFS} que não um espaço em branco @env{IFS}, 
junto com quaisquer caracteres espaço em branco @env{IFS} adjacentes, 
delimitam o campo.   Uma sequência de caracteres espaço em 
branco @env{IFS} também é tratada como um delimitador.
Se o valor de @env{IFS} for nulo, não ocorre a divisão de palavra.

Os argumentos "null" explícitos (@code{""} or @code{''}) são mantidos.
Os argumentos "null" implícitos fora de aspas, resultantes da expansão 
de parâmetros que não tem valores, são removidos.
Se um parâmetro sem um valor for expandido dentro de aspas duplas, um 
argumento "null" resulta e é mantido.

Note-se que se não ocorrer expansão, divisão não é realizada.

@node Filename Expansion
@subsection Filename Expansion
@menu
* Pattern Matching::	How the shell matches patterns.
@end menu
@cindex expansion, filename
@cindex expansion, pathname
@cindex filename expansion
@cindex pathname expansion

After word splitting, unless the @option{-f} option has been set
(@pxref{The Set Builtin}), Bash scans each word for the characters
@samp{*}, @samp{?}, and @samp{[}.
If one of these characters appears, then the word is
regarded as a @var{pattern},
and replaced with an alphabetically sorted list of
filenames matching the pattern (@pxref{Pattern Matching}).
If no matching filenames are found,
and the shell option @code{nullglob} is disabled, the word is left
unchanged.
If the @code{nullglob} option is set, and no matches are found, the word
is removed.
If the @code{failglob} shell option is set, and no matches are found,
an error message is printed and the command is not executed.
If the shell option @code{nocaseglob} is enabled, the match is performed
without regard to the case of alphabetic characters.

When a pattern is used for filename expansion, the character @samp{.}
at the start of a filename or immediately following a slash
must be matched explicitly, unless the shell option @code{dotglob} is set.
When matching a filename, the slash character must always be
matched explicitly.
In other cases, the @samp{.} character is not treated specially.

See the description of @code{shopt} in @ref{The Shopt Builtin},
for a description of the @code{nocaseglob}, @code{nullglob},
@code{failglob}, and @code{dotglob} options.

The @env{GLOBIGNORE}
shell variable may be used to restrict the set of filenames matching a
pattern.  If @env{GLOBIGNORE}
is set, each matching filename that also matches one of the patterns in
@env{GLOBIGNORE} is removed from the list of matches.  The filenames
@file{.} and @file{..}
are always ignored when @env{GLOBIGNORE}
is set and not null.
However, setting @env{GLOBIGNORE} to a non-null value has the effect of
enabling the @code{dotglob}
shell option, so all other filenames beginning with a
@samp{.} will match.
To get the old behavior of ignoring filenames beginning with a
@samp{.}, make @samp{.*} one of the patterns in @env{GLOBIGNORE}.
The @code{dotglob} option is disabled when @env{GLOBIGNORE}
is unset.

@node Pattern Matching
@subsubsection Pattern Matching
@cindex pattern matching
@cindex matching, pattern

Any character that appears in a pattern, other than the special pattern
characters described below, matches itself.
The @sc{nul} character may not occur in a pattern.
A backslash escapes the following character; the
escaping backslash is discarded when matching.
The special pattern characters must be quoted if they are to be matched
literally.

The special pattern characters have the following meanings:
@table @code
@item *
Matches any string, including the null string.
When the @code{globstar} shell option is enabled, and @samp{*} is used in
a filename expansion context, two adjacent @samp{*}s used as a single
pattern will match all files and zero or more directories and
subdirectories.
If followed by a @samp{/}, two adjacent @samp{*}s will match only
directories and subdirectories.
@item ?
Matches any single character.
@item [@dots{}]
Matches any one of the enclosed characters.  A pair of characters
separated by a hyphen denotes a @var{range expression};
any character that falls between those two characters, inclusive,
using the current locale's collating sequence and character set,
is matched.  If the first character following the
@samp{[} is a @samp{!}  or a @samp{^}
then any character not enclosed is matched.  A @samp{@minus{}}
may be matched by including it as the first or last character
in the set.  A @samp{]} may be matched by including it as the first
character in the set.
The sorting order of characters in range expressions is determined by
the current locale and the values of the
@env{LC_COLLATE} and @env{LC_ALL} shell variables, if set.

For example, in the default C locale, @samp{[a-dx-z]} is equivalent to
@samp{[abcdxyz]}.  Many locales sort characters in dictionary order, and in
these locales @samp{[a-dx-z]} is typically not equivalent to @samp{[abcdxyz]};
it might be equivalent to @samp{[aBbCcDdxXyYz]}, for example.  To obtain
the traditional interpretation of ranges in bracket expressions, you can
force the use of the C locale by setting the @env{LC_COLLATE} or
@env{LC_ALL} environment variable to the value @samp{C}, or enable the
@code{globasciiranges} shell option.

Within @samp{[} and @samp{]}, @var{character classes} can be specified
using the syntax
@code{[:}@var{class}@code{:]}, where @var{class} is one of the
following classes defined in the @sc{posix} standard:
@example
alnum   alpha   ascii   blank   cntrl   digit   graph   lower
print   punct   space   upper   word    xdigit
@end example
@noindent
A character class matches any character belonging to that class.
The @code{word} character class matches letters, digits, and the character
@samp{_}.

Within @samp{[} and @samp{]}, an @var{equivalence class} can be
specified using the syntax @code{[=}@var{c}@code{=]}, which
matches all characters with the same collation weight (as defined
by the current locale) as the character @var{c}.

Within @samp{[} and @samp{]}, the syntax @code{[.}@var{symbol}@code{.]}
matches the collating symbol @var{symbol}.
@end table

If the @code{extglob} shell option is enabled using the @code{shopt}
builtin, several extended pattern matching operators are recognized.
In the following description, a @var{pattern-list} is a list of one
or more patterns separated by a @samp{|}.
Composite patterns may be formed using one or more of the following
sub-patterns:

@table @code
@item ?(@var{pattern-list})
Matches zero or one occurrence of the given patterns.

@item *(@var{pattern-list})
Matches zero or more occurrences of the given patterns.

@item +(@var{pattern-list})
Matches one or more occurrences of the given patterns.

@item @@(@var{pattern-list})
Matches one of the given patterns.

@item !(@var{pattern-list})
Matches anything except one of the given patterns.
@end table

@node Quote Removal
@subsection Quote Removal

After the preceding expansions, all unquoted occurrences of the
characters @samp{\}, @samp{'}, and @samp{"} that did not
result from one of the above expansions are removed.

@node Redirections
@section Redirections
@cindex redirection

Before a command is executed, its input and output
may be @var{redirected}
using a special notation interpreted by the shell.
Redirection allows commands' file handles to be
duplicated, opened, closed,
made to refer to different files,
and can change the files the command reads from and writes to.
Redirection may also be used to modify file handles in the
current shell execution environment.  The following redirection
operators may precede or appear anywhere within a
simple command or may follow a command.
Redirections are processed in the order they appear, from
left to right.

Each redirection that may be preceded by a file descriptor number
may instead be preceded by a word of the form @{@var{varname}@}.
In this case, for each redirection operator except
>&- and <&-, the shell will allocate a file descriptor greater
than 10 and assign it to @{@var{varname}@}.  If >&- or <&- is preceded
by @{@var{varname}@}, the value of @var{varname} defines the file
descriptor to close.

In the following descriptions, if the file descriptor number is
omitted, and the first character of the redirection operator is
@samp{<}, the redirection refers to the standard input (file
descriptor 0).  If the first character of the redirection operator
is @samp{>}, the redirection refers to the standard output (file
descriptor 1).

The word following the redirection operator in the following
descriptions, unless otherwise noted, is subjected to brace expansion,
tilde expansion, parameter expansion, command substitution, arithmetic
expansion, quote removal, filename expansion, and word splitting.
If it expands to more than one word, Bash reports an error.

Note that the order of redirections is significant.  For example,
the command
@example
ls > @var{dirlist} 2>&1
@end example
@noindent
directs both standard output (file descriptor 1) and standard error
(file descriptor 2) to the file @var{dirlist}, while the command
@example
ls 2>&1 > @var{dirlist}
@end example
@noindent
directs only the standard output to file @var{dirlist},
because the standard error was made a copy of the standard output
before the standard output was redirected to @var{dirlist}.

Bash handles several filenames specially when they are used in
redirections, as described in the following table:

@table @code
@item /dev/fd/@var{fd}
If @var{fd} is a valid integer, file descriptor @var{fd} is duplicated.

@item /dev/stdin
File descriptor 0 is duplicated.

@item /dev/stdout
File descriptor 1 is duplicated.

@item /dev/stderr
File descriptor 2 is duplicated.

@item /dev/tcp/@var{host}/@var{port}
If @var{host} is a valid hostname or Internet address, and @var{port}
is an integer port number or service name, Bash attempts to open
the corresponding TCP socket.

@item /dev/udp/@var{host}/@var{port}
If @var{host} is a valid hostname or Internet address, and @var{port}
is an integer port number or service name, Bash attempts to open 
the corresponding UDP socket.
@end table

A failure to open or create a file causes the redirection to fail.

Redirections using file descriptors greater than 9 should be used with
care, as they may conflict with file descriptors the shell uses
internally.

@subsection Redirecting Input
Redirection of input causes the file whose name results from
the expansion of @var{word}
to be opened for reading on file descriptor @code{n},
or the standard input (file descriptor 0) if @code{n}
is not specified.

The general format for redirecting input is:
@example
[@var{n}]<@var{word}
@end example

@subsection Redirecting Output
Redirection of output causes the file whose name results from
the expansion of @var{word}
to be opened for writing on file descriptor @var{n},
or the standard output (file descriptor 1) if @var{n}
is not specified.  If the file does not exist it is created;
if it does exist it is truncated to zero size.

The general format for redirecting output is:
@example
[@var{n}]>[|]@var{word}
@end example

If the redirection operator is @samp{>}, and the @code{noclobber}
option to the @code{set} builtin has been enabled, the redirection
will fail if the file whose name results from the expansion of
@var{word} exists and is a regular file.
If the redirection operator is @samp{>|}, or the redirection operator is
@samp{>} and the @code{noclobber} option is not enabled, the redirection
is attempted even if the file named by @var{word} exists.

@subsection Appending Redirected Output
Redirection of output in this fashion
causes the file whose name results from
the expansion of @var{word}
to be opened for appending on file descriptor @var{n},
or the standard output (file descriptor 1) if @var{n}
is not specified.  If the file does not exist it is created.

The general format for appending output is:
@example
[@var{n}]>>@var{word}
@end example

@subsection Redirecting Standard Output and Standard Error
This construct allows both the
standard output (file descriptor 1) and
the standard error output (file descriptor 2)
to be redirected to the file whose name is the
expansion of @var{word}.

There are two formats for redirecting standard output and
standard error:
@example
&>@var{word}
@end example
@noindent
and
@example
>&@var{word}
@end example
@noindent
Of the two forms, the first is preferred.
This is semantically equivalent to
@example
>@var{word} 2>&1
@end example
When using the second form, @var{word} may not expand to a number or
@samp{-}.  If it does, other redirection operators apply
(see Duplicating File Descriptors below) for compatibility reasons.

@subsection Appending Standard Output and Standard Error
This construct allows both the
standard output (file descriptor 1) and
the standard error output (file descriptor 2)
to be appended to the file whose name is the
expansion of @var{word}.

The format for appending standard output and standard error is:
@example
&>>@var{word}
@end example
@noindent
This is semantically equivalent to
@example
>>@var{word} 2>&1
@end example
(see Duplicating File Descriptors below).

@subsection Here Documents
This type of redirection instructs the shell to read input from the
current source until a line containing only @var{word}
(with no trailing blanks) is seen.  All of
the lines read up to that point are then used as the standard
input for a command.

The format of here-documents is:
@example
<<[@minus{}]@var{word}
        @var{here-document}
@var{delimiter}
@end example

No parameter and variable expansion, command substitution,
arithmetic expansion, or filename expansion is performed on
@var{word}.  If any characters in @var{word} are quoted, the
@var{delimiter} is the result of quote removal on @var{word},
and the lines in the here-document are not expanded.
If @var{word} is unquoted,
all lines of the here-document are subjected to
parameter expansion, command substitution, and arithmetic expansion,
the character sequence @code{\newline} is ignored, and @samp{\}
must be used to quote the characters
@samp{\}, @samp{$}, and @samp{`}.

If the redirection operator is @samp{<<-},
then all leading tab characters are stripped from input lines and the
line containing @var{delimiter}.
This allows here-documents within shell scripts to be indented in a
natural fashion.

@subsection Here Strings
A variant of here documents, the format is:
@example
<<< @var{word}
@end example

The @var{word} undergoes
brace expansion, tilde expansion, parameter and variable expansion,
command substitution, arithmetic expansion, and quote removal.
Pathname expansion and word splitting are not performed.
The result is supplied as a single string to the command on its
standard input.

@subsection Duplicating File Descriptors
The redirection operator
@example
[@var{n}]<&@var{word}
@end example
@noindent
is used to duplicate input file descriptors.
If @var{word}
expands to one or more digits, the file descriptor denoted by @var{n}
is made to be a copy of that file descriptor.
If the digits in @var{word} do not specify a file descriptor open for
input, a redirection error occurs.
If @var{word}
evaluates to @samp{-}, file descriptor @var{n} is closed.
If @var{n} is not specified, the standard input (file descriptor 0) is used.

The operator
@example
[@var{n}]>&@var{word}
@end example
@noindent
is used similarly to duplicate output file descriptors.  If
@var{n} is not specified, the standard output (file descriptor 1) is used.
If the digits in @var{word} do not specify a file descriptor open for
output, a redirection error occurs.
If @var{word}
evaluates to @samp{-}, file descriptor @var{n} is closed.
As a special case, if @var{n} is omitted, and @var{word} does not
expand to one or more digits or @samp{-}, the standard output and standard
error are redirected as described previously.

@subsection Moving File Descriptors
The redirection operator
@example
[@var{n}]<&@var{digit}-
@end example
@noindent
moves the file descriptor @var{digit} to file descriptor @var{n},
or the standard input (file descriptor 0) if @var{n} is not specified.
@var{digit} is closed after being duplicated to @var{n}.

Similarly, the redirection operator
@example
[@var{n}]>&@var{digit}-
@end example
@noindent
moves the file descriptor @var{digit} to file descriptor @var{n},
or the standard output (file descriptor 1) if @var{n} is not specified.

@subsection Opening File Descriptors for Reading and Writing
The redirection operator
@example
[@var{n}]<>@var{word}
@end example
@noindent
causes the file whose name is the expansion of @var{word}
to be opened for both reading and writing on file descriptor
@var{n}, or on file descriptor 0 if @var{n}
is not specified.  If the file does not exist, it is created.

@node Executing Commands
@section Executing Commands

@menu
* Simple Command Expansion::	How Bash expands simple commands before
				executing them.
* Command Search and Execution::	How Bash finds commands and runs them.
* Command Execution Environment::	The environment in which Bash
					executes commands that are not
					shell builtins.
* Environment::		The environment given to a command.
* Exit Status::		The status returned by commands and how Bash
			interprets it.
* Signals::		What happens when Bash or a command it runs
			receives a signal.
@end menu

@node Simple Command Expansion
@subsection Simple Command Expansion
@cindex command expansion

When a simple command is executed, the shell performs the following
expansions, assignments, and redirections, from left to right.

@enumerate
@item
The words that the parser has marked as variable assignments (those
preceding the command name) and redirections are saved for later
processing.

@item
The words that are not variable assignments or redirections are
expanded (@pxref{Shell Expansions}).
If any words remain after expansion, the first word
is taken to be the name of the command and the remaining words are
the arguments.

@item
Redirections are performed as described above (@pxref{Redirections}).

@item
The text after the @samp{=} in each variable assignment undergoes tilde
expansion, parameter expansion, command substitution, arithmetic expansion,
and quote removal before being assigned to the variable.
@end enumerate

If no command name results, the variable assignments affect the current
shell environment.  Otherwise, the variables are added to the environment
of the executed command and do not affect the current shell environment.
If any of the assignments attempts to assign a value to a readonly variable,
an error occurs, and the command exits with a non-zero status.

If no command name results, redirections are performed, but do not
affect the current shell environment.  A redirection error causes the
command to exit with a non-zero status.

If there is a command name left after expansion, execution proceeds as
described below.  Otherwise, the command exits.  If one of the expansions
contained a command substitution, the exit status of the command is
the exit status of the last command substitution performed.  If there
were no command substitutions, the command exits with a status of zero.

@node Command Search and Execution
@subsection Command Search and Execution
@cindex command execution
@cindex command search

After a command has been split into words, if it results in a
simple command and an optional list of arguments, the following
actions are taken.

@enumerate
@item
If the command name contains no slashes, the shell attempts to
locate it.  If there exists a shell function by that name, that
function is invoked as described in @ref{Shell Functions}.

@item
If the name does not match a function, the shell searches for
it in the list of shell builtins.  If a match is found, that
builtin is invoked.

@item
If the name is neither a shell function nor a builtin,
and contains no slashes, Bash searches each element of
@env{$PATH} for a directory containing an executable file
by that name.  Bash uses a hash table to remember the full
pathnames of executable files to avoid multiple @env{PATH} searches
(see the description of @code{hash} in @ref{Bourne Shell Builtins}).
A full search of the directories in @env{$PATH}
is performed only if the command is not found in the hash table.
If the search is unsuccessful, the shell searches for a defined shell
function named @code{command_not_found_handle}.
If that function exists, it is invoked with the original command and
the original command's arguments as its arguments, and the function's
exit status becomes the exit status of the shell.
If that function is not defined, the shell prints an error
message and returns an exit status of 127.

@item
If the search is successful, or if the command name contains
one or more slashes, the shell executes the named program in
a separate execution environment.
Argument 0 is set to the name given, and the remaining arguments
to the command are set to the arguments supplied, if any.

@item
If this execution fails because the file is not in executable
format, and the file is not a directory, it is assumed to be a
@var{shell script} and the shell executes it as described in
@ref{Shell Scripts}.

@item
If the command was not begun asynchronously, the shell waits for
the command to complete and collects its exit status.

@end enumerate

@node Command Execution Environment
@subsection Command Execution Environment
@cindex execution environment

The shell has an @var{execution environment}, which consists of the
following:

@itemize @bullet
@item
open files inherited by the shell at invocation, as modified by
redirections supplied to the @code{exec} builtin

@item
the current working directory as set by @code{cd}, @code{pushd}, or
@code{popd}, or inherited by the shell at invocation

@item
the file creation mode mask as set by @code{umask} or inherited from
the shell's parent

@item
current traps set by @code{trap}

@item
shell parameters that are set by variable assignment or with @code{set}
or inherited from the shell's parent in the environment

@item
shell functions defined during execution or inherited from the shell's
parent in the environment

@item
options enabled at invocation (either by default or with command-line
arguments) or by @code{set}

@item
options enabled by @code{shopt} (@pxref{The Shopt Builtin})

@item
shell aliases defined with @code{alias} (@pxref{Aliases})

@item
various process @sc{id}s, including those of background jobs
(@pxref{Lists}), the value of @code{$$}, and the value of
@env{$PPID}

@end itemize

When a simple command other than a builtin or shell function
is to be executed, it
is invoked in a separate execution environment that consists of
the following.  Unless otherwise noted, the values are inherited
from the shell.

@itemize @bullet
@item
the shell's open files, plus any modifications and additions specified
by redirections to the command

@item
the current working directory

@item
the file creation mode mask

@item
shell variables and functions marked for export, along with variables
exported for the command, passed in the environment (@pxref{Environment})

@item
traps caught by the shell are reset to the values inherited from the
shell's parent, and traps ignored by the shell are ignored

@end itemize

A command invoked in this separate environment cannot affect the
shell's execution environment. 

Command substitution, commands grouped with parentheses,
and asynchronous commands are invoked in a
subshell environment that is a duplicate of the shell environment,
except that traps caught by the shell are reset to the values
that the shell inherited from its parent at invocation.  Builtin
commands that are invoked as part of a pipeline are also executed
in a subshell environment.  Changes made to the subshell environment
cannot affect the shell's execution environment.

Subshells spawned to execute command substitutions inherit the value of
the @option{-e} option from the parent shell.  When not in @sc{posix} mode,
Bash clears the @option{-e} option in such subshells.

If a command is followed by a @samp{&} and job control is not active, the
default standard input for the command is the empty file @file{/dev/null}.
Otherwise, the invoked command inherits the file descriptors of the calling
shell as modified by redirections.

@node Environment
@subsection Environment
@cindex environment

When a program is invoked it is given an array of strings
called the @var{environment}.
This is a list of name-value pairs, of the form @code{name=value}.

Bash provides several ways to manipulate the environment.
On invocation, the shell scans its own environment and
creates a parameter for each name found, automatically marking
it for @var{export}
to child processes.  Executed commands inherit the environment.
The @code{export} and @samp{declare -x}
commands allow parameters and functions to be added to and
deleted from the environment.  If the value of a parameter
in the environment is modified, the new value becomes part
of the environment, replacing the old.  The environment
inherited by any executed command consists of the shell's
initial environment, whose values may be modified in the shell,
less any pairs removed by the @code{unset} and @samp{export -n}
commands, plus any additions via the @code{export} and
@samp{declare -x} commands.

The environment for any simple command
or function may be augmented temporarily by prefixing it with
parameter assignments, as described in @ref{Shell Parameters}.
These assignment statements affect only the environment seen
by that command.

If the @option{-k} option is set (@pxref{The Set Builtin}), then all
parameter assignments are placed in the environment for a command,
not just those that precede the command name.

When Bash invokes an external command, the variable @samp{$_}
is set to the full pathname of the command and passed to that
command in its environment.

@node Exit Status
@subsection Exit Status
@cindex exit status

The exit status of an executed command is the value returned by the
@var{waitpid} system call or equivalent function.  Exit statuses    
fall between 0 and 255, though, as explained below, the shell may
use values above 125 specially.  Exit statuses from shell builtins and
compound commands are also limited to this range.  Under certain
circumstances, the shell will use special values to indicate specific
failure modes.

For the shell's purposes, a command which exits with a
zero exit status has succeeded.
A non-zero exit status indicates failure.
This seemingly counter-intuitive scheme is used so there
is one well-defined way to indicate success and a variety of
ways to indicate various failure modes.
When a command terminates on a fatal signal whose number is @var{N},
Bash uses the value 128+@var{N} as the exit status.

If a command is not found, the child process created to
execute it returns a status of 127.  If a command is found  
but is not executable, the return status is 126.

If a command fails because of an error during expansion or redirection,
the exit status is greater than zero.

The exit status is used by the Bash conditional commands
(@pxref{Conditional Constructs}) and some of the list
constructs (@pxref{Lists}).

All of the Bash builtins return an exit status of zero if they succeed
and a non-zero status on failure, so they may be used by the
conditional and list constructs.
All builtins return an exit status of 2 to indicate incorrect usage.

@node Signals
@subsection Signals
@cindex signal handling

When Bash is interactive, in the absence of any traps, it ignores
@code{SIGTERM} (so that @samp{kill 0} does not kill an interactive shell),
and @code{SIGINT}
is caught and handled (so that the @code{wait} builtin is interruptible).
When Bash receives a @code{SIGINT}, it breaks out of any executing loops.
In all cases, Bash ignores @code{SIGQUIT}.
If job control is in effect (@pxref{Job Control}), Bash
ignores @code{SIGTTIN}, @code{SIGTTOU}, and @code{SIGTSTP}.

Non-builtin commands started by Bash have signal handlers set to the
values inherited by the shell from its parent.
When job control is not in effect, asynchronous commands
ignore @code{SIGINT} and @code{SIGQUIT} in addition to these inherited
handlers.
Commands run as a result of
command substitution ignore the keyboard-generated job control signals
@code{SIGTTIN}, @code{SIGTTOU}, and @code{SIGTSTP}.

The shell exits by default upon receipt of a @code{SIGHUP}.
Before exiting, an interactive shell resends the @code{SIGHUP} to
all jobs, running or stopped.
Stopped jobs are sent @code{SIGCONT} to ensure that they receive
the @code{SIGHUP}.
To prevent the shell from sending the @code{SIGHUP} signal to a
particular job, it should be removed
from the jobs table with the @code{disown}
builtin (@pxref{Job Control Builtins}) or marked
to not receive @code{SIGHUP} using @code{disown -h}.

If the  @code{huponexit} shell option has been set with @code{shopt}
(@pxref{The Shopt Builtin}), Bash sends a @code{SIGHUP} to all jobs when
an interactive login shell exits.

If Bash is waiting for a command to complete and receives a signal
for which a trap has been set, the trap will not be executed until
the command completes. 
When Bash is waiting for an asynchronous
command via the @code{wait} builtin, the reception of a signal for
which a trap has been set will cause the @code{wait} builtin to return
immediately with an exit status greater than 128, immediately after
which the trap is executed.

@node Shell Scripts
@section Shell Scripts
@cindex shell script

A shell script is a text file containing shell commands.  When such
a file is used as the first non-option argument when invoking Bash,
and neither the @option{-c} nor @option{-s} option is supplied
(@pxref{Invoking Bash}), 
Bash reads and executes commands from the file, then exits.  This
mode of operation creates a non-interactive shell.  The shell first
searches for the file in the current directory, and looks in the
directories in @env{$PATH} if not found there.

When Bash runs
a shell script, it sets the special parameter @code{0} to the name
of the file, rather than the name of the shell, and the positional
parameters are set to the remaining arguments, if any are given.
If no additional arguments are supplied, the positional parameters
are unset.

A shell script may be made executable by using the @code{chmod} command
to turn on the execute bit.  When Bash finds such a file while
searching the @env{$PATH} for a command, it spawns a subshell to
execute it.  In other words, executing
@example
filename @var{arguments}
@end example
@noindent
is equivalent to executing
@example
bash filename @var{arguments}
@end example

@noindent
if @code{filename} is an executable shell script.
This subshell reinitializes itself, so that the effect is as if a
new shell had been invoked to interpret the script, with the
exception that the locations of commands remembered by the parent
(see the description of @code{hash} in @ref{Bourne Shell Builtins})
are retained by the child.

Most versions of Unix make this a part of the operating system's command
execution mechanism.  If the first line of a script begins with
the two characters @samp{#!}, the remainder of the line specifies
an interpreter for the program.
Thus, you can specify Bash, @code{awk}, Perl, or some other
interpreter and write the rest of the script file in that language.

The arguments to the interpreter
consist of a single optional argument following the interpreter
name on the first line of the script file, followed by the name of
the script file, followed by the rest of the arguments.  Bash
will perform this action on operating systems that do not handle it
themselves.  Note that some older versions of Unix limit the interpreter
name and argument to a maximum of 32 characters.

Bash scripts often begin with @code{#! /bin/bash} (assuming that
Bash has been installed in @file{/bin}), since this ensures that
Bash will be used to interpret the script, even if it is executed
under another shell.

@node Shell Builtin Commands
@chapter Shell Builtin Commands

@menu
* Bourne Shell Builtins::	Builtin commands inherited from the Bourne
				Shell.
* Bash Builtins::		Table of builtins specific to Bash.
* Modifying Shell Behavior::	Builtins to modify shell attributes and
				optional behavior.
* Special Builtins::		Builtin commands classified specially by
				POSIX.
@end menu

Builtin commands are contained within the shell itself.
When the name of a builtin command is used as the first word of
a simple command (@pxref{Simple Commands}), the shell executes
the command directly, without invoking another program.
Builtin commands are necessary to implement functionality impossible
or inconvenient to obtain with separate utilities.

This section briefly describes the builtins which Bash inherits from
the Bourne Shell, as well as the builtin commands which are unique
to or have been extended in Bash.

Several builtin commands are described in other chapters:  builtin
commands which provide the Bash interface to the job control
facilities (@pxref{Job Control Builtins}), the directory stack
(@pxref{Directory Stack Builtins}), the command history
(@pxref{Bash History Builtins}), and the programmable completion
facilities (@pxref{Programmable Completion Builtins}).

Many of the builtins have been extended by @sc{posix} or Bash.

Unless otherwise noted, each builtin command documented as accepting
options preceded by @samp{-} accepts @samp{--}
to signify the end of the options.
The @code{:}, @code{true}, @code{false}, and @code{test}
builtins do not accept options and do not treat @samp{--} specially.
The @code{exit}, @code{logout}, @code{break}, @code{continue}, @code{let},
and @code{shift} builtins accept and process arguments beginning
with @samp{-} without requiring @samp{--}.
Other builtins that accept arguments but are not specified as accepting
options interpret arguments beginning with @samp{-} as invalid options and
require @samp{--} to prevent this interpretation.

@node Bourne Shell Builtins
@section Bourne Shell Builtins

The following shell builtin commands are inherited from the Bourne Shell.
These commands are implemented as specified by the @sc{posix} standard.

@table @code
@item :    @r{(a colon)}
@btindex :
@example
: [@var{arguments}]
@end example

Do nothing beyond expanding @var{arguments} and performing redirections.
The return status is zero.

@item .    @r{(a period)}
@btindex .
@example
. @var{filename} [@var{arguments}]
@end example

Read and execute commands from the @var{filename} argument in the
current shell context.  If @var{filename} does not contain a slash,
the @env{PATH} variable is used to find @var{filename}.
When Bash is not in @sc{posix} mode, the current directory is searched
if @var{filename} is not found in @env{$PATH}.
If any @var{arguments} are supplied, they become the positional
parameters when @var{filename} is executed.  Otherwise the positional
parameters are unchanged.
The return status is the exit status of the last command executed, or
zero if no commands are executed.  If @var{filename} is not found, or
cannot be read, the return status is non-zero.
This builtin is equivalent to @code{source}.

@item break
@btindex break
@example
break [@var{n}]
@end example

Exit from a @code{for}, @code{while}, @code{until}, or @code{select} loop.
If @var{n} is supplied, the @var{n}th enclosing loop is exited.
@var{n} must be greater than or equal to 1.
The return status is zero unless @var{n} is not greater than or equal to 1.

@item cd
@btindex cd
@example
cd [-L|[-P [-e]] [-@@] [@var{directory}]
@end example

Change the current working directory to @var{directory}.
If @var{directory} is not supplied, the value of the @env{HOME}
shell variable is used.
Any additional arguments following @var{directory} are ignored.
If the shell variable
@env{CDPATH} exists, it is used as a search path:
each directory name in @env{CDPATH} is searched for
@var{directory}, with alternative directory names in @env{CDPATH}
separated by a colon (@samp{:}).
If @var{directory} begins with a slash, @env{CDPATH} is not used.

The @option{-P} option means to not follow symbolic links: symbolic links
are resolved while @code{cd} is traversing @var{directory} and before
processing an instance of @samp{..} in @var{directory}.

By default, or when the @option{-L} option is supplied, symbolic links
in @var{directory} are resolved after @code{cd} processes an instance
of @samp{..} in @var{directory}.

If @samp{..} appears in @var{directory}, it is processed by removing the
immediately preceding pathname component, back to a slash or the beginning
of @var{directory}.

If the @option{-e} option is supplied with @option{-P}
and the current working directory cannot be successfully determined
after a successful directory change, @code{cd} will return an unsuccessful
status.

On systems that support it, the @option{-@@} option presents the extended
attributes associated with a file as a directory.              

If @var{directory} is @samp{-}, it is converted to @env{$OLDPWD}
before the directory change is attempted.

If a non-empty directory name from @env{CDPATH} is used, or if
@samp{-} is the first argument, and the directory change is
successful, the absolute pathname of the new working directory is
written to the standard output.

The return status is zero if the directory is successfully changed,
non-zero otherwise.

@item continue
@btindex continue
@example
continue [@var{n}]
@end example

Resume the next iteration of an enclosing @code{for}, @code{while},
@code{until}, or @code{select} loop.
If @var{n} is supplied, the execution of the @var{n}th enclosing loop
is resumed.
@var{n} must be greater than or equal to 1.
The return status is zero unless @var{n} is not greater than or equal to 1.

@item eval
@btindex eval
@example
eval [@var{arguments}]
@end example

The arguments are concatenated together into a single command, which is
then read and executed, and its exit status returned as the exit status
of @code{eval}.
If there are no arguments or only empty arguments, the return status is
zero.

@item exec
@btindex exec
@example
exec [-cl] [-a @var{name}] [@var{command} [@var{arguments}]]
@end example

If @var{command}
is supplied, it replaces the shell without creating a new process.
If the @option{-l} option is supplied, the shell places a dash at the
beginning of the zeroth argument passed to @var{command}.
This is what the @code{login} program does.
The @option{-c} option causes @var{command} to be executed with an empty
environment.
If @option{-a} is supplied, the shell passes @var{name} as the zeroth
argument to @var{command}.
If @var{command}
cannot be executed for some reason, a non-interactive shell exits,
unless the @code{execfail} shell option
is enabled.  In that case, it returns failure.
An interactive shell returns failure if the file cannot be executed.
If no @var{command} is specified, redirections may be used to affect
the current shell environment.  If there are no redirection errors, the
return status is zero; otherwise the return status is non-zero.

@item exit
@btindex exit
@example
exit [@var{n}]
@end example

Exit the shell, returning a status of @var{n} to the shell's parent.
If @var{n} is omitted, the exit status is that of the last command executed.
Any trap on @code{EXIT} is executed before the shell terminates.

@item export
@btindex export
@example
export [-fn] [-p] [@var{name}[=@var{value}]]
@end example

Mark each @var{name} to be passed to child processes
in the environment.  If the @option{-f} option is supplied, the @var{name}s
refer to shell functions; otherwise the names refer to shell variables.
The @option{-n} option means to no longer mark each @var{name} for export.
If no @var{names} are supplied, or if the @option{-p} option is given, a
list of names of all exported variables is displayed.
The @option{-p} option displays output in a form that may be reused as input.
If a variable name is followed by =@var{value}, the value of
the variable is set to @var{value}.

The return status is zero unless an invalid option is supplied, one of
the names is not a valid shell variable name, or @option{-f} is supplied
with a name that is not a shell function.

@item getopts
@btindex getopts
@example
getopts @var{optstring} @var{name} [@var{args}]
@end example

@code{getopts} is used by shell scripts to parse positional parameters.
@var{optstring} contains the option characters to be recognized; if a
character is followed by a colon, the option is expected to have an
argument, which should be separated from it by whitespace.
The colon (@samp{:}) and question mark (@samp{?}) may not be
used as option characters.
Each time it is invoked, @code{getopts}
places the next option in the shell variable @var{name}, initializing
@var{name} if it does not exist,
and the index of the next argument to be processed into the
variable @env{OPTIND}.
@env{OPTIND} is initialized to 1 each time the shell or a shell script
is invoked.
When an option requires an argument,
@code{getopts} places that argument into the variable @env{OPTARG}.
The shell does not reset @env{OPTIND} automatically; it must be manually
reset between multiple calls to @code{getopts} within the same shell
invocation if a new set of parameters is to be used.

When the end of options is encountered, @code{getopts} exits with a
return value greater than zero.
@env{OPTIND} is set to the index of the first non-option argument,
and @var{name} is set to @samp{?}.

@code{getopts}
normally parses the positional parameters, but if more arguments are
given in @var{args}, @code{getopts} parses those instead.

@code{getopts} can report errors in two ways.  If the first character of
@var{optstring} is a colon, @var{silent}
error reporting is used.  In normal operation, diagnostic messages
are printed when invalid options or missing option arguments are
encountered.
If the variable @env{OPTERR}
is set to 0, no error messages will be displayed, even if the first
character of @code{optstring} is not a colon.

If an invalid option is seen,
@code{getopts} places @samp{?} into @var{name} and, if not silent,
prints an error message and unsets @env{OPTARG}.
If @code{getopts} is silent, the option character found is placed in
@env{OPTARG} and no diagnostic message is printed.

If a required argument is not found, and @code{getopts}
is not silent, a question mark (@samp{?}) is placed in @var{name},
@code{OPTARG} is unset, and a diagnostic message is printed.
If @code{getopts} is silent, then a colon (@samp{:}) is placed in
@var{name} and @env{OPTARG} is set to the option character found.

@item hash
@btindex hash
@example
hash [-r] [-p @var{filename}] [-dt] [@var{name}]
@end example

Each time @code{hash} is invoked, it remembers the full pathnames of the
commands specified as @var{name} arguments,
so they need not be searched for on subsequent invocations.
The commands are found by searching through the directories listed in
@env{$PATH}.
Any previously-remembered pathname is discarded.
The @option{-p} option inhibits the path search, and @var{filename} is
used as the location of @var{name}.
The @option{-r} option causes the shell to forget all remembered locations.
The @option{-d} option causes the shell to forget the remembered location
of each @var{name}.
If the @option{-t} option is supplied, the full pathname to which each
@var{name} corresponds is printed.  If multiple @var{name} arguments are
supplied with @option{-t} the @var{name} is printed before the hashed
full pathname.
The @option{-l} option causes output to be displayed in a format
that may be reused as input.
If no arguments are given, or if only @option{-l} is supplied,
information about remembered commands is printed.
The return status is zero unless a @var{name} is not found or an invalid
option is supplied.

@item pwd
@btindex pwd
@example
pwd [-LP]
@end example

Print the absolute pathname of the current working directory.
If the @option{-P} option is supplied, the pathname printed will not
contain symbolic links.
If the @option{-L} option is supplied, the pathname printed may contain
symbolic links.
The return status is zero unless an error is encountered while
determining the name of the current directory or an invalid option
is supplied.

@item readonly
@btindex readonly
@example
readonly [-aAf] [-p] [@var{name}[=@var{value}]] @dots{}
@end example

Mark each @var{name} as readonly.
The values of these names may not be changed by subsequent assignment.
If the @option{-f} option is supplied, each @var{name} refers to a shell
function.
The @option{-a} option means each @var{name} refers to an indexed
array variable; the @option{-A} option means each @var{name} refers
to an associative array variable.
If both options are supplied, @option{-A} takes precedence.
If no @var{name} arguments are given, or if the @option{-p}
option is supplied, a list of all readonly names is printed.
The other options may be used to restrict the output to a subset of
the set of readonly names.
The @option{-p} option causes output to be displayed in a format that
may be reused as input.
If a variable name is followed by =@var{value}, the value of
the variable is set to @var{value}.
The return status is zero unless an invalid option is supplied, one of
the @var{name} arguments is not a valid shell variable or function name,
or the @option{-f} option is supplied with a name that is not a shell function.

@item return
@btindex return
@example
return [@var{n}]
@end example

Cause a shell function to stop executing and return the value @var{n}
to its caller.
If @var{n} is not supplied, the return value is the exit status of the
last command executed in the function.
@code{return} may also be used to terminate execution of a script
being executed with the @code{.} (@code{source}) builtin,
returning either @var{n} or
the exit status of the last command executed within the script as the exit
status of the script.
If @var{n} is supplied, the return value is its least significant
8 bits.
Any command associated with the @code{RETURN} trap is executed
before execution resumes after the function or script.
The return status is non-zero if @code{return} is supplied a non-numeric
argument or is used outside a function
and not during the execution of a script by @code{.} or @code{source}.

@item shift
@btindex shift
@example
shift [@var{n}]
@end example

Shift the positional parameters to the left by @var{n}.
The positional parameters from @var{n}+1 @dots{} @code{$#} are
renamed to @code{$1} @dots{} @code{$#}-@var{n}.
Parameters represented by the numbers @code{$#} to @code{$#}-@var{n}+1
are unset.
@var{n} must be a non-negative number less than or equal to @code{$#}.
If @var{n} is zero or greater than @code{$#}, the positional parameters
are not changed.
If @var{n} is not supplied, it is assumed to be 1.
The return status is zero unless @var{n} is greater than @code{$#} or
less than zero, non-zero otherwise.

@item test
@itemx [
@btindex test
@btindex [
@example
test @var{expr}
@end example

Evaluate a conditional express
ion @var{expr} and return a status of 0
(true) or 1 (false).
Each operator and operand must be a separate argument.
Expressions are composed of the primaries described below in
@ref{Bash Conditional Expressions}.
@code{test} does not accept any options, nor does it accept and ignore
an argument of @option{--} as signifying the end of options.

When the @code{[} form is used, the last argument to the command must
be a @code{]}.

Expressions may be combined using the following operators, listed in
decreasing order of precedence.
The evaluation depends on the number of arguments; see below.
Operator precedence is used when there are five or more arguments.

@table @code
@item ! @var{expr}
True if @var{expr} is false.

@item ( @var{expr} )
Returns the value of @var{expr}.
This may be used to override the normal precedence of operators.

@item @var{expr1} -a @var{expr2}
True if both @var{expr1} and @var{expr2} are true.

@item @var{expr1} -o @var{expr2}
True if either @var{expr1} or @var{expr2} is true.
@end table

The @code{test} and @code{[} builtins evaluate conditional
expressions using a set of rules based on the number of arguments.

@table @asis
@item 0 arguments
The expression is false.

@item 1 argument
The expression is true if and only if the argument is not null.

@item 2 arguments
If the first argument is @samp{!}, the expression is true if and
only if the second argument is null.
If the first argument is one of the unary conditional operators
(@pxref{Bash Conditional Expressions}), the expression
is true if the unary test is true.
If the first argument is not a valid unary operator, the expression is
false.

@item 3 arguments
The following conditions are applied in the order listed.
If the second argument is one of the binary conditional
operators (@pxref{Bash Conditional Expressions}), the
result of the expression is the result of the binary test using the
first and third arguments as operands.
The @samp{-a} and @samp{-o} operators are considered binary operators
when there are three arguments.
If the first argument is @samp{!}, the value is the negation of
the two-argument test using the second and third arguments.
If the first argument is exactly @samp{(} and the third argument is
exactly @samp{)}, the result is the one-argument test of the second
argument.
Otherwise, the expression is false.

@item 4 arguments
If the first argument is @samp{!}, the result is the negation of
the three-argument expression composed of the remaining arguments.
Otherwise, the expression is parsed and evaluated according to 
precedence using the rules listed above.

@item 5 or more arguments
The expression is parsed and evaluated according to precedence
using the rules listed above.
@end table

When used with @code{test} or @samp{[}, the @samp{<} and @samp{>}
operators sort lexicographically using ASCII ordering.

@item times
@btindex times
@example
times
@end example

Print out the user and system times used by the shell and its children.
The return status is zero.

@item trap
@btindex trap
@example
trap [-lp] [@var{arg}] [@var{sigspec} @dots{}]
@end example

The commands in @var{arg} are to be read and executed when the
shell receives signal @var{sigspec}.  If @var{arg} is absent (and
there is a single @var{sigspec}) or
equal to @samp{-}, each specified signal's disposition is reset
to the value it had when the shell was started.
If @var{arg} is the null string, then the signal specified by
each @var{sigspec} is ignored by the shell and commands it invokes.
If @var{arg} is not present and @option{-p} has been supplied,
the shell displays the trap commands associated with each @var{sigspec}.
If no arguments are supplied, or
only @option{-p} is given, @code{trap} prints the list of commands
associated with each signal number in a form that may be reused as
shell input.
The @option{-l} option causes the shell to print a list of signal names
and their corresponding numbers.
Each @var{sigspec} is either a signal name or a signal number.
Signal names are case insensitive and the @code{SIG} prefix is optional.

If a @var{sigspec}
is @code{0} or @code{EXIT}, @var{arg} is executed when the shell exits.
If a @var{sigspec} is @code{DEBUG}, the command @var{arg} is executed
before every simple command, @code{for} command, @code{case} command,
@code{select} command, every arithmetic @code{for} command, and before
the first command executes in a shell function.
Refer to the description of the @code{extdebug} option to the
@code{shopt} builtin (@pxref{The Shopt Builtin}) for details of its
effect on the @code{DEBUG} trap.
If a @var{sigspec} is @code{RETURN}, the command @var{arg} is executed
each time a shell function or a script executed with the @code{.} or
@code{source} builtins finishes executing.

If a @var{sigspec} is @code{ERR}, the command @var{arg} 
is executed whenever
a pipeline (which may consist of a single simple
command), a list, or a compound command returns a 
non-zero exit status,
subject to the following conditions.
The @code{ERR} trap is not executed if the failed command is part of the
command list immediately following an @code{until} or @code{while} keyword,
part of the test following the @code{if} or @code{elif} reserved words,
part of a command executed in a @code{&&} or @code{||} list
except the command following the final @code{&&} or @code{||},
any command in a pipeline but the last,
or if the command's return
status is being inverted using @code{!}.
These are the same conditions obeyed by the @code{errexit} (@option{-e})
option.

Signals ignored upon entry to the shell cannot be trapped or reset.
Trapped signals that are not being ignored are reset to their original
values in a subshell or subshell environment when one is created.

The return status is zero unless a @var{sigspec} does not specify a
valid signal.

@item umask
@btindex umask
@example
umask [-p] [-S] [@var{mode}]
@end example

Set the shell process's file creation mask to @var{mode}.  If
@var{mode} begins with a digit, it is interpreted as an octal number;
if not, it is interpreted as a symbolic mode mask similar
to that accepted by the @code{chmod} command.  If @var{mode} is
omitted, the current value of the mask is printed.  If the @option{-S}
option is supplied without a @var{mode} argument, the mask is printed
in a symbolic format.
If the  @option{-p} option is supplied, and @var{mode}
is omitted, the output is in a form that may be reused as input.
The return status is zero if the mode is successfully changed or if
no @var{mode} argument is supplied, and non-zero otherwise.

Note that when the mode is interpreted as an octal number, each number
of the umask is subtracted from @code{7}.  Thus, a umask of @code{022}
results in permissions of @code{755}.

@item unset
@btindex unset
@example
unset [-fnv] [@var{name}]
@end example

Remove each variable or function @var{name}.
If the @option{-v} option is given, each
@var{name} refers to a shell variable and that variable is remvoved.
If the @option{-f} option is given, the @var{name}s refer to shell
functions, and the function definition is removed.
If the @option{-n} option is supplied, and @var{name} is a variable with
the @var{nameref} attribute, @var{name} will be unset rather than the
variable it references.
@option{-n} has no effect if the @option{-f} option is supplied.
If no options are supplied, each @var{name} refers to a variable; if
there is no variable by that name, any function with that name is
unset.
Readonly variables and functions may not be unset.
The return status is zero unless a @var{name} is readonly.
@end table

@node Bash Builtins
@section Bash Builtin Commands

This section describes builtin commands which are unique to
or have been extended in Bash.
Some of these commands are specified in the @sc{posix} standard.

@table @code

@item alias
@btindex alias
@example
alias [-p] [@var{name}[=@var{value}] @dots{}]
@end example

Without arguments or with the @option{-p} option, @code{alias} prints
the list of aliases on the standard output in a form that allows
them to be reused as input.
If arguments are supplied, an alias is defined for each @var{name}
whose @var{value} is given.  If no @var{value} is given, the name
and value of the alias is printed.
Aliases are described in @ref{Aliases}.

@item bind
@btindex bind
@example
bind [-m @var{keymap}] [-lpsvPSVX]
bind [-m @var{keymap}] [-q @var{function}] [-u @var{function}] [-r @var{keyseq}]
bind [-m @var{keymap}] -f @var{filename}
bind [-m @var{keymap}] -x @var{keyseq:shell-command}
bind [-m @var{keymap}] @var{keyseq:function-name}
bind @var{readline-command}
@end example

Display current Readline (@pxref{Command Line Editing})
key and function bindings,
bind a key sequence to a Readline function or macro,
or set a Readline variable.
Each non-option argument is a command as it would appear in a
Readline initialization file (@pxref{Readline Init File}),
but each binding or command must be passed as a separate argument;  e.g.,
@samp{"\C-x\C-r":re-read-init-file}.

Options, if supplied, have the following meanings:

@table @code
@item -m @var{keymap}
Use @var{keymap} as the keymap to be affected by
the subsequent bindings.  Acceptable @var{keymap}
names are
@code{emacs},
@code{emacs-standard},
@code{emacs-meta},
@code{emacs-ctlx},
@code{vi},
@code{vi-move},
@code{vi-command}, and
@code{vi-insert}.
@code{vi} is equivalent to @code{vi-command};
@code{emacs} is equivalent to @code{emacs-standard}.

@item -l
List the names of all Readline functions.

@item -p
Display Readline function names and bindings in such a way that they
can be used as input or in a Readline initialization file.

@item -P
List current Readline function names and bindings.

@item -v
Display Readline variable names and values in such a way that they
can be used as input or in a Readline initialization file.

@item -V
List current Readline variable names and values.

@item -s
Display Readline key sequences bound to macros and the strings they output
in such a way that they can be used as input or in a Readline
initialization file.

@item -S
Display Readline key sequences bound to macros and the strings they output.

@item -f @var{filename}
Read key bindings from @var{filename}.

@item -q @var{function}
Query about which keys invoke the named @var{function}.

@item -u @var{function}
Unbind all keys bound to the named @var{function}.

@item -r @var{keyseq}
Remove any current binding for @var{keyseq}.

@item -x @var{keyseq:shell-command}
Cause @var{shell-command} to be executed whenever @var{keyseq} is
entered.
When @var{shell-command} is executed, the shell sets the
@code{READLINE_LINE} variable to the contents of the Readline line
buffer and the @code{READLINE_POINT} variable to the current location
of the insertion point.
If the executed command changes the value of @code{READLINE_LINE} or
@code{READLINE_POINT}, those new values will be reflected in the
editing state.

@item -X
List all key sequences bound to shell commands and the associated commands
in a format that can be reused as input.
@end table

@noindent
The return status is zero unless an invalid option is supplied or an
error occurs.

@item builtin
@btindex builtin
@example
builtin [@var{shell-builtin} [@var{args}]]
@end example

Run a shell builtin, passing it @var{args}, and return its exit status.
This is useful when defining a shell function with the same
name as a shell builtin, retaining the functionality of the builtin within
the function.
The return status is non-zero if @var{shell-builtin} is not a shell
builtin command.

@item caller
@btindex caller
@example
caller [@var{expr}]
@end example

Returns the context of any active subroutine call (a shell function or
a script executed with the @code{.} or @code{source} builtins).

Without @var{expr}, @code{caller} displays the line number and source
filename of the current subroutine call.
If a non-negative integer is supplied as @var{expr}, @code{caller} 
displays the line number, subroutine name, and source file corresponding
to that position in the current execution call stack.  This extra
information may be used, for example, to print a stack trace.  The
current frame is frame 0.

The return value is 0 unless the shell is not executing a subroutine
call or @var{expr} does not correspond to a valid position in the
call stack.

@item command
@btindex command
@example
command [-pVv] @var{command} [@var{arguments} @dots{}]
@end example

Runs @var{command} with @var{arguments} ignoring any shell function
named @var{command}.
Only shell builtin commands or commands found by searching the
@env{PATH} are executed.
If there is a shell function named @code{ls}, running @samp{command ls}
within the function will execute the external command @code{ls}
instead of calling the function recursively.
The @option{-p} option means to use a default value for @env{PATH}
that is guaranteed to find all of the standard utilities.
The return status in this case is 127 if @var{command} cannot be
found or an error occurred, and the exit status of @var{command}
otherwise.

If either the @option{-V} or @option{-v} option is supplied, a
description of @var{command} is printed.  The @option{-v} option
causes a single word indicating the command or file name used to
invoke @var{command} to be displayed; the @option{-V} option produces
a more verbose description.  In this case, the return status is
zero if @var{command} is found, and non-zero if not.

@item declare
@btindex declare
@example
declare [-aAfFgilnrtux] [-p] [@var{name}[=@var{value}] @dots{}]
@end example

Declare variables and give them attributes.  If no @var{name}s
are given, then display the values of variables instead. 

The @option{-p} option will display the attributes and values of each
@var{name}.
When @option{-p} is used with @var{name} arguments, additional options,
other than @option{-f} and @option{-F}, are ignored.

When @option{-p} is supplied without @var{name} arguments, @code{declare}
will display the attributes and values of all variables having the
attributes specified by the additional options.
If no other options are supplied with @option{-p}, @code{declare} will
display the attributes and values of all shell variables.  The @option{-f}
option will restrict the display to shell functions.

The @option{-F} option inhibits the display of function definitions;
only the function name and attributes are printed.
If the @code{extdebug} shell option is enabled using @code{shopt}
(@pxref{The Shopt Builtin}), the source file name and line number where
the function is defined are displayed as well.
@option{-F} implies @option{-f}.

The @option{-g} option forces variables to be created or modified at
the global scope, even when @code{declare} is executed in a shell function.
It is ignored in all other cases.

The following options can be used to restrict output to variables with
the specified attributes or to give variables attributes:

@table @code
@item -a
Each @var{name} is an indexed array variable (@pxref{Arrays}).

@item -A
Each @var{name} is an associative array variable (@pxref{Arrays}).

@item -f
Use function names only.

@item -i
The variable is to be treated as
an integer; arithmetic evaluation (@pxref{Shell Arithmetic}) is
performed when the variable is assigned a value.

@item -l
When the variable is assigned a value, all upper-case characters are
converted to lower-case.
The upper-case attribute is disabled.

@item -n
Give each @var{name} the @var{nameref} attribute, making
it a name reference to another variable.
That other variable is defined by the value of @var{name}.
All references and assignments to @var{name}, except for changing the
@option{-n} attribute itself, are performed on the variable referenced by
@var{name}'s value.
The @option{-n} attribute cannot be applied to array variables.

@item -r
Make @var{name}s readonly.  These names cannot then be assigned values
by subsequent assignment statements or unset.

@item -t
Give each @var{name} the @code{trace} attribute.
Traced functions inherit the @code{DEBUG} and @code{RETURN} traps from
the calling shell.
The trace attribute has no special meaning for variables.

@item -u
When the variable is assigned a value, all lower-case characters are
converted to upper-case.
The lower-case attribute is disabled.

@item -x
Mark each @var{name} for export to subsequent commands via
the environment.
@end table

Using @samp{+} instead of @samp{-} turns off the attribute instead,
with the exceptions that @samp{+a}
may not be used to destroy an array variable and @samp{+r} will not
remove the readonly attribute.
When used in a function, @code{declare} makes each @var{name} local,
as with the @code{local} command, unless the @option{-g} option is used.
If a variable name is followed by =@var{value}, the value of the variable
is set to @var{value}.

When using @option{-a} or @option{-A} and the compound assignment syntax to 
create array variables, additional attributes do not take effect until
subsequent assignments.

The return status is zero unless an invalid option is encountered,
an attempt is made to define a function using @samp{-f foo=bar},
an attempt is made to assign a value to a readonly variable,
an attempt is made to assign a value to an array variable without
using the compound assignment syntax (@pxref{Arrays}),
one of the @var{names} is not a valid shell variable name,
an attempt is made to turn off readonly status for a readonly variable,
an attempt is made to turn off array status for an array variable,
or an attempt is made to display a non-existent function with @option{-f}.

@item echo
@btindex echo
@example
echo [-neE] [@var{arg} @dots{}]
@end example

Output the @var{arg}s, separated by spaces, terminated with a
newline.
The return status is 0 unless a write error occurs.
If @option{-n} is specified, the trailing newline is suppressed.
If the @option{-e} option is given, interpretation of the following
backslash-escaped characters is enabled.
The @option{-E} option disables the interpretation of these escape characters,
even on systems where they are interpreted by default.
The @code{xpg_echo} shell option may be used to
dynamically determine whether or not @code{echo} expands these
escape characters by default.
@code{echo} does not interpret @option{--} to mean the end of options.

@code{echo} interprets the following escape sequences:
@table @code
@item \a
alert (bell)
@item \b
backspace
@item \c
suppress further output
@item \e
@itemx \E
escape
@item \f
form feed
@item \n
new line
@item \r
carriage return
@item \t 
horizontal tab
@item \v
vertical tab
@item \\
backslash
@item \0@var{nnn}
the eight-bit character whose value is the octal value @var{nnn}
(zero to three octal digits)
@item \x@var{HH}
the eight-bit character whose value is the hexadecimal value @var{HH}
(one or two hex digits)
@item \u@var{HHHH}
the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value
@var{HHHH} (one to four hex digits)
@item \U@var{HHHHHHHH}
the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value
@var{HHHHHHHH} (one to eight hex digits)
@end table

@item enable
@btindex enable
@example
enable [-a] [-dnps] [-f @var{filename}] [@var{name} @dots{}]
@end example

Enable and disable builtin shell commands.
Disabling a builtin allows a disk command which has the same name
as a shell builtin to be executed without specifying a full pathname,
even though the shell normally searches for builtins before disk commands.
If @option{-n} is used, the @var{name}s become disabled.  Otherwise
@var{name}s are enabled.  For example, to use the @code{test} binary
found via @env{$PATH} instead of the shell builtin version, type
@samp{enable -n test}.

If the @option{-p} option is supplied, or no @var{name} arguments appear,
a list of shell builtins is printed.  With no other arguments, the list
consists of all enabled shell builtins.
The @option{-a} option means to list
each builtin with an indication of whether or not it is enabled. 

The @option{-f} option means to load the new builtin command @var{name}
from shared object @var{filename}, on systems that support dynamic loading.
The @option{-d} option will delete a builtin loaded with @option{-f}.

If there are no options, a list of the shell builtins is displayed.
The @option{-s} option restricts @code{enable} to the @sc{posix} special
builtins.  If @option{-s} is used with @option{-f}, the new builtin becomes
a special builtin (@pxref{Special Builtins}).

The return status is zero unless a @var{name} is not a shell builtin
or there is an error loading a new builtin from a shared object.

@item help
@btindex help
@example
help [-dms] [@var{pattern}]
@end example

Display helpful information about builtin commands.
If @var{pattern} is specified, @code{help} gives detailed help
on all commands matching @var{pattern}, otherwise a list of
the builtins is printed.

Options, if supplied, have the following meanings:

@table @code
@item -d
Display a short description of each @var{pattern}
@item -m
Display the description of each @var{pattern} in a manpage-like format
@item -s
Display only a short usage synopsis for each @var{pattern}
@end table

The return status is zero unless no command matches @var{pattern}.

@item let
@btindex let
@example
let @var{expression} [@var{expression} @dots{}]
@end example

The @code{let} builtin allows arithmetic to be performed on shell
variables.  Each @var{expression} is evaluated according to the
rules given below in @ref{Shell Arithmetic}.  If the
last @var{expression} evaluates to 0, @code{let} returns 1;
otherwise 0 is returned.

@item local
@btindex local
@example
local [@var{option}] @var{name}[=@var{value}] @dots{}
@end example

For each argument, a local variable named @var{name} is created,
and assigned @var{value}.
The @var{option} can be any of the options accepted by @code{declare}.
@code{local} can only be used within a function; it makes the variable
@var{name} have a visible scope restricted to that function and its
children.  The return status is zero unless @code{local} is used outside
a function, an invalid @var{name} is supplied, or @var{name} is a
readonly variable.

@item logout
@btindex logout
@example
logout [@var{n}]
@end example

Exit a login shell, returning a status of @var{n} to the shell's
parent.

@item mapfile
@btindex mapfile
@example
mapfile [-n @var{count}] [-O @var{origin}] [-s @var{count}] [-t] [-u @var{fd}]
    [-C @var{callback}] [-c @var{quantum}] [@var{array}]
@end example

Read lines from the standard input into the indexed array variable @var{array},
or from file descriptor @var{fd}
if the @option{-u} option is supplied.
The variable @code{MAPFILE} is the default @var{array}.
Options, if supplied, have the following meanings:

@table @code

@item -n
Copy at most @var{count} lines.  If @var{count} is 0, all lines are copied.
@item -O
Begin assigning to @var{array} at index @var{origin}.
The default index is 0.
@item -s
Discard the first @var{count} lines read.
@item -t
Remove a trailing newline from each line read.
@item -u
Read lines from file descriptor @var{fd} instead of the standard input.
@item -C
Evaluate @var{callback} each time @var{quantum}P lines are read.
The @option{-c} option specifies @var{quantum}.
@item -c
Specify the number of lines read between each call to @var{callback}.
@end table

If @option{-C} is specified without @option{-c}, 
the default quantum is 5000.
When @var{callback}  is evaluated, it is supplied the index of the next
array element to be assigned and the line to be assigned to that element
as additional arguments.
@var{callback} is evaluated after the line is read but before the 
array element is assigned.

If not supplied with an explicit origin, @code{mapfile} will clear @var{array}
before assigning to it.

@code{mapfile} returns successfully unless an invalid option or option
argument is supplied, @var{array} is invalid or unassignable, or @var{array}
is not an indexed array.

@item printf
@btindex printf
@example
printf [-v @var{var}] @var{format} [@var{arguments}]
@end example

Write the formatted @var{arguments} to the standard output under the
control of the @var{format}.
The @option{-v} option causes the output to be assigned to the variable
@var{var} rather than being printed to the standard output.

The @var{format} is a character string which contains three types of objects:
plain characters, which are simply copied to standard output, character
escape sequences, which are converted and copied to the standard output, and
format specifications, each of which causes printing of the next successive
@var{argument}.
In addition to the standard @code{printf(1)} formats, @code{printf}
interprets the following extensions:

@table @code
@item %b
Causes @code{printf} to expand backslash escape sequences in the
corresponding @var{argument},
except that @samp{\c} terminates output, backslashes in
@samp{\'}, @samp{\"}, and @samp{\?} are not removed, and octal escapes
beginning with @samp{\0} may contain up to four digits.
@item %q
Causes @code{printf} to output the
corresponding @var{argument} in a format that can be reused as shell input.
@item %(@var{datefmt})T
Causes @code{printf} to output the date-time string resulting from using
@var{datefmt} as a format string for @code{strftime}(3).
The corresponding @var{argument} is an integer representing the number of
seconds since the epoch.
Two special argument values may be used: -1 represents the current
time, and -2 represents the time the shell was invoked.
If no argument is specified, conversion behaves as if -1 had been given.
This is an exception to the usual @code{printf} behavior.
@end table

@noindent
Arguments to non-string format specifiers are treated as C language constants,
except that a leading plus or minus sign is allowed, and if the leading
character is a single or double quote, the value is the ASCII value of
the following character.

The @var{format} is reused as necessary to consume all of the @var{arguments}.
If the @var{format} requires more @var{arguments} than are supplied, the
extra format specifications behave as if a zero value or null string, as
appropriate, had been supplied.  The return value is zero on success,
non-zero on failure.

@item read
@btindex read
@example
read [-ers] [-a @var{aname}] [-d @var{delim}] [-i @var{text}] [-n @var{nchars}]
    [-N @var{nchars}] [-p @var{prompt}] [-t @var{timeout}] [-u @var{fd}] [@var{name} @dots{}]
@end example

One line is read from the standard input, or from the file descriptor
@var{fd} supplied as an argument to the @option{-u} option, and the first word
is assigned to the first @var{name}, the second word to the second @var{name},
and so on, with leftover words and their intervening separators assigned
to the last @var{name}.
If there are fewer words read from the input stream than names,
the remaining names are assigned empty values.
The characters in the value of the @env{IFS} variable
are used to split the line into words using the same rules the shell
uses for expansion (described above in @ref{Word Splitting}).
The backslash character @samp{\} may be used to remove any special
meaning for the next character read and for line continuation.
If no names are supplied, the line read is assigned to the
variable @env{REPLY}.
The return code is zero, unless end-of-file is encountered, @code{read}
times out (in which case the return code is greater than 128),
a variable assignment error (such as assigning to a readonly variable) occurs,
or an invalid file descriptor is supplied as the argument to @option{-u}.

Options, if supplied, have the following meanings:

@table @code
@item -a @var{aname}
The words are assigned to sequential indices of the array variable
@var{aname}, starting at 0.
All elements are removed from @var{aname} before the assignment.
Other @var{name} arguments are ignored.

@item -d @var{delim}
The first character of @var{delim} is used to terminate the input line,
rather than newline.

@item -e
Readline (@pxref{Command Line Editing}) is used to obtain the line.
Readline uses the current (or default, if line editing was not previously
active) editing settings.

@item -i @var{text}
If Readline is being used to read the line, @var{text} is placed into
the editing buffer before editing begins.

@item -n @var{nchars}
@code{read} returns after reading @var{nchars} characters rather than
waiting for a complete line of input, but honor a delimiter if fewer
than @var{nchars} characters are read before the delimiter.

@item -N @var{nchars}
@code{read} returns after reading exactly @var{nchars} characters rather
than waiting for a complete line of input, unless EOF is encountered or
@code{read} times out.
Delimiter characters encountered in the input are
not treated specially and do not cause @code{read} to return until
@var{nchars} characters are read.

@item -p @var{prompt}
Display @var{prompt}, without a trailing newline, before attempting
to read any input.
The prompt is displayed only if input is coming from a terminal.

@item -r
If this option is given, backslash does not act as an escape character.
The backslash is considered to be part of the line.
In particular, a backslash-newline pair may not be used as a line
continuation.

@item -s
Silent mode.  If input is coming from a terminal, characters are
not echoed.

@item -t @var{timeout}
Cause @code{read} to time out and return failure if a complete line of
input (or a specified number of characters)
is not read within @var{timeout} seconds.
@var{timeout}  may be a decimal number with a fractional portion following
the decimal point.
This option is only effective if @code{read} is reading input from a
terminal, pipe, or other special file; it has no effect when reading
from regular files.
If @code{read} times out, @code{read} saves any partial input read into
the specified variable @var{name}.
If @var{timeout} is 0, @code{read} returns immediately, without trying to
read and data.  The exit status is 0 if input is available on
the specified file descriptor, non-zero otherwise.
The exit status is greater than 128 if the timeout is exceeded.

@item -u @var{fd}
Read input from file descriptor @var{fd}.
@end table

@item readarray
@btindex readarray
@example
readarray [-n @var{count}] [-O @var{origin}] [-s @var{count}] [-t] [-u @var{fd}]
    [-C @var{callback}] [-c @var{quantum}] [@var{array}]
@end example

Read lines from the standard input into the indexed array variable @var{array},
or from file descriptor @var{fd}
if the @option{-u} option is supplied.

A synonym for @code{mapfile}.

@item source
@btindex source
@example
source @var{filename}
@end example

A synonym for @code{.} (@pxref{Bourne Shell Builtins}).

@item type
@btindex type
@example
type [-afptP] [@var{name} @dots{}]
@end example

For each @var{name}, indicate how it would be interpreted if used as a
command name.

If the @option{-t} option is used, @code{type} prints a single word
which is one of @samp{alias}, @samp{function}, @samp{builtin},
@samp{file} or @samp{keyword},
if @var{name} is an alias, shell function, shell builtin,
disk file, or shell reserved word, respectively.
If the @var{name} is not found, then nothing is printed, and
@code{type} returns a failure status.

If the @option{-p} option is used, @code{type} either returns the name
of the disk file that would be executed, or nothing if @option{-t}
would not return @samp{file}.

The @option{-P} option forces a path search for each @var{name}, even if
@option{-t} would not return @samp{file}.

If a command is hashed, @option{-p} and @option{-P} print the hashed value,
which is not necessarily the file that appears first in @code{$PATH}.

If the @option{-a} option is used, @code{type} returns all of the places
that contain an executable named @var{file}.
This includes aliases and functions, if and only if the @option{-p} option
is not also used.

If the @option{-f} option is used, @code{type} does not attempt to find
shell functions, as with the @code{command} builtin.

The return status is zero if all of the @var{names} are found, non-zero
if any are not found.

@item typeset
@btindex typeset
@example
typeset [-afFgrxilnrtux] [-p] [@var{name}[=@var{value}] @dots{}]
@end example

The @code{typeset} command is supplied for compatibility with the Korn
shell.
It is a synonym for the @code{declare} builtin command.

@item ulimit
@btindex ulimit
@example
ulimit [-abcdefilmnpqrstuvxHST] [@var{limit}]
@end example

@code{ulimit} provides control over the resources available to processes
started by the shell, on systems that allow such control.  If an
option is given, it is interpreted as follows:

@table @code
@item -S
Change and report the soft limit associated with a resource.

@item -H
Change and report the hard limit associated with a resource.

@item -a
All current limits are reported.

@item -b
The maximum socket buffer size.

@item -c
The maximum size of core files created.

@item -d
The maximum size of a process's data segment.

@item -e
The maximum scheduling priority ("nice").

@item -f
The maximum size of files written by the shell and its children.

@item -i
The maximum number of pending signals.

@item -l
The maximum size that may be locked into memory.

@item -m
The maximum resident set size (many systems do not honor this limit).

@item -n
The maximum number of open file descriptors (most systems do not
allow this value to be set).

@item -p
The pipe buffer size.

@item -q
The maximum number of bytes in POSIX message queues.

@item -r
The maximum real-time scheduling priority.

@item -s
The maximum stack size.

@item -t
The maximum amount of cpu time in seconds.

@item -u
The maximum number of processes available to a single user.

@item -v
The maximum amount of virtual memory available to the shell, and, on
some systems, to its children.

@item -x
The maximum number of file locks.

@item -T
The maximum number of threads.
@end table

If @var{limit} is given, and the @option{-a} option is not used,
@var{limit} is the new value of the specified resource.
The special @var{limit} values @code{hard}, @code{soft}, and
@code{unlimited} stand for the current hard limit, the current soft limit,
and no limit, respectively.
A hard limit cannot be increased by a non-root user once it is set;
a soft limit may be increased up to the value of the hard limit.
Otherwise, the current value of the soft limit for the specified resource
is printed, unless the @option{-H} option is supplied.
When setting new limits, if neither @option{-H} nor @option{-S} is supplied,
both the hard and soft limits are set.
If no option is given, then @option{-f} is assumed.  Values are in 1024-byte
increments, except for @option{-t}, which is in seconds; @option{-p},
which is in units of 512-byte blocks; and @option{-T}, @option{-b},
@option{-n} and @option{-u}, which are unscaled values.

The return status is zero unless an invalid option or argument is supplied,
or an error occurs while setting a new limit.

@item unalias
@btindex unalias
@example
unalias [-a] [@var{name} @dots{} ]
@end example

Remove each @var{name} from the list of aliases.  If @option{-a} is
supplied, all aliases are removed.
Aliases are described in @ref{Aliases}.
@end table

@node Modifying Shell Behavior
@section Modifying Shell Behavior
 
@menu
* The Set Builtin::		Change the values of shell attributes and
				positional parameters.
* The Shopt Builtin::		Modify shell optional behavior.
@end menu

@node The Set Builtin
@subsection The Set Builtin

This builtin is so complicated that it deserves its own section.  @code{set}
allows you to change the values of shell options and set the positional
parameters, or to display the names and values of shell variables.

@table @code
@item set
@btindex set
@example
set [--abefhkmnptuvxBCEHPT] [-o @var{option-name}] [@var{argument} @dots{}]
set [+abefhkmnptuvxBCEHPT] [+o @var{option-name}] [@var{argument} @dots{}]
@end example

If no options or arguments are supplied, @code{set} displays the names
and values of all shell variables and functions, sorted according to the
current locale, in a format that may be reused as input
for setting or resetting the currently-set variables.
Read-only variables cannot be reset.
In @sc{posix} mode, only shell variables are listed.

When options are supplied, they set or unset shell attributes.
Options, if specified, have the following meanings:

@table @code
@item -a
Mark variables and function which are modified or created for export
to the environment of subsequent commands.

@item -b
Cause the status of terminated background jobs to be reported
immediately, rather than before printing the next primary prompt.

@item -e
Exit immediately if
a pipeline (@pxref{Pipelines}), which may consist of a single simple command
(@pxref{Simple Commands}),
a list (@pxref{Lists}),
or a compound command (@pxref{Compound Commands})
returns a non-zero status.
The shell does not exit if the command that fails is part of the
command list immediately following a @code{while} or @code{until} keyword,
part of the test in an @code{if} statement,
part of any command executed in a @code{&&} or @code{||} list except
the command following the final @code{&&} or @code{||},
any command in a pipeline but the last,
or if the command's return status is being inverted with @code{!}.
If a compound command other than a subshell
returns a non-zero status because a command failed
while @option{-e} was being ignored, the shell does not exit.
A trap on @code{ERR}, if set, is executed before the shell exits.

This option applies to the shell environment and each subshell environment
separately (@pxref{Command Execution Environment}), and may cause
subshells to exit before executing all the commands in the subshell.

If a compound command or shell function executes in a context where
@option{-e} is being ignored,
none of the commands executed within the compound command or function body
will be affected by the @option{-e} setting, even if @option{-e} is set
and a command returns a failure status.
If a compound command or shell function sets @option{-e} while executing in
a context where @option{-e} is ignored, that setting will not have any
effect until the compound command or the command containing the function
call completes.

@item -f
Disable filename expansion (globbing).

@item -h
Locate and remember (hash) commands as they are looked up for execution.
This option is enabled by default.

@item -k
All arguments in the form of assignment statements are placed
in the environment for a command, not just those that precede
the command name.

@item -m
Job control is enabled (@pxref{Job Control}).
All processes run in a separate process group.
When a background job completes, the shell prints a line
containing its exit status.

@item -n
Read commands but do not execute them; this may be used to check a
script for syntax errors.
This option is ignored by interactive shells.

@item -o @var{option-name}

Set the option corresponding to @var{option-name}:

@table @code
@item allexport
Same as @code{-a}.

@item braceexpand
Same as @code{-B}.

@item emacs
Use an @code{emacs}-style line editing interface (@pxref{Command Line Editing}).
This also affects the editing interface used for @code{read -e}.

@item errexit
Same as @code{-e}.

@item errtrace
Same as @code{-E}.

@item functrace
Same as @code{-T}.

@item hashall
Same as @code{-h}.

@item histexpand
Same as @code{-H}.

@item history
Enable command history, as described in @ref{Bash History Facilities}.
This option is on by default in interactive shells.

@item ignoreeof
An interactive shell will not exit upon reading EOF.

@item keyword
Same as @code{-k}.

@item monitor
Same as @code{-m}.

@item noclobber
Same as @code{-C}.

@item noexec
Same as @code{-n}.

@item noglob
Same as @code{-f}.

@item nolog
Currently ignored.

@item notify
Same as @code{-b}.

@item nounset
Same as @code{-u}.

@item onecmd
Same as @code{-t}.

@item physical
Same as @code{-P}.

@item pipefail
If set, the return value of a pipeline is the value of the last
(rightmost) command to exit with a non-zero status, or zero if all
commands in the pipeline exit successfully.
This option is disabled by default.

@item posix
Change the behavior of Bash where the default operation differs
from the @sc{posix} standard to match the standard
(@pxref{Bash POSIX Mode}).
This is intended to make Bash behave as a strict superset of that
standard.

@item privileged
Same as @code{-p}.

@item verbose
Same as @code{-v}.

@item vi
Use a @code{vi}-style line editing interface.
This also affects the editing interface used for @code{read -e}.

@item xtrace
Same as @code{-x}.
@end table

@item -p
Turn on privileged mode.
In this mode, the @env{$BASH_ENV} and @env{$ENV} files are not
processed, shell functions are not inherited from the environment,
and the @env{SHELLOPTS}, @env{BASHOPTS}, @env{CDPATH} and @env{GLOBIGNORE}
variables, if they appear in the environment, are ignored.
If the shell is started with the effective user (group) id not equal to the
real user (group) id, and the @option{-p} option is not supplied, these actions
are taken and the effective user id is set to the real user id.
If the @option{-p} option is supplied at startup, the effective user id is
not reset.
Turning this option off causes the effective user
and group ids to be set to the real user and group ids.

@item -t
Exit after reading and executing one command.

@item -u
Treat unset variables and parameters other than the special parameters
@samp{@@} or @samp{*} as an error when performing parameter expansion.
An error message will be written to the standard error, and a non-interactive
shell will exit.

@item -v
Print shell input lines as they are read.

@item -x
Print a trace of simple commands, @code{for} commands, @code{case}
commands, @code{select} commands, and arithmetic @code{for} commands
and their arguments or associated word lists after they are
expanded and before they are executed.  The value of the @env{PS4}
variable is expanded and the resultant value is printed before
the command and its expanded arguments.

@item -B
The shell will perform brace expansion (@pxref{Brace Expansion}).
This option is on by default.

@item -C
Prevent output redirection using @samp{>}, @samp{>&}, and @samp{<>}
from overwriting existing files.

@item -E
If set, any trap on @code{ERR} is inherited by shell functions, command
substitutions, and commands executed in a subshell environment.
The @code{ERR} trap is normally not inherited in such cases.

@item -H
Enable @samp{!} style history substitution (@pxref{History Interaction}).
This option is on by default for interactive shells.

@item -P
If set, do not resolve symbolic links when performing commands such as
@code{cd} which change the current directory.  The physical directory
is used instead.  By default, Bash follows
the logical chain of directories when performing commands
which change the current directory.

For example, if @file{/usr/sys} is a symbolic link to @file{/usr/local/sys}
then:
@example
$ cd /usr/sys; echo $PWD
/usr/sys
$ cd ..; pwd
/usr
@end example

@noindent
If @code{set -P} is on, then:
@example
$ cd /usr/sys; echo $PWD
/usr/local/sys
$ cd ..; pwd
/usr/local
@end example

@item -T
If set, any trap on @code{DEBUG} and @code{RETURN} are inherited by
shell functions, command substitutions, and commands executed
in a subshell environment.
The @code{DEBUG} and @code{RETURN} traps are normally not inherited
in such cases.

@item --
If no arguments follow this option, then the positional parameters are
unset.  Otherwise, the positional parameters are set to the
@var{arguments}, even if some of them begin with a @samp{-}.

@item -
Signal the end of options, cause all remaining @var{arguments}
to be assigned to the positional parameters.  The @option{-x}
and @option{-v}  options are turned off.
If there are no arguments, the positional parameters remain unchanged.
@end table

Using @samp{+} rather than @samp{-} causes these options to be
turned off.  The options can also be used upon invocation of the
shell.  The current set of options may be found in @code{$-}.

The remaining N @var{arguments} are positional parameters and are
assigned, in order, to @code{$1}, @code{$2}, @dots{}  @code{$N}.
The special parameter @code{#} is set to N.

The return status is always zero unless an invalid option is supplied.
@end table

@node The Shopt Builtin
@subsection The Shopt Builtin

This builtin allows you to change additional shell optional behavior.

@table @code

@item shopt
@btindex shopt
@example
shopt [-pqsu] [-o] [@var{optname} @dots{}]
@end example

Toggle the values of settings controlling optional shell behavior.
The settings can be either those listed below, or, if the
@option{-o} option is used, those available with the @option{-o}
option to the @code{set} builtin command (@pxref{The Set Builtin}).
With no options, or with the @option{-p} option, a list of all settable
options is displayed, with an indication of whether or not each is set.
The @option{-p} option causes output to be displayed in a form that
may be reused as input.
Other options have the following meanings:

@table @code
@item -s
Enable (set) each @var{optname}.

@item -u
Disable (unset) each @var{optname}.

@item -q
Suppresses normal output; the return status
indicates whether the @var{optname} is set or unset.
If multiple @var{optname} arguments are given with @option{-q},
the return status is zero if all @var{optnames} are enabled;
non-zero otherwise.

@item -o
Restricts the values of
@var{optname} to be those defined for the @option{-o} option to the
@code{set} builtin (@pxref{The Set Builtin}).
@end table

If either @option{-s} or @option{-u}
is used with no @var{optname} arguments, @code{shopt} shows only
those options which are set or unset, respectively.

Unless otherwise noted, the @code{shopt} options are disabled (off)
by default.

The return status when listing options is zero if all @var{optnames}
are enabled, non-zero otherwise.  When setting or unsetting options,
the return status is zero unless an @var{optname} is not a valid shell
option.

The list of @code{shopt} options is:
@table @code

@item autocd
If set, a command name that is the name of a directory is executed as if
it were the argument to the @code{cd} command.
This option is only used by interactive shells.

@item cdable_vars
If this is set, an argument to the @code{cd} builtin command that
is not a directory is assumed to be the name of a variable whose
value is the directory to change to.

@item cdspell
If set, minor errors in the spelling of a directory component in a
@code{cd} command will be corrected.
The errors checked for are transposed characters,
a missing character, and a character too many.
If a correction is found, the corrected path is printed,
and the command proceeds.
This option is only used by interactive shells.

@item checkhash
If this is set, Bash checks that a command found in the hash
table exists before trying to execute it.  If a hashed command no
longer exists, a normal path search is performed.

@item checkjobs
If set, Bash lists the status of any stopped and running jobs before
exiting an interactive shell.  If any jobs are running, this causes
the exit to be deferred until a second exit is attempted without an
intervening command (@pxref{Job Control}).
The shell always postpones exiting if any jobs are stopped.

@item checkwinsize
If set, Bash checks the window size after each command
 and, if necessary, updates the values of    
@env{LINES} and @env{COLUMNS}.

@item cmdhist
If set, Bash
attempts to save all lines of a multiple-line
command in the same history entry.  This allows
easy re-editing of multi-line commands.

@item compat31
If set, Bash
changes its behavior to that of version 3.1 with respect to quoted
arguments to the conditional command's @samp{=~} operator
and with respect to locale-specific
string comparison when using the @code{[[}
conditional command's @samp{<} and @samp{>} operators.
Bash versions prior to bash-4.1 use ASCII collation and strcmp(3);
bash-4.1 and later use the current locale's collation sequence and strcoll(3).

@item compat32
If set, Bash
changes its behavior to that of version 3.2 with respect to locale-specific
string comparison when using the @code{[[}
conditional command's @samp{<} and @samp{>} operators (see previous item).

@item compat40
If set, Bash
changes its behavior to that of version 4.0 with respect to locale-specific
string comparison when using the @code{[[}
conditional command's @samp{<} and @samp{>} operators (see description
of @code{compat31})
and the effect of interrupting a command list.
Bash versions 4.0 and later interrupt the list as if the shell received the
interrupt; previous versions continue with the next command in the list.

@item compat41
If set, Bash, when in @sc{posix} mode, treats a single quote in a double-quoted
parameter expansion as a special character.  The single quotes must match
(an even number) and the characters between the single quotes are considered
quoted.  This is the behavior of @sc{posix} mode through version 4.1.
The default Bash behavior remains as in previous versions.

@item compat42
If set, Bash
does not process the replacement string in the pattern substitution word
expansion using quote removal.

@item complete_fullquote
If set, Bash
quotes all shell metacharacters in filenames and directory names when
performing completion.
If not set, Bash
removes metacharacters such as the dollar sign from the set of
characters that will be quoted in completed filenames
when these metacharacters appear in shell variable references in words to be
completed.
This means that dollar signs in variable names that expand to directories
will not be quoted;
however, any dollar signs appearing in filenames will not be quoted, either.
This is active only when bash is using backslashes to quote completed
filenames.
This variable is set by default, which is the default Bash behavior in
versions through 4.2.

@item direxpand
If set, Bash
replaces directory names with the results of word expansion when performing
filename completion.  This changes the contents of the readline editing
buffer.
If not set, Bash attempts to preserve what the user typed.

@item dirspell
If set, Bash
attempts spelling correction on directory names during word completion 
if the directory name initially supplied does not exist.

@item dotglob
If set, Bash includes filenames beginning with a `.' in
the results of filename expansion.

@item execfail
If this is set, a non-interactive shell will not exit if
it cannot execute the file specified as an argument to the @code{exec}
builtin command.  An interactive shell does not exit if @code{exec}
fails.

@item expand_aliases
If set, aliases are expanded as described below under Aliases,
@ref{Aliases}.
This option is enabled by default for interactive shells.

@item extdebug
If set, behavior intended for use by debuggers is enabled:

@enumerate
@item
The @option{-F} option to the @code{declare} builtin (@pxref{Bash Builtins})
displays the source file name and line number corresponding to each function
name supplied as an argument.

@item
If the command run by the @code{DEBUG} trap returns a non-zero value, the
next command is skipped and not executed.

@item
If the command run by the @code{DEBUG} trap returns a value of 2, and the
shell is executing in a subroutine (a shell function or a shell script
executed by the @code{.} or @code{source} builtins), a call to
@code{return} is simulated.

@item
@code{BASH_ARGC} and @code{BASH_ARGV} are updated as described in their
descriptions (@pxref{Bash Variables}).

@item
Function tracing is enabled:  command substitution, shell functions, and
subshells invoked with @code{( @var{command} )} inherit the
@code{DEBUG} and @code{RETURN} traps.

@item
Error tracing is enabled:  command substitution, shell functions, and
subshells invoked with @code{( @var{command} )} inherit the
@code{ERR} trap.
@end enumerate

@item extglob
If set, the extended pattern matching features described above
(@pxref{Pattern Matching}) are enabled.

@item extquote
If set, @code{$'@var{string}'} and @code{$"@var{string}"} quoting is  
performed within @code{$@{@var{parameter}@}} expansions                     
enclosed in double quotes.  This option is enabled by default. 

@item failglob
If set, patterns which fail to match filenames during filename expansion
result in an expansion error.

@item force_fignore
If set, the suffixes specified by the @env{FIGNORE} shell variable
cause words to be ignored when performing word completion even if
the ignored words are the only possible completions.
@xref{Bash Variables}, for a description of @env{FIGNORE}.
This option is enabled by default.

@item globasciiranges
If set, range expressions used in pattern matching bracket expressions
(@pxref{Pattern Matching})
behave as if in the traditional C locale when performing
comparisons.  That is, the current locale's collating sequence
is not taken into account, so
@samp{b} will not collate between @samp{A} and @samp{B},
and upper-case and lower-case ASCII characters will collate together.   

@item globstar
If set, the pattern @samp{**} used in a filename expansion context will
match all files and zero or more directories and subdirectories.
If the pattern is followed by a @samp{/}, only directories and
subdirectories match.

@item gnu_errfmt
If set, shell error messages are written in the standard @sc{gnu} error
message format.

@item histappend
If set, the history list is appended to the file named by the value
of the @env{HISTFILE}
variable when the shell exits, rather than overwriting the file.

@item histreedit
If set, and Readline
is being used, a user is given the opportunity to re-edit a
failed history substitution.

@item histverify
If set, and Readline
is being used, the results of history substitution are not immediately
passed to the shell parser.  Instead, the resulting line is loaded into
the Readline editing buffer, allowing further modification.

@item hostcomplete
If set, and Readline is being used, Bash will attempt to perform
hostname completion when a word containing a @samp{@@} is being
completed (@pxref{Commands For Completion}).  This option is enabled
by default.

@item huponexit
If set, Bash will send @code{SIGHUP} to all jobs when an interactive
login shell exits (@pxref{Signals}).

@item interactive_comments
Allow a word beginning with @samp{#}
to cause that word and all remaining characters on that
line to be ignored in an interactive shell.
This option is enabled by default.

@item lastpipe
If set, and job control is not active, the shell runs the last command of
a pipeline not executed in the background in the current shell environment.

@item lithist
If enabled, and the @code{cmdhist}
option is enabled, multi-line commands are saved to the history with
embedded newlines rather than using semicolon separators where possible.

@item login_shell
The shell sets this option if it is started as a login shell
(@pxref{Invoking Bash}).
The value may not be changed.

@item mailwarn
If set, and a file that Bash is checking for mail has been  
accessed since the last time it was checked, the message
@code{"The mail in @var{mailfile} has been read"} is displayed.

@item no_empty_cmd_completion
If set, and Readline is being used, Bash will not attempt to search
the @env{PATH} for possible completions when completion is attempted
on an empty line.

@item nocaseglob
If set, Bash matches filenames in a case-insensitive fashion when
performing filename expansion.

@item nocasematch
If set, Bash matches patterns in a case-insensitive fashion when
performing matching while executing @code{case} or @code{[[}
conditional commands.

@item nullglob
If set, Bash allows filename patterns which match no
files to expand to a null string, rather than themselves.

@item progcomp
If set, the programmable completion facilities
(@pxref{Programmable Completion}) are enabled.
This option is enabled by default.

@item promptvars
If set, prompt strings undergo
parameter expansion, command substitution, arithmetic
expansion, and quote removal after being expanded
as described below (@pxref{Controlling the Prompt}).
This option is enabled by default.

@item restricted_shell
The shell sets this option if it is started in restricted mode
(@pxref{The Restricted Shell}).
The value may not be changed.
This is not reset when the startup files are executed, allowing
the startup files to discover whether or not a shell is restricted.

@item shift_verbose
If this is set, the @code{shift}
builtin prints an error message when the shift count exceeds the
number of positional parameters.

@item sourcepath
If set, the @code{source} builtin uses the value of @env{PATH}
to find the directory containing the file supplied as an argument.
This option is enabled by default.

@item xpg_echo
If set, the @code{echo} builtin expands backslash-escape sequences
by default.

@end table

@noindent
The return status when listing options is zero if all @var{optnames}
are enabled, non-zero otherwise.
When setting or unsetting options, the return status is zero unless an
@var{optname} is not a valid shell option.
@end table

@node Special Builtins
@section Special Builtins
@cindex special builtin

For historical reasons, the @sc{posix} standard has classified
several builtin commands as @emph{special}.
When Bash is executing in @sc{posix} mode, the special builtins
differ from other builtin commands in three respects:

@enumerate
@item
Special builtins are found before shell functions during command lookup.

@item
If a special builtin returns an error status, a non-interactive shell exits.

@item
Assignment statements preceding the command stay in effect in the shell
environment after the command completes.
@end enumerate

When Bash is not executing in @sc{posix} mode, these builtins behave no
differently than the rest of the Bash builtin commands.
The Bash @sc{posix} mode is described in @ref{Bash POSIX Mode}. 

These are the @sc{posix} special builtins:
@example
@w{break : . continue eval exec exit export readonly return set}
@w{shift trap unset}
@end example

@node Shell Variables
@chapter Shell Variables

@menu
* Bourne Shell Variables::	Variables which Bash uses in the same way
				as the Bourne Shell.
* Bash Variables::		List of variables that exist in Bash.
@end menu

This chapter describes the shell variables that Bash uses.
Bash automatically assigns default values to a number of variables.

@node Bourne Shell Variables
@section Bourne Shell Variables

Bash uses certain shell variables in the same way as the Bourne shell.
In some cases, Bash assigns a default value to the variable.

@vtable @code

@item CDPATH
A colon-separated list of directories used as a search path for
the @code{cd} builtin command.

@item HOME
The current user's home directory; the default for the @code{cd} builtin
command.
The value of this variable is also used by tilde expansion
(@pxref{Tilde Expansion}).

@item IFS
A list of characters that separate fields; used when the shell splits
words as part of expansion.

@item MAIL
If this parameter is set to a filename or directory name
and the @env{MAILPATH} variable
is not set, Bash informs the user of the arrival of mail in
the specified file or Maildir-format directory.

@item MAILPATH
A colon-separated list of filenames which the shell periodically checks
for new mail.
Each list entry can specify the message that is printed when new mail
arrives in the mail file by separating the filename from the message with
a @samp{?}.
When used in the text of the message, @code{$_} expands to the name of
the current mail file.

@item OPTARG
The value of the last option argument processed by the @code{getopts} builtin.

@item OPTIND
The index of the last option argument processed by the @code{getopts} builtin.

@item PATH
A colon-separated list of directories in which the shell looks for
commands.
A zero-length (null) directory name in the value of @code{PATH} indicates the
current directory.
A null directory name may appear as two adjacent colons, or as an initial
or trailing colon.


@item PS1
The primary prompt string.  The default value is @samp{\s-\v\$ }.
@xref{Controlling the Prompt}, for the complete list of escape
sequences that are expanded before @env{PS1} is displayed.

@item PS2
The secondary prompt string.  The default value is @samp{> }.

@end vtable

@node Bash Variables
@section Bash Variables

These variables are set or used by Bash, but other shells
do not normally treat them specially.

A few variables used by Bash are described in different chapters:
variables for controlling the job control facilities
(@pxref{Job Control Variables}).

@vtable @code

@item BASH
The full pathname used to execute the current instance of Bash.

@item BASHOPTS
A colon-separated list of enabled shell options.  Each word in
the list is a valid argument for the @option{-s} option to the
@code{shopt} builtin command (@pxref{The Shopt Builtin}).
The options appearing in @env{BASHOPTS} are those reported
as @samp{on} by @samp{shopt}.
If this variable is in the environment when Bash
starts up, each shell option in the list will be enabled before
reading any startup files.  This variable is readonly.

@item BASHPID
Expands to the process ID of the current Bash process.
This differs from @code{$$} under certain circumstances, such as subshells
that do not require Bash to be re-initialized.

@item BASH_ALIASES
An associative array variable whose members correspond to the internal
list of aliases as maintained by the @code{alias} builtin.
(@pxref{Bourne Shell Builtins}).
Elements added to this array appear in the alias list; unsetting array
elements cause aliases to be removed from the alias list.

@item BASH_ARGC
An array variable whose values are the number of parameters in each
frame of the current bash execution call stack.  The number of
parameters to the current subroutine (shell function or script executed
with @code{.} or @code{source}) is at the top of the stack.  When a
subroutine is executed, the number of parameters passed is pushed onto
@code{BASH_ARGC}.
The shell sets @code{BASH_ARGC} only when in extended debugging mode
(see @ref{The Shopt Builtin}
for a description of the @code{extdebug} option to the @code{shopt}
builtin).

@item BASH_ARGV
An array variable containing all of the parameters in the current bash
execution call stack.  The final parameter of the last subroutine call
is at the top of the stack; the first parameter of the initial call is
at the bottom.  When a subroutine is executed, the parameters supplied
are pushed onto @code{BASH_ARGV}.
The shell sets @code{BASH_ARGV} only when in extended debugging mode
(see @ref{The Shopt Builtin}
for a description of the @code{extdebug} option to the @code{shopt}
builtin).

@item BASH_CMDS
An associative array variable whose members correspond to the internal
hash table of commands as maintained by the @code{hash} builtin
(@pxref{Bourne Shell Builtins}).
Elements added to this array appear in the hash table; unsetting array
elements cause commands to be removed from the hash table.

@item BASH_COMMAND
The command currently being executed or about to be executed, unless the
shell is executing a command as the result of a trap,
in which case it is the command executing at the time of the trap.

@item BASH_COMPAT
The value is used to set the shell's compatibility level.
@xref{The Shopt Builtin}, for a description of the various compatibility
levels and their effects.
The value may be a decimal number (e.g., 4.2) or an integer (e.g., 42)
corresponding to the desired compatibility level.
If @code{BASH_COMPAT} is unset or set to the empty string, the compatibility
level is set to the default for the current version.
If @code{BASH_COMPAT} is set to a value that is not one of the valid
compatibility levels, the shell prints an error message and sets the
compatibility level to the default for the current version.
The valid compatibility levels correspond to the compatibility options
accepted by the @code{shopt} builtin described above (for example,
@var{compat42} means that 4.2 and 42 are valid values).
The current version is also a valid value.

@item BASH_ENV
If this variable is set when Bash is invoked to execute a shell
script, its value is expanded and used as the name of a startup file
to read before executing the script.  @xref{Bash Startup Files}.

@item BASH_EXECUTION_STRING
The command argument to the @option{-c} invocation option.

@item BASH_LINENO
An array variable whose members are the line numbers in source files
where each corresponding member of @var{FUNCNAME} was invoked.
@code{$@{BASH_LINENO[$i]@}} is the line number in the source file
(@code{$@{BASH_SOURCE[$i+1]@}}) where
@code{$@{FUNCNAME[$i]@}} was called (or @code{$@{BASH_LINENO[$i-1]@}} if
referenced within another shell function). 
Use @code{LINENO} to obtain the current line number.

@item BASH_REMATCH
An array variable whose members are assigned by the @samp{=~} binary
operator to the @code{[[} conditional command
(@pxref{Conditional Constructs}).
The element with index 0 is the portion of the string
matching the entire regular expression.
The element with index @var{n} is the portion of the
string matching the @var{n}th parenthesized subexpression.
This variable is read-only.

@item BASH_SOURCE
An array variable whose members are the source filenames where the
corresponding shell function names in the @code{FUNCNAME} array
variable are defined.
The shell function @code{$@{FUNCNAME[$i]@}} is defined in the file
@code{$@{BASH_SOURCE[$i]@}} and called from @code{$@{BASH_SOURCE[$i+1]@}}

@item BASH_SUBSHELL
Incremented by one within each subshell or subshell environment when
the shell begins executing in that environment.
The initial value is 0.

@item BASH_VERSINFO
A readonly array variable (@pxref{Arrays})
whose members hold version information for this instance of Bash.
The values assigned to the array members are as follows:

@table @code

@item BASH_VERSINFO[0]
The major version number (the @var{release}).

@item BASH_VERSINFO[1]
The minor version number (the @var{version}).

@item BASH_VERSINFO[2]
The patch level.

@item BASH_VERSINFO[3]
The build version.

@item BASH_VERSINFO[4]
The release status (e.g., @var{beta1}).

@item BASH_VERSINFO[5]
The value of @env{MACHTYPE}.
@end table

@item BASH_VERSION
The version number of the current instance of Bash.

@item BASH_XTRACEFD
If set to an integer corresponding to a valid file descriptor, Bash
will write the trace output generated when @samp{set -x}
is enabled to that file descriptor.
This allows tracing output to be separated from diagnostic and error
messages.
The file descriptor is closed when @code{BASH_XTRACEFD} is unset or assigned
a new value.
Unsetting @code{BASH_XTRACEFD} or assigning it the empty string causes the
trace output to be sent to the standard error.
Note that setting @code{BASH_XTRACEFD} to 2 (the standard error file
descriptor) and then unsetting it will result in the standard error
being closed.

@item CHILD_MAX
Set the number of exited child status values for the shell to remember.
Bash will not allow this value to be decreased below a @sc{posix}-mandated
minimum, and there is a maximum value (currently 8192) that this may
not exceed.
The minimum value is system-dependent.

@item COLUMNS
Used by the @code{select} command to determine the terminal width
when printing selection lists.
Automatically set if the @code{checkwinsize} option is enabled
(@pxref{The Shopt Builtin}), or in an interactive shell upon receipt of a
@code{SIGWINCH}.

@item COMP_CWORD
An index into @env{$@{COMP_WORDS@}} of the word containing the current
cursor position.
This variable is available only in shell functions invoked by the
programmable completion facilities (@pxref{Programmable Completion}).

@item COMP_LINE
The current command line.
This variable is available only in shell functions and external
commands invoked by the
programmable completion facilities (@pxref{Programmable Completion}).

@item COMP_POINT
The index of the current cursor position relative to the beginning of
the current command.
If the current cursor position is at the end of the current command,
the value of this variable is equal to @code{$@{#COMP_LINE@}}.
This variable is available only in shell functions and external
commands invoked by the
programmable completion facilities (@pxref{Programmable Completion}).

@item COMP_TYPE
Set to an integer value corresponding to the type of completion attempted
that caused a completion function to be called:
@var{TAB}, for normal completion,
@samp{?}, for listing completions after successive tabs,
@samp{!}, for listing alternatives on partial word completion,
@samp{@@}, to list completions if the word is not unmodified,
or
@samp{%}, for menu completion.
This variable is available only in shell functions and external
commands invoked by the
programmable completion facilities (@pxref{Programmable Completion}).

@item COMP_KEY
The key (or final key of a key sequence) used to invoke the current
completion function.

@item COMP_WORDBREAKS
The set of characters that the Readline library treats as word
separators when performing word completion.
If @code{COMP_WORDBREAKS} is unset, it loses its special properties,
even if it is subsequently reset.

@item COMP_WORDS
An array variable consisting of the individual
words in the current command line.
The line is split into words as Readline would split it, using
@code{COMP_WORDBREAKS} as described above.
This variable is available only in shell functions invoked by the
programmable completion facilities (@pxref{Programmable Completion}).

@item COMPREPLY
An array variable from which Bash reads the possible completions
generated by a shell function invoked by the programmable completion
facility (@pxref{Programmable Completion}).
Each array element contains one possible completion.

@item COPROC
An array variable created to hold the file descriptors
for output from and input to an unnamed coprocess (@pxref{Coprocesses}).

@item DIRSTACK
An array variable containing the current contents of the directory stack.
Directories appear in the stack in the order they are displayed by the
@code{dirs} builtin.
Assigning to members of this array variable may be used to modify
directories already in the stack, but the @code{pushd} and @code{popd}
builtins must be used to add and remove directories.
Assignment to this variable will not change the current directory.
If @env{DIRSTACK} is unset, it loses its special properties, even if
it is subsequently reset.

@item EMACS
If Bash finds this variable in the environment when the shell
starts with value @samp{t}, it assumes that the shell is running in an
Emacs shell buffer and disables line editing.

@item ENV
Similar to @code{BASH_ENV}; used when the shell is invoked in
@sc{posix} Mode (@pxref{Bash POSIX Mode}).

@item EUID
The numeric effective user id of the current user.  This variable
is readonly.

@item FCEDIT
The editor used as a default by the @option{-e} option to the @code{fc}
builtin command.

@item FIGNORE
A colon-separated list of suffixes to ignore when performing
filename completion.
A filename whose suffix matches one of the entries in 
@env{FIGNORE}
is excluded from the list of matched filenames.  A sample
value is @samp{.o:~}

@item FUNCNAME
An array variable containing the names of all shell functions
currently in the execution call stack.
The element with index 0 is the name of any currently-executing
shell function.
The bottom-most element (the one with the highest index)
is @code{"main"}.
This variable exists only when a shell function is executing.
Assignments to @env{FUNCNAME} have no effect and return an error status.
If @env{FUNCNAME} is unset, it loses its special properties, even if
it is subsequently reset.

This variable can be used with @code{BASH_LINENO} and @code{BASH_SOURCE}.
Each element of @code{FUNCNAME} has corresponding elements in
@code{BASH_LINENO} and @code{BASH_SOURCE} to describe the call stack.
For instance, @code{$@{FUNCNAME[$i]@}} was called from the file
@code{$@{BASH_SOURCE[$i+1]@}} at line number @code{$@{BASH_LINENO[$i]@}}.
The @code{caller} builtin displays the current call stack using this
information.

@item FUNCNEST
If set to a numeric value greater than 0, defines a maximum function
nesting level.  Function invocations that exceed this nesting level
will cause the current command to abort.

@item GLOBIGNORE
A colon-separated list of patterns defining the set of filenames to
be ignored by filename expansion.
If a filename matched by a filename expansion pattern also matches one
of the patterns in @env{GLOBIGNORE}, it is removed from the list
of matches.

@item GROUPS
An array variable containing the list of groups of which the current    
user is a member.
Assignments to @env{GROUPS} have no effect and return an error status.
If @env{GROUPS} is unset, it loses its special properties, even if it is
subsequently reset.

@item histchars
Up to three characters which control history expansion, quick
substitution, and tokenization (@pxref{History Interaction}).
The first character is the
@var{history expansion} character, that is, the character which signifies the
start of a history expansion, normally @samp{!}.  The second character is the
character which signifies `quick substitution' when seen as the first
character on a line, normally @samp{^}.  The optional third character is the
character which indicates that the remainder of the line is a comment when
found as the first character of a word, usually @samp{#}.  The history
comment character causes history substitution to be skipped for the
remaining words on the line.  It does not necessarily cause the shell
parser to treat the rest of the line as a comment.

@item HISTCMD
The history number, or index in the history list, of the current
command.  If @env{HISTCMD} is unset, it loses its special properties,
even if it is subsequently reset.

@item HISTCONTROL
A colon-separated list of values controlling how commands are saved on
the history list.
If the list of values includes @samp{ignorespace}, lines which begin
with a space character are not saved in the history list.
A value of @samp{ignoredups} causes lines which match the previous
history entry to not be saved.
A value of @samp{ignoreboth} is shorthand for
@samp{ignorespace} and @samp{ignoredups}.
A value of @samp{erasedups} causes all previous lines matching the
current line to be removed from the history list before that line
is saved.
Any value not in the above list is ignored.
If @env{HISTCONTROL} is unset, or does not include a valid value, 
all lines read by the shell parser are saved on the history list, 
subject to the value of @env{HISTIGNORE}.
The second and subsequent lines of a multi-line compound command are
not tested, and are added to the history regardless of the value of
@env{HISTCONTROL}.

@item HISTFILE
The name of the file to which the command history is saved.  The
default value is @file{~/.bash_history}.

@item HISTFILESIZE
The maximum number of lines contained in the history file.
When this variable is assigned a value, the history file is truncated,
if necessary, to contain no more than that number of lines
by removing the oldest entries.
The history file is also truncated to this size after
writing it when a shell exits.
If the value is 0, the history file is truncated to zero size.
Non-numeric values and numeric values less than zero inhibit truncation.
The shell sets the default value to the value of @env{HISTSIZE}
after reading any startup files.

@item HISTIGNORE
A colon-separated list of patterns used to decide which command
lines should be saved on the history list.  Each pattern is
anchored at the beginning of the line and must match the complete
line (no implicit @samp{*} is appended).  Each pattern is tested
against the line after the checks specified by @env{HISTCONTROL}
are applied.  In addition to the normal shell pattern matching
characters, @samp{&} matches the previous history line.  @samp{&}
may be escaped using a backslash; the backslash is removed
before attempting a match. 
The second and subsequent lines of a multi-line compound command are
not tested, and are added to the history regardless of the value of
@env{HISTIGNORE}.

@env{HISTIGNORE} subsumes the function of @env{HISTCONTROL}.  A
pattern of @samp{&} is identical to @code{ignoredups}, and a
pattern of @samp{[ ]*} is identical to @code{ignorespace}. 
Combining these two patterns, separating them with a colon,
provides the functionality of @code{ignoreboth}. 

@item HISTSIZE
The maximum number of commands to remember on the history list.
If the value is 0, commands are not saved in the history list.
Numeric values less than zero result in every command being saved
on the history list (there is no limit).
The shell sets the default value to 500 after reading any startup files.

@item HISTTIMEFORMAT
If this variable is set and not null, its value is used as a format string
for @var{strftime} to print the time stamp associated with each history
entry displayed by the @code{history} builtin.
If this variable is set, time stamps are written to the history file so
they may be preserved across shell sessions.
This uses the history comment character to distinguish timestamps from
other history lines.

@item HOSTFILE
Contains the name of a file in the same format as @file{/etc/hosts} that
should be read when the shell needs to complete a hostname.
The list of possible hostname completions may be changed while the shell
is running;
the next time hostname completion is attempted after the
value is changed, Bash adds the contents of the new file to the
existing list.
If @env{HOSTFILE} is set, but has no value, or does not name a readable file,
Bash attempts to read 
@file{/etc/hosts} to obtain the list of possible hostname completions.
When @env{HOSTFILE} is unset, the hostname list is cleared.

@item HOSTNAME
The name of the current host.

@item HOSTTYPE
A string describing the machine Bash is running on.

@item IGNOREEOF
Controls the action of the shell on receipt of an @code{EOF} character
as the sole input.  If set, the value denotes the number
of consecutive @code{EOF} characters that can be read as the
first character on an input line
before the shell will exit.  If the variable exists but does not
have a numeric value (or has no value) then the default is 10.
If the variable does not exist, then @code{EOF} signifies the end of 
input to the shell.  This is only in effect for interactive shells.

@item INPUTRC
The name of the Readline initialization file, overriding the default
of @file{~/.inputrc}.

@item LANG  
Used to determine the locale category for any category not specifically
selected with a variable starting with @code{LC_}.

@item LC_ALL
This variable overrides the value of @env{LANG} and any other
@code{LC_} variable specifying a locale category.

@item LC_COLLATE
This variable determines the collation order used when sorting the
results of filename expansion, and
determines the behavior of range expressions, equivalence classes,
and collating sequences within filename expansion and pattern matching
(@pxref{Filename Expansion}).

@item LC_CTYPE
This variable determines the interpretation of characters and the
behavior of character classes within filename expansion and pattern
matching (@pxref{Filename Expansion}).

@item LC_MESSAGES
This variable determines the locale used to translate double-quoted
strings preceded by a @samp{$} (@pxref{Locale Translation}).

@item LC_NUMERIC
This variable determines the locale category used for number formatting.

@item LINENO
The line number in the script or shell function currently executing.

@item LINES
Used by the @code{select} command to determine the column length
for printing selection lists.
Automatically set if the @code{checkwinsize} option is enabled
(@pxref{The Shopt Builtin}), or in an interactive shell upon receipt of a
@code{SIGWINCH}.

@item MACHTYPE
A string that fully describes the system type on which Bash
is executing, in the standard @sc{gnu} @var{cpu-company-system} format.

@item MAILCHECK
How often (in seconds) that the shell should check for mail in the
files specified in the @env{MAILPATH} or @env{MAIL} variables.
The default is 60 seconds.  When it is time to check
for mail, the shell does so before displaying the primary prompt.
If this variable is unset, or set to a value that is not a number
greater than or equal to zero, the shell disables mail checking.

@item MAPFILE
An array variable created to hold the text read by the
@code{mapfile} builtin when no variable name is supplied.

@item OLDPWD
The previous working directory as set by the @code{cd} builtin.

@item OPTERR
If set to the value 1, Bash displays error messages
generated by the @code{getopts} builtin command.

@item OSTYPE
A string describing the operating system Bash is running on.

@item PIPESTATUS
An array variable (@pxref{Arrays})
containing a list of exit status values from the processes
in the most-recently-executed foreground pipeline (which may
contain only a single command).

@item POSIXLY_CORRECT
If this variable is in the environment when Bash starts, the shell
enters @sc{posix} mode (@pxref{Bash POSIX Mode}) before reading the
startup files, as if the @option{--posix} invocation option had been supplied.
If it is set while the shell is running, Bash enables @sc{posix} mode,
as if the command
@example
@code{set -o posix}
@end example
@noindent
had been executed.  

@item PPID
The process @sc{id} of the shell's parent process.  This variable
is readonly.

@item PROMPT_COMMAND
If set, the value is interpreted as a command to execute
before the printing of each primary prompt (@env{$PS1}).

@item PROMPT_DIRTRIM
If set to a number greater than zero, the value is used as the number of
trailing directory components to retain when expanding the @code{\w} and
@code{\W} prompt string escapes (@pxref{Controlling the Prompt}).
Characters removed are replaced with an ellipsis.

@item PS3
The value of this variable is used as the prompt for the
@code{select} command.  If this variable is not set, the
@code{select} command prompts with @samp{#? }

@item PS4
The value is the prompt printed before the command line is echoed
when the @option{-x} option is set (@pxref{The Set Builtin}).
The first character of @env{PS4} is replicated multiple times, as
necessary, to indicate multiple levels of indirection.
The default is @samp{+ }.

@item PWD
The current working directory as set by the @code{cd} builtin.

@item RANDOM
Each time this parameter is referenced, a random integer
between 0 and 32767 is generated.  Assigning a value to this
variable seeds the random number generator.

@item READLINE_LINE
The contents of the Readline line buffer, for use
with @samp{bind -x} (@pxref{Bash Builtins}).

@item READLINE_POINT
The position of the insertion point in the Readline line buffer, for use
with @samp{bind -x} (@pxref{Bash Builtins}).

@item REPLY
The default variable for the @code{read} builtin.

@item SECONDS
This variable expands to the number of seconds since the
shell was started.  Assignment to this variable resets
the count to the value assigned, and the expanded value
becomes the value assigned plus the number of seconds
since the assignment.

@item SHELL
The full pathname to the shell is kept in this environment variable.
If it is not set when the shell starts,
Bash assigns to it the full pathname of the current user's login shell.

@item SHELLOPTS
A colon-separated list of enabled shell options.  Each word in
the list is a valid argument for the @option{-o} option to the
@code{set} builtin command (@pxref{The Set Builtin}).
The options appearing in @env{SHELLOPTS} are those reported
as @samp{on} by @samp{set -o}.
If this variable is in the environment when Bash
starts up, each shell option in the list will be enabled before
reading any startup files.  This variable is readonly.

@item SHLVL
Incremented by one each time a new instance of Bash is started.  This is
intended to be a count of how deeply your Bash shells are nested.

@item TIMEFORMAT
The value of this parameter is used as a format string specifying
how the timing information for pipelines prefixed with the @code{time}
reserved word should be displayed.
The @samp{%} character introduces an
escape sequence that is expanded to a time value or other
information.
The escape sequences and their meanings are as
follows; the braces denote optional portions. 

@table @code

@item %%
A literal @samp{%}.

@item %[@var{p}][l]R
The elapsed time in seconds. 

@item %[@var{p}][l]U
The number of CPU seconds spent in user mode. 

@item %[@var{p}][l]S
The number of CPU seconds spent in system mode. 

@item %P
The CPU percentage, computed as (%U + %S) / %R. 
@end table

The optional @var{p} is a digit specifying the precision, the number of
fractional digits after a decimal point.
A value of 0 causes no decimal point or fraction to be output.
At most three places after the decimal point may be specified; values
of @var{p} greater than 3 are changed to 3.
If @var{p} is not specified, the value 3 is used. 

The optional @code{l} specifies a longer format, including minutes, of
the form @var{MM}m@var{SS}.@var{FF}s.
The value of @var{p} determines whether or not the fraction is included. 

If this variable is not set, Bash acts as if it had the value
@example
@code{$'\nreal\t%3lR\nuser\t%3lU\nsys\t%3lS'}
@end example
If the value is null, no timing information is displayed.
A trailing newline is added when the format string is displayed.

@item TMOUT
If set to a value greater than zero, @code{TMOUT} is treated as the
default timeout for the @code{read} builtin (@pxref{Bash Builtins}).
The @code{select} command (@pxref{Conditional Constructs}) terminates
if input does not arrive after @code{TMOUT} seconds when input is coming
from a terminal.

In an interactive shell, the value is interpreted as
the number of seconds to wait for a line of input after issuing
the primary prompt.
Bash
terminates after waiting for that number of seconds if a complete
line of input does not arrive.

@item TMPDIR
If set, Bash uses its value as the name of a directory in which
Bash creates temporary files for the shell's use.

@item UID
The numeric real user id of the current user.  This variable is readonly.

@end vtable

@node Bash Features
@chapter Bash Features

This chapter describes features unique to Bash.

@menu
* Invoking Bash::		Command line options that you can give
				to Bash.
* Bash Startup Files::		When and how Bash executes scripts.
* Interactive Shells::		What an interactive shell is.
* Bash Conditional Expressions::	Primitives used in composing expressions for
				the @code{test} builtin.
* Shell Arithmetic::		Arithmetic on shell variables.
* Aliases::			Substituting one command for another.
* Arrays::			Array Variables.
* The Directory Stack::		History of visited directories.
* Controlling the Prompt::	Customizing the various prompt strings.
* The Restricted Shell::	A more controlled mode of shell execution.
* Bash POSIX Mode::		Making Bash behave more closely to what
				the POSIX standard specifies.
@end menu

@node Invoking Bash
@section Invoking Bash

@example
bash [long-opt] [-ir] [-abefhkmnptuvxdBCDHP] [-o @var{option}] [-O @var{shopt_option}] [@var{argument} @dots{}]
bash [long-opt] [-abefhkmnptuvxdBCDHP] [-o @var{option}] [-O @var{shopt_option}] -c @var{string} [@var{argument} @dots{}]
bash [long-opt] -s [-abefhkmnptuvxdBCDHP] [-o @var{option}] [-O @var{shopt_option}] [@var{argument} @dots{}]
@end example

All of the single-character options used with the @code{set} builtin
(@pxref{The Set Builtin}) can be used as options when the shell is invoked.
In addition, there are several multi-character
options that you can use.  These options must appear on the command
line before the single-character options to be recognized. 

@table @code
@item --debugger
Arrange for the debugger profile to be executed before the shell
starts.  Turns on extended debugging mode (see @ref{The Shopt Builtin}
for a description of the @code{extdebug} option to the @code{shopt}
builtin).

@item --dump-po-strings
A list of all double-quoted strings preceded by @samp{$}
is printed on the standard output
in the @sc{gnu} @code{gettext} PO (portable object) file format.
Equivalent to @option{-D} except for the output format.

@item --dump-strings
Equivalent to @option{-D}.

@item --help
Display a usage message on standard output and exit successfully.

@item --init-file @var{filename}
@itemx --rcfile @var{filename}
Execute commands from @var{filename} (instead of @file{~/.bashrc})
in an interactive shell.

@item --login
Equivalent to @option{-l}.

@item --noediting
Do not use the @sc{gnu} Readline library (@pxref{Command Line Editing})
to read  command lines when the shell is interactive.

@item --noprofile
Don't load the system-wide startup file @file{/etc/profile}
or any of the personal initialization files
@file{~/.bash_profile}, @file{~/.bash_login}, or @file{~/.profile}
when Bash is invoked as a login shell.

@item --norc
Don't read the @file{~/.bashrc} initialization file in an
interactive shell.  This is on by default if the shell is
invoked as @code{sh}.

@item --posix
Change the behavior of Bash where the default operation differs
from the @sc{posix} standard to match the standard.  This
is intended to make Bash behave as a strict superset of that
standard.  @xref{Bash POSIX Mode}, for a description of the Bash
@sc{posix} mode.

@item --restricted
Make the shell a restricted shell (@pxref{The Restricted Shell}).

@item --verbose
Equivalent to @option{-v}.  Print shell input lines as they're read.

@item --version
Show version information for this instance of
Bash on the standard output and exit successfully.
@end table

There are several single-character options that may be supplied at
invocation which are not available with the @code{set} builtin.

@table @code
@item -c
Read and execute commands from the first non-option @var{argument}
after processing the options, then exit. 
Any remaining arguments are assigned to the
positional parameters, starting with @code{$0}.

@item -i
Force the shell to run interactively.  Interactive shells are
described in @ref{Interactive Shells}.

@item -l
Make this shell act as if it had been directly invoked by login.
When the shell is interactive, this is equivalent to starting a
login shell with @samp{exec -l bash}.
When the shell is not interactive, the login shell startup files will
be executed.
@samp{exec bash -l} or @samp{exec bash --login}
will replace the current shell with a Bash login shell.
@xref{Bash Startup Files}, for a description of the special behavior
of a login shell.

@item -r
Make the shell a restricted shell (@pxref{The Restricted Shell}).

@item -s
If this option is present, or if no arguments remain after option
processing, then commands are read from the standard input.
This option allows the positional parameters to be set
when invoking an interactive shell.

@item -D
A list of all double-quoted strings preceded by @samp{$}
is printed on the standard output.
These are the strings that
are subject to language translation when the current locale
is not @code{C} or @code{POSIX} (@pxref{Locale Translation}).
This implies the @option{-n} option; no commands will be executed.

@item [-+]O [@var{shopt_option}]
@var{shopt_option} is one of the shell options accepted by the
@code{shopt} builtin (@pxref{The Shopt Builtin}).
If @var{shopt_option} is present, @option{-O} sets the value of that option;
@option{+O} unsets it.  
If @var{shopt_option} is not supplied, the names and values of the shell
options accepted by @code{shopt} are printed on the standard output.
If the invocation option is @option{+O}, the output is displayed in a format
that may be reused as input.

@item --
A @code{--} signals the end of options and disables further option
processing.
Any arguments after the @code{--} are treated as filenames and arguments.
@end table

@cindex login shell
A @emph{login} shell is one whose first character of argument zero is
@samp{-}, or one invoked with the @option{--login} option.

@cindex interactive shell
An @emph{interactive} shell is one started without non-option arguments,
unless @option{-s} is specified,
without specifying the @option{-c} option, and whose input and output are both
connected to terminals (as determined by @code{isatty(3)}), or one
started with the @option{-i} option.  @xref{Interactive Shells}, for more
information.

If arguments remain after option processing, and neither the
@option{-c} nor the @option{-s}
option has been supplied, the first argument is assumed to
be the name of a file containing shell commands (@pxref{Shell Scripts}).
When Bash is invoked in this fashion, @code{$0}
is set to the name of the file, and the positional parameters
are set to the remaining arguments.
Bash reads and executes commands from this file, then exits.   
Bash's exit status is the exit status of the last command executed
in the script.  If no commands are executed, the exit status is 0.

@node Bash Startup Files
@section Bash Startup Files
@cindex startup files

This section describes how Bash executes its startup files.
If any of the files exist but cannot be read, Bash reports an error.
Tildes are expanded in filenames as described above under
Tilde Expansion (@pxref{Tilde Expansion}).

Interactive shells are described in @ref{Interactive Shells}.

@subsubheading Invoked as an interactive login shell, or with @option{--login}

When Bash is invoked as an interactive login shell, or as a
non-interactive shell with the @option{--login} option, it first reads and
executes commands from the file @file{/etc/profile}, if that file exists.
After reading that file, it looks for @file{~/.bash_profile},
@file{~/.bash_login}, and @file{~/.profile}, in that order, and reads
and executes commands from the first one that exists and is readable.
The @option{--noprofile} option may be used when the shell is started to
inhibit this behavior.

When a login shell exits, Bash reads and executes commands from
the file @file{~/.bash_logout}, if it exists.

@subsubheading Invoked as an interactive non-login shell

When an interactive shell that is not a login shell is started, Bash
reads and executes commands from @file{~/.bashrc}, if that file exists.
This may be inhibited by using the @option{--norc} option.
The @option{--rcfile @var{file}} option will force Bash to read and
execute commands from @var{file} instead of @file{~/.bashrc}.

So, typically, your @file{~/.bash_profile} contains the line
@example
@code{if [ -f ~/.bashrc ]; then . ~/.bashrc; fi}
@end example
@noindent
after (or before) any login-specific initializations.

@subsubheading Invoked non-interactively

When Bash is started non-interactively, to run a shell script,
for example, it looks for the variable @env{BASH_ENV} in the environment,
expands its value if it appears there, and uses the expanded value as
the name of a file to read and execute.  Bash behaves as if the
following command were executed:
@example
@code{if [ -n "$BASH_ENV" ]; then . "$BASH_ENV"; fi}
@end example
@noindent
but the value of the @env{PATH} variable is not used to search for the
filename.

As noted above, if a non-interactive shell is invoked with the
@option{--login} option, Bash attempts to read and execute commands from the
login shell startup files. 

@subsubheading Invoked with name @code{sh}

If Bash is invoked with the name @code{sh}, it tries to mimic the
startup behavior of historical versions of @code{sh} as closely as
possible, while conforming to the @sc{posix} standard as well.

When invoked as an interactive login shell, or as a non-interactive
shell with the @option{--login} option, it first attempts to read
and execute commands from @file{/etc/profile} and @file{~/.profile}, in
that order.
The @option{--noprofile} option may be used to inhibit this behavior.
When invoked as an interactive shell with the name @code{sh}, Bash
looks for the variable @env{ENV}, expands its value if it is defined,
and uses the expanded value as the name of a file to read and execute.
Since a shell invoked as @code{sh} does not attempt to read and execute
commands from any other startup files, the @option{--rcfile} option has
no effect.
A non-interactive shell invoked with the name @code{sh} does not attempt
to read any other startup files.

When invoked as @code{sh}, Bash enters @sc{posix} mode after
the startup files are read.

@subsubheading Invoked in @sc{posix} mode

When Bash is started in @sc{posix} mode, as with the
@option{--posix} command line option, it follows the @sc{posix} standard
for startup files.
In this mode, interactive shells expand the @env{ENV} variable
and commands are read and executed from the file whose name is the
expanded value.
No other startup files are read.

@subsubheading Invoked by remote shell daemon

Bash attempts to determine when it is being run with its standard input
connected to a network connection, as when executed by the remote shell
daemon, usually @code{rshd}, or the secure shell daemon @code{sshd}.
If Bash determines it is being run in
this fashion, it reads and executes commands from @file{~/.bashrc}, if that
file exists and is readable.
It will not do this if invoked as @code{sh}.
The @option{--norc} option may be used to inhibit this behavior, and the
@option{--rcfile} option may be used to force another file to be read, but
neither @code{rshd} nor @code{sshd} generally invoke the shell with those
options or allow them to be specified.

@subsubheading Invoked with unequal effective and real @sc{uid/gid}s

If Bash is started with the effective user (group) id not equal to the
real user (group) id, and the @option{-p} option is not supplied, no startup
files are read, shell functions are not inherited from the environment,
the @env{SHELLOPTS}, @env{BASHOPTS}, @env{CDPATH}, and @env{GLOBIGNORE}
variables, if they appear in the environment, are ignored, and the effective
user id is set to the real user id.
If the @option{-p} option is supplied at invocation, the startup behavior is
the same, but the effective user id is not reset.

@node Interactive Shells
@section Interactive Shells
@cindex interactive shell
@cindex shell, interactive

@menu
* What is an Interactive Shell?::	What determines whether a shell is Interactive.
* Is this Shell Interactive?::	How to tell if a shell is interactive.
* Interactive Shell Behavior::	What changes in a interactive shell?
@end menu

@node What is an Interactive Shell?
@subsection What is an Interactive Shell?

An interactive shell
is one started without non-option arguments, unless @option{-s} is
specified, without specifying the @option{-c} option, and
whose input and error output are both
connected to terminals (as determined by @code{isatty(3)}),
or one started with the @option{-i} option.

An interactive shell generally reads from and writes to a user's
terminal.

The @option{-s} invocation option may be used to set the positional parameters
when an interactive shell is started.

@node Is this Shell Interactive?
@subsection Is this Shell Interactive?

To determine within a startup script whether or not Bash is
running interactively,
test the value of the @samp{-} special parameter.
It contains @code{i} when the shell is interactive.  For example:

@example
case "$-" in
*i*)	echo This shell is interactive ;;
*)	echo This shell is not interactive ;;
esac
@end example

Alternatively, startup scripts may examine the variable
@env{PS1}; it is unset in non-interactive shells, and set in
interactive shells.  Thus:

@example
if [ -z "$PS1" ]; then
        echo This shell is not interactive
else
        echo This shell is interactive
fi
@end example

@node Interactive Shell Behavior
@subsection Interactive Shell Behavior

When the shell is running interactively, it changes its behavior in
several ways.

@enumerate
@item
Startup files are read and executed as described in @ref{Bash Startup Files}.

@item
Job Control (@pxref{Job Control}) is enabled by default.  When job
control is in effect, Bash ignores the keyboard-generated job control
signals @code{SIGTTIN}, @code{SIGTTOU}, and @code{SIGTSTP}.

@item
Bash expands and displays @env{PS1} before reading the first line
of a command, and expands and displays @env{PS2} before reading the
second and subsequent lines of a multi-line command.

@item
Bash executes the value of the @env{PROMPT_COMMAND} variable as a command
before printing the primary prompt, @env{$PS1}
(@pxref{Bash Variables}).

@item
Readline (@pxref{Command Line Editing}) is used to read commands from
the user's terminal.

@item
Bash inspects the value of the @code{ignoreeof} option to @code{set -o}
instead of exiting immediately when it receives an @code{EOF} on its
standard input when reading a command (@pxref{The Set Builtin}).

@item
Command history (@pxref{Bash History Facilities})
and history expansion (@pxref{History Interaction})
are enabled by default.
Bash will save the command history to the file named by @env{$HISTFILE}
when a shell with history enabled exits.

@item
Alias expansion (@pxref{Aliases}) is performed by default.

@item
In the absence of any traps, Bash ignores @code{SIGTERM}
(@pxref{Signals}).

@item
In the absence of any traps, @code{SIGINT} is caught and handled
((@pxref{Signals}).
@code{SIGINT} will interrupt some shell builtins.

@item
An interactive login shell sends a @code{SIGHUP} to all jobs on exit
if the @code{huponexit} shell option has been enabled (@pxref{Signals}).

@item
The @option{-n} invocation option is ignored, and @samp{set -n} has
no effect (@pxref{The Set Builtin}).

@item
Bash will check for mail periodically, depending on the values of the
@env{MAIL}, @env{MAILPATH}, and @env{MAILCHECK} shell variables
(@pxref{Bash Variables}).

@item
Expansion errors due to references to unbound shell variables after
@samp{set -u} has been enabled will not cause the shell to exit
(@pxref{The Set Builtin}).

@item
The shell will not exit on expansion errors caused by @var{var} being unset
or null in @code{$@{@var{var}:?@var{word}@}} expansions
(@pxref{Shell Parameter Expansion}).

@item
Redirection errors encountered by shell builtins will not cause the
shell to exit.

@item
When running in @sc{posix} mode, a special builtin returning an error
status will not cause the shell to exit (@pxref{Bash POSIX Mode}).

@item
A failed @code{exec} will not cause the shell to exit
(@pxref{Bourne Shell Builtins}).

@item
Parser syntax errors will not cause the shell to exit.

@item
Simple spelling correction for directory arguments to the @code{cd}
builtin is enabled by default (see the description of the @code{cdspell}
option to the @code{shopt} builtin in @ref{The Shopt Builtin}).

@item
The shell will check the value of the @env{TMOUT} variable and exit
if a command is not read within the specified number of seconds after
printing @env{$PS1} (@pxref{Bash Variables}).

@end enumerate

@node Bash Conditional Expressions
@section Bash Conditional Expressions
@cindex expressions, conditional

Conditional expressions are used by the @code{[[} compound command
and the @code{test} and @code{[} builtin commands.

Expressions may be unary or binary.
Unary expressions are often used to examine the status of a file.
There are string operators and numeric comparison operators as well.
If the @var{file} argument to one of the primaries is of the form
@file{/dev/fd/@var{N}}, then file descriptor @var{N} is checked.
If the @var{file} argument to one of the primaries is one of
@file{/dev/stdin}, @file{/dev/stdout}, or @file{/dev/stderr}, file
descriptor 0, 1, or 2, respectively, is checked.

When used with @code{[[}, the @samp{<} and @samp{>} operators sort
lexicographically using the current locale.
The @code{test} command uses ASCII ordering.

Unless otherwise specified, primaries that operate on files follow symbolic
links and operate on the target of the link, rather than the link itself.

@table @code
@item -a @var{file}
True if @var{file} exists.

@item -b @var{file}
True if @var{file} exists and is a block special file.

@item -c @var{file}
True if @var{file} exists and is a character special file.

@item -d @var{file}
True if @var{file} exists and is a directory.

@item -e @var{file}
True if @var{file} exists.

@item -f @var{file}
True if @var{file} exists and is a regular file.

@item -g @var{file}
True if @var{file} exists and its set-group-id bit is set.

@item -h @var{file}
True if @var{file} exists and is a symbolic link.

@item -k @var{file}
True if @var{file} exists and its "sticky" bit is set.

@item -p @var{file}
True if @var{file} exists and is a named pipe (FIFO).

@item -r @var{file}
True if @var{file} exists and is readable.

@item -s @var{file}
True if @var{file} exists and has a size greater than zero.

@item -t @var{fd}
True if file descriptor @var{fd} is open and refers to a terminal.

@item -u @var{file}
True if @var{file} exists and its set-user-id bit is set.

@item -w @var{file}
True if @var{file} exists and is writable.

@item -x @var{file}
True if @var{file} exists and is executable.

@item -G @var{file}
True if @var{file} exists and is owned by the effective group id.

@item -L @var{file}
True if @var{file} exists and is a symbolic link.

@item -N @var{file}
True if @var{file} exists and has been modified since it was last read.

@item -O @var{file}
True if @var{file} exists and is owned by the effective user id.

@item -S @var{file}
True if @var{file} exists and is a socket.

@item @var{file1} -ef @var{file2}
True if @var{file1} and @var{file2} refer to the same device and
inode numbers.

@item @var{file1} -nt @var{file2}
True if @var{file1} is newer (according to modification date)
than @var{file2}, or if @var{file1} exists and @var{file2} does not.

@item @var{file1} -ot @var{file2}
True if @var{file1} is older than @var{file2},
or if @var{file2} exists and @var{file1} does not.

@item -o @var{optname}
True if the shell option @var{optname} is enabled.
The list of options appears in the description of the @option{-o}
option to the @code{set} builtin (@pxref{The Set Builtin}).

@item -v @var{varname}
True if the shell variable @var{varname} is set (has been assigned a value).

@item -R @var{varname}
True if the shell variable @var{varname} is set and is a name reference.

@item -z @var{string}
True if the length of @var{string} is zero.

@item -n @var{string}
@itemx @var{string}
True if the length of @var{string} is non-zero.

@item @var{string1} == @var{string2}
@itemx @var{string1} = @var{string2}
True if the strings are equal.
When used with the @code{[[} command, this performs pattern matching as
described above (@pxref{Conditional Constructs}).

@samp{=} should be used with the @code{test} command for @sc{posix} conformance.

@item @var{string1} != @var{string2}
True if the strings are not equal.

@item @var{string1} < @var{string2}
True if @var{string1} sorts before @var{string2} lexicographically.

@item @var{string1} > @var{string2}
True if @var{string1} sorts after @var{string2} lexicographically.

@item @var{arg1} OP @var{arg2}
@code{OP} is one of 
@samp{-eq}, @samp{-ne}, @samp{-lt}, @samp{-le}, @samp{-gt}, or @samp{-ge}.
These arithmetic binary operators return true if @var{arg1}
is equal to, not equal to, less than, less than or equal to,
greater than, or greater than or equal to @var{arg2},
respectively.  @var{Arg1} and @var{arg2}
may be positive or negative integers.
@end table

@node Shell Arithmetic
@section Shell Arithmetic
@cindex arithmetic, shell
@cindex shell arithmetic
@cindex expressions, arithmetic
@cindex evaluation, arithmetic
@cindex arithmetic evaluation

The shell allows arithmetic expressions to be evaluated, as one of
the shell expansions or by the @code{let} and the @option{-i} option
to the @code{declare} builtins.

Evaluation is done in fixed-width integers with no check for overflow,
though division by 0 is trapped and flagged as an error.
The operators and their precedence, associativity, and values
are the same as in the C language.
The following list of operators is grouped into levels of
equal-precedence operators.
The levels are listed in order of decreasing precedence. 

@table @code

@item @var{id}++ @var{id}--
variable post-increment and post-decrement 

@item ++@var{id} --@var{id}
variable pre-increment and pre-decrement

@item - +
unary minus and plus

@item ! ~
logical and bitwise negation

@item **
exponentiation

@item * / %
multiplication, division, remainder

@item + -
addition, subtraction

@item << >>
left and right bitwise shifts

@item <= >= < >
comparison

@item == !=
equality and inequality

@item &
bitwise AND

@item ^
bitwise exclusive OR

@item |
bitwise OR

@item &&
logical AND

@item ||
logical OR

@item expr ? expr : expr
conditional operator

@item = *= /= %= += -= <<= >>= &= ^= |=
assignment

@item expr1 , expr2
comma
@end table

Shell variables are allowed as operands; parameter expansion is
performed before the expression is evaluated. 
Within an expression, shell variables may also be referenced by name
without using the parameter expansion syntax.
A shell variable that is null or unset evaluates to 0 when referenced
by name without using the parameter expansion syntax.
The value of a variable is evaluated as an arithmetic expression
when it is referenced, or when a variable which has been given the  
@var{integer} attribute using @samp{declare -i} is assigned a value.
A null value evaluates to 0.
A shell variable need not have its @var{integer} attribute turned on
to be used in an expression.

Constants with a leading 0 are interpreted as octal numbers.
A leading @samp{0x} or @samp{0X} denotes hexadecimal.  Otherwise,
numbers take the form [@var{base}@code{#}]@var{n}, where the optional @var{base}
is a decimal number between 2 and 64 representing the arithmetic
base, and @var{n} is a number in that base.
If @var{base}@code{#} is omitted, then base 10 is used.
When specifying @var{n},
he digits greater than 9 are represented by the lowercase letters,
the uppercase letters, @samp{@@}, and @samp{_}, in that order.
If @var{base} is less than or equal to 36, lowercase and uppercase
letters may be used interchangeably to represent numbers between 10
and 35.

Operators are evaluated in order of precedence.  Sub-expressions in
parentheses are evaluated first and may override the precedence
rules above.

@node Aliases
@section Aliases
@cindex alias expansion

@var{Aliases} allow a string to be substituted for a word when it is used
as the first word of a simple command.
The shell maintains a list of aliases that may be set and unset with
the @code{alias} and @code{unalias} builtin commands.

The first word of each simple command, if unquoted, is checked to see
if it has an alias.
If so, that word is replaced by the text of the alias.
The characters @samp{/}, @samp{$}, @samp{`}, @samp{=} and any of the
shell metacharacters or quoting characters listed above may not appear
in an alias name.
The replacement text may contain any valid
shell input, including shell metacharacters.
The first word of the replacement text is tested for
aliases, but a word that is identical to an alias being expanded
is not expanded a second time.
This means that one may alias @code{ls} to @code{"ls -F"},
for instance, and Bash does not try to recursively expand the
replacement text.
If the last character of the alias value is a
@var{blank}, then the next command word following the
alias is also checked for alias expansion.

Aliases are created and listed with the @code{alias}
command, and removed with the @code{unalias} command.

There is no mechanism for using arguments in the replacement text,
as in @code{csh}.
If arguments are needed, a shell function should be used
(@pxref{Shell Functions}).

Aliases are not expanded when the shell is not interactive,
unless the @code{expand_aliases} shell option is set using
@code{shopt} (@pxref{The Shopt Builtin}).

The rules concerning the definition and use of aliases are
somewhat confusing.  Bash
always reads at least one complete line
of input before executing any
of the commands on that line.  Aliases are expanded when a
command is read, not when it is executed.  Therefore, an
alias definition appearing on the same line as another
command does not take effect until the next line of input is read.
The commands following the alias definition
on that line are not affected by the new alias.
This behavior is also an issue when functions are executed.
Aliases are expanded when a function definition is read,
not when the function is executed, because a function definition
is itself a compound command.  As a consequence, aliases
defined in a function are not available until after that
function is executed.  To be safe, always put
alias definitions on a separate line, and do not use @code{alias}
in compound commands.

For almost every purpose, shell functions are preferred over aliases.

@node Arrays
@section Arrays
@cindex arrays

Bash provides one-dimensional indexed and associative array variables.
Any variable may be used as an indexed array;
the @code{declare} builtin will explicitly declare an array.
There is no maximum
limit on the size of an array, nor any requirement that members
be indexed or assigned contiguously.
Indexed arrays are referenced using integers (including arithmetic
expressions (@pxref{Shell Arithmetic})) and are zero-based;
associative arrays use arbitrary strings.
Unless otherwise noted, indexed array indices must be non-negative integers.

An indexed array is created automatically if any variable is assigned to
using the syntax
@example
@var{name}[@var{subscript}]=@var{value}
@end example

@noindent
The @var{subscript}
is treated as an arithmetic expression that must evaluate to a number.
To explicitly declare an array, use
@example
declare -a @var{name}
@end example
@noindent
The syntax
@example
declare -a @var{name}[@var{subscript}]
@end example
@noindent
is also accepted; the @var{subscript} is ignored.

@noindent
Associative arrays are created using
@example
declare -A @var{name}.
@end example

Attributes may be
specified for an array variable using the @code{declare} and
@code{readonly} builtins.  Each attribute applies to all members of
an array.

Arrays are assigned to using compound assignments of the form
@example
@var{name}=(@var{value1} @var{value2} @dots{} )
@end example
@noindent
where each
@var{value} is of the form @code{[@var{subscript}]=}@var{string}.
Indexed array assignments do not require anything but @var{string}.
When assigning to indexed arrays, if
the optional subscript is supplied, that index is assigned to;
otherwise the index of the element assigned is the last index assigned
to by the statement plus one.  Indexing starts at zero.

When assigning to an associative array, the subscript is required.

This syntax is also accepted by the @code{declare}
builtin.  Individual array elements may be assigned to using the
@code{@var{name}[@var{subscript}]=@var{value}} syntax introduced above.

When assigning to an indexed array, if @var{name}
is subscripted by a negative number, that number is
interpreted as relative to one greater than the maximum index of
@var{name}, so negative indices count back from the end of the
array, and an index of -1 references the last element.

Any element of an array may be referenced using
@code{$@{@var{name}[@var{subscript}]@}}.
The braces are required to avoid
conflicts with the shell's filename expansion operators.  If the
@var{subscript} is @samp{@@} or @samp{*}, the word expands to all members
of the array @var{name}.  These subscripts differ only when the word
appears within double quotes.
If the word is double-quoted,
@code{$@{@var{name}[*]@}} expands to a single word with
the value of each array member separated by the first character of the
@env{IFS} variable, and @code{$@{@var{name}[@@]@}} expands each element of
@var{name} to a separate word.  When there are no array members,
@code{$@{@var{name}[@@]@}} expands to nothing.
If the double-quoted expansion occurs within a word, the expansion of
the first parameter is joined with the beginning part of the original
word, and the expansion of the last parameter is joined with the last
part of the original word.
This is analogous to the
expansion of the special parameters @samp{@@} and @samp{*}. 
@code{$@{#@var{name}[@var{subscript}]@}} expands to the length of
@code{$@{@var{name}[@var{subscript}]@}}.
If @var{subscript} is @samp{@@} or
@samp{*}, the expansion is the number of elements in the array. 
Referencing an array variable without a subscript is equivalent to
referencing with a subscript of 0. 
If the @var{subscript}
used to reference an element of an indexed array
evaluates to a number less than zero, it is 
interpreted as relative to one greater than the maximum index of the array,
so negative indices count back from the end of the array,
and an index of -1 refers to the last element.

An array variable is considered set if a subscript has been assigned a
value.  The null string is a valid value.

It is possible to obtain the keys (indices) of an array as well as the values.
$@{!@var{name}[@@]@} and $@{!@var{name}[*]@} expand to the indices
assigned in array variable @var{name}.
The treatment when in double quotes is similar to the expansion of the
special parameters @samp{@@} and @samp{*} within double quotes.

The @code{unset} builtin is used to destroy arrays.
@code{unset @var{name}[@var{subscript}]}
destroys the array element at index @var{subscript}.
Negative subscripts to indexed arrays are interpreted as described above.
Care must be taken to avoid unwanted side effects caused by filename
expansion.
@code{unset @var{name}}, where @var{name} is an array, removes the
entire array.  A subscript of @samp{*} or @samp{@@} also removes the
entire array.

The @code{declare}, @code{local}, and @code{readonly}
builtins each accept a @option{-a} option to specify an indexed
array and a @option{-A} option to specify an associative array.
If both options are supplied, @option{-A} takes precedence.
The @code{read} builtin accepts a @option{-a}
option to assign a list of words read from the standard input
to an array, and can read values from the standard input into
individual array elements.  The @code{set} and @code{declare}
builtins display array values in a way that allows them to be
reused as input.

@node The Directory Stack
@section The Directory Stack
@cindex directory stack

@menu
* Directory Stack Builtins::		Bash builtin commands to manipulate
					the directory stack.
@end menu

The directory stack is a list of recently-visited directories.  The
@code{pushd} builtin adds directories to the stack as it changes
the current directory, and the @code{popd} builtin removes specified
directories from the stack and changes the current directory to
the directory removed.  The @code{dirs} builtin displays the contents
of the directory stack.

The contents of the directory stack are also visible
as the value of the @env{DIRSTACK} shell variable.

@node Directory Stack Builtins
@subsection Directory Stack Builtins

@table @code

@item dirs
@btindex dirs
@example
dirs [-clpv] [+@var{N} | -@var{N}]
@end example

Display the list of currently remembered directories.  Directories
are added to the list with the @code{pushd} command; the
@code{popd} command removes directories from the list.

@table @code
@item -c
Clears the directory stack by deleting all of the elements.
@item -l
Produces a listing using full pathnames;
the default listing format uses a tilde to denote the home directory.
@item -p
Causes @code{dirs} to print the directory stack with one entry per
line.
@item -v
Causes @code{dirs} to print the directory stack with one entry per
line, prefixing each entry with its index in the stack.
@item +@var{N}
Displays the @var{N}th directory (counting from the left of the
list printed by @code{dirs} when invoked without options), starting
with zero.
@item -@var{N}
Displays the @var{N}th directory (counting from the right of the
list printed by @code{dirs} when invoked without options), starting
with zero.
@end table

@item popd
@btindex popd
@example
popd [-n] [+@var{N} | -@var{N}]
@end example

Remove the top entry from the directory stack, and @code{cd}
to the new top directory.
When no arguments are given, @code{popd}
removes the top directory from the stack and
performs a @code{cd} to the new top directory.  The
elements are numbered from 0 starting at the first directory listed with
@code{dirs}; that is, @code{popd} is equivalent to @code{popd +0}.

@table @code
@item -n
Suppresses the normal change of directory when removing directories
from the stack, so that only the stack is manipulated.
@item +@var{N}
Removes the @var{N}th directory (counting from the left of the
list printed by @code{dirs}), starting with zero.
@item -@var{N}
Removes the @var{N}th directory (counting from the right of the
list printed by @code{dirs}), starting with zero.
@end table

@btindex pushd
@item pushd
@example
pushd [-n] [@var{+N} | @var{-N} | @var{dir}]
@end example

Save the current directory on the top of the directory stack
and then @code{cd} to @var{dir}.
With no arguments, @code{pushd} exchanges the top two directories.

@table @code
@item -n
Suppresses the normal change of directory when adding directories
to the stack, so that only the stack is manipulated.
@item +@var{N}
Brings the @var{N}th directory (counting from the left of the
list printed by @code{dirs}, starting with zero) to the top of
the list by rotating the stack.
@item -@var{N}
Brings the @var{N}th directory (counting from the right of the
list printed by @code{dirs}, starting with zero) to the top of
the list by rotating the stack.
@item @var{dir}
Makes the current working directory be the top of the stack, making
it the new current directory as if it had been supplied as an argument
to the @code{cd} builtin.
@end table
@end table

@node Controlling the Prompt
@section Controlling the Prompt
@cindex prompting

The value of the variable @env{PROMPT_COMMAND} is examined just before
Bash prints each primary prompt.  If @env{PROMPT_COMMAND} is set and
has a non-null value, then the
value is executed just as if it had been typed on the command line.

In addition, the following table describes the special characters which
can appear in the prompt variables @env{PS1} to @env{PS4}:

@table @code
@item \a
A bell character.
@item \d
The date, in "Weekday Month Date" format (e.g., "Tue May 26").
@item \D@{@var{format}@}
The @var{format} is passed to @code{strftime}(3) and the result is inserted
into the prompt string; an empty @var{format} results in a locale-specific
time representation.  The braces are required.
@item \e
An escape character.
@item \h
The hostname, up to the first `.'.
@item \H
The hostname.
@item \j
The number of jobs currently managed by the shell.
@item \l
The basename of the shell's terminal device name.
@item \n
A newline.
@item \r
A carriage return.
@item \s
The name of the shell, the basename of @code{$0} (the portion
following the final slash).
@item \t
The time, in 24-hour HH:MM:SS format.
@item \T
The time, in 12-hour HH:MM:SS format.
@item \@@
The time, in 12-hour am/pm format.
@item \A
The time, in 24-hour HH:MM format.
@item \u
The username of the current user.
@item \v
The version of Bash (e.g., 2.00)          
@item \V
The release of Bash, version + patchlevel (e.g., 2.00.0)
@item \w
The current working directory, with @env{$HOME} abbreviated with a tilde
(uses the @env{$PROMPT_DIRTRIM} variable).
@item \W
The basename of @env{$PWD}, with @env{$HOME} abbreviated with a tilde.
@item \!
The history number of this command.
@item \#
The command number of this command.
@item \$
If the effective uid is 0, @code{#}, otherwise @code{$}.
@item \@var{nnn}
The character whose ASCII code is the octal value @var{nnn}.
@item \\
A backslash.
@item \[
Begin a sequence of non-printing characters.  This could be used to
embed a terminal control sequence into the prompt.
@item \]
End a sequence of non-printing characters.
@end table

The command number and the history number are usually different:
the history number of a command is its position in the history
list, which may include commands restored from the history file
(@pxref{Bash History Facilities}), while the command number is
the position in the sequence of commands executed during the current
shell session.

After the string is decoded, it is expanded via
parameter expansion, command substitution, arithmetic
expansion, and quote removal, subject to the value of the
@code{promptvars} shell option (@pxref{Bash Builtins}).

@node The Restricted Shell
@section The Restricted Shell
@cindex restricted shell

If Bash is started with the name @code{rbash}, or the
@option{--restricted}
or
@option{-r}
option is supplied at invocation, the shell becomes restricted.
A restricted shell is used to
set up an environment more controlled than the standard shell.
A restricted shell behaves identically to @code{bash}
with the exception that the following are disallowed or not performed:

@itemize @bullet
@item
Changing directories with the @code{cd} builtin.
@item
Setting or unsetting the values of the @env{SHELL}, @env{PATH},
@env{ENV}, or @env{BASH_ENV} variables.
@item
Specifying command names containing slashes.
@item
Specifying a filename containing a slash as an argument to the @code{.}
builtin command.
@item
Specifying a filename containing a slash as an argument to the @option{-p}
option to the @code{hash} builtin command.
@item
Importing function definitions from the shell environment at startup.
@item
Parsing the value of @env{SHELLOPTS} from the shell environment at startup.
@item
Redirecting output using the @samp{>}, @samp{>|}, @samp{<>}, @samp{>&},
@samp{&>}, and @samp{>>} redirection operators.
@item
Using the @code{exec} builtin to replace the shell with another command.
@item
Adding or deleting builtin commands with the
@option{-f} and @option{-d} options to the @code{enable} builtin.
@item
Using the @code{enable} builtin command to enable disabled shell builtins.
@item
Specifying the @option{-p} option to the @code{command} builtin.
@item
Turning off restricted mode with @samp{set +r} or @samp{set +o restricted}.
@end itemize

These restrictions are enforced after any startup files are read.

When a command that is found to be a shell script is executed
(@pxref{Shell Scripts}), @code{rbash} turns off any restrictions in
the shell spawned to execute the script.

@node Bash POSIX Mode
@section Bash POSIX Mode
@cindex POSIX Mode

Starting Bash with the @option{--posix} command-line option or executing
@samp{set -o posix} while Bash is running will cause Bash to conform more
closely to the @sc{posix} standard by changing the behavior to
match that specified by @sc{posix} in areas where the Bash default differs.

When invoked as @code{sh}, Bash enters @sc{posix} mode after reading the
startup files.

The following list is what's changed when `@sc{posix} mode' is in effect:

@enumerate
@item
When a command in the hash table no longer exists, Bash will re-search
@env{$PATH} to find the new location.  This is also available with
@samp{shopt -s checkhash}.

@item
The message printed by the job control code and builtins when a job
exits with a non-zero status is `Done(status)'.

@item
The message printed by the job control code and builtins when a job
is stopped is `Stopped(@var{signame})', where @var{signame} is, for
example, @code{SIGTSTP}.

@item
The @code{bg} builtin uses the required format to describe each job placed
in the background, which does not include an indication of whether the job
is the current or previous job.

@item
Reserved words appearing in a context where reserved words are recognized
do not undergo alias expansion.

@item
The @sc{posix} @env{PS1} and @env{PS2} expansions of @samp{!} to
the history number and @samp{!!} to @samp{!} are enabled,
and parameter expansion is performed on the values of @env{PS1} and
@env{PS2} regardless of the setting of the @code{promptvars} option.

@item
The @sc{posix} startup files are executed (@env{$ENV}) rather than
the normal Bash files.

@item
Tilde expansion is only performed on assignments preceding a command
name, rather than on all assignment statements on the line.

@item
The @code{command} builtin does not prevent builtins that take assignment
statements as arguments from expanding them as assignment statements;
when not in @sc{posix} mode, assignment builtins lose their assignment
statement expansion properties when preceded by @code{command}.

@item
The default history file is @file{~/.sh_history} (this is the
default value of @env{$HISTFILE}).

@item
The output of @samp{kill -l} prints all the signal names on a single line,
separated by spaces, without the @samp{SIG} prefix.

@item
The @code{kill} builtin does not accept signal names with a @samp{SIG}
prefix.

@item
Non-interactive shells exit if @var{filename} in @code{.} @var{filename}
is not found.

@item
Non-interactive shells exit if a syntax error in an arithmetic expansion
results in an invalid expression.

@item
Non-interactive shells exit if there is a syntax error in a script read
with the @code{.} or @code{source} builtins, or in a string processed by
the @code{eval} builtin.

@item
Redirection operators do not perform filename expansion on the word
in the redirection unless the shell is interactive.

@item
Redirection operators do not perform word splitting on the word in the
redirection.

@item
Function names must be valid shell @code{name}s.  That is, they may not
contain characters other than letters, digits, and underscores, and
may not start with a digit.  Declaring a function with an invalid name
causes a fatal syntax error in non-interactive shells.

@item
Function names may not be the same as one of the @sc{posix} special
builtins.

@item
@sc{posix} special builtins are found before shell functions
during command lookup.

@item
The @code{time} reserved word may be used by itself as a command.  When
used in this way, it displays timing statistics for the shell and its
completed children.  The @env{TIMEFORMAT} variable controls the format
of the timing information.

@item
When parsing and expanding a $@{@dots{}@} expansion that appears within
double quotes, single quotes are no longer special and cannot be used to
quote a closing brace or other special character, unless the operator is
one of those defined to perform pattern removal.  In this case, they do
not have to appear as matched pairs.

@item
The parser does not recognize @code{time} as a reserved word if the next
token begins with a @samp{-}.

@item
If a @sc{posix} special builtin returns an error status, a
non-interactive shell exits.  The fatal errors are those listed in
the @sc{posix} standard, and include things like passing incorrect options,
redirection errors, variable assignment errors for assignments preceding
the command name, and so on.

@item
A non-interactive shell exits with an error status if a variable
assignment error occurs when no command name follows the assignment
statements.
A variable assignment error occurs, for example, when trying to assign
a value to a readonly variable.

@item
A non-interactive shell exits with an error status if a variable
assignment error occurs in an assignment statement preceding a special
builtin, but not with any other simple command.

@item
A non-interactive shell exits with an error status if the iteration
variable in a @code{for} statement or the selection variable in a
@code{select} statement is a readonly variable.

@item
Process substitution is not available.

@item
While variable indirection is available, it may not be applied to the
@samp{#} and @samp{?} special parameters.

@item
Assignment statements preceding @sc{posix} special builtins
persist in the shell environment after the builtin completes.

@item
Assignment statements preceding shell function calls persist in the
shell environment after the function returns, as if a @sc{posix}
special builtin command had been executed.

@item
The @code{export} and @code{readonly} builtin commands display their
output in the format required by @sc{posix}.

@item
The @code{trap} builtin displays signal names without the leading
@code{SIG}.

@item
The @code{trap} builtin doesn't check the first argument for a possible
signal specification and revert the signal handling to the original
disposition if it is, unless that argument consists solely of digits and
is a valid signal number.  If users want to reset the handler for a given
signal to the original disposition, they should use @samp{-} as the
first argument.

@item
The @code{.} and @code{source} builtins do not search the current directory
for the filename argument if it is not found by searching @env{PATH}.

@item
Subshells spawned to execute command substitutions inherit the value of
the @option{-e} option from the parent shell.  When not in @sc{posix} mode,
Bash clears the @option{-e} option in such subshells.

@item
Alias expansion is always enabled, even in non-interactive shells.

@item
When the @code{alias} builtin displays alias definitions, it does not
display them with a leading @samp{alias } unless the @option{-p} option
is supplied.

@item
When the @code{set} builtin is invoked without options, it does not display
shell function names and definitions.

@item
When the @code{set} builtin is invoked without options, it displays
variable values without quotes, unless they contain shell metacharacters,
even if the result contains nonprinting characters.

@item
When the @code{cd} builtin is invoked in @var{logical} mode, and the pathname
constructed from @code{$PWD} and the directory name supplied as an argument
does not refer to an existing directory, @code{cd} will fail instead of
falling back to @var{physical} mode.

@item
The @code{pwd} builtin verifies that the value it prints is the same as the
current directory, even if it is not asked to check the file system with the
@option{-P} option.

@item
When listing the history, the @code{fc} builtin does not include an
indication of whether or not a history entry has been modified.

@item
The default editor used by @code{fc} is @code{ed}.

@item
The @code{type} and @code{command} builtins will not report a non-executable
file as having been found, though the shell will attempt to execute such a
file if it is the only so-named file found in @code{$PATH}.

@item
The @code{vi} editing mode will invoke the @code{vi} editor directly when
the @samp{v} command is run, instead of checking @code{$VISUAL} and
@code{$EDITOR}.

@item
When the @code{xpg_echo} option is enabled, Bash does not attempt to interpret
any arguments to @code{echo} as options.  Each argument is displayed, after
escape characters are converted.

@item
The @code{ulimit} builtin uses a block size of 512 bytes for the @option{-c}
and @option{-f} options.

@item
The arrival of @code{SIGCHLD}  when a trap is set on @code{SIGCHLD} does
not interrupt the @code{wait} builtin and cause it to return immediately.
The trap command is run once for each child that exits.

@item
The @code{read} builtin may be interrupted by a signal for which a trap
has been set.
If Bash receives a trapped signal while executing @code{read}, the trap
handler executes and @code{read} returns an exit status greater than 128.

@end enumerate

There is other @sc{posix} behavior that Bash does not implement by
default even when in @sc{posix} mode.
Specifically:

@enumerate

@item
The @code{fc} builtin checks @code{$EDITOR} as a program to edit history
entries if @code{FCEDIT} is unset, rather than defaulting directly to
@code{ed}.  @code{fc} uses @code{ed} if @code{EDITOR} is unset.

@item
As noted above, Bash requires the @code{xpg_echo} option to be enabled for
the @code{echo} builtin to be fully conformant.

@end enumerate

Bash can be configured to be @sc{posix}-conformant by default, by specifying
the @option{--enable-strict-posix-default} to @code{configure} when building
(@pxref{Optional Features}).

@node Job Control
@chapter Job Control

This chapter discusses what job control is, how it works, and how
Bash allows you to access its facilities.

@menu
* Job Control Basics::		How job control works.
* Job Control Builtins::	Bash builtin commands used to interact
				with job control.
* Job Control Variables::	Variables Bash uses to customize job
				control.
@end menu

@node Job Control Basics
@section Job Control Basics
@cindex job control
@cindex foreground
@cindex background
@cindex suspending jobs

Job control
refers to the ability to selectively stop (suspend)
the execution of processes and continue (resume)
their execution at a later point.  A user typically employs
this facility via an interactive interface supplied jointly
by the operating system kernel's terminal driver and Bash.

The shell associates a @var{job} with each pipeline.  It keeps a
table of currently executing jobs, which may be listed with the
@code{jobs} command.  When Bash starts a job
asynchronously, it prints a line that looks
like:
@example
[1] 25647
@end example
@noindent
indicating that this job is job number 1 and that the process @sc{id}
of the last process in the pipeline associated with this job is
25647.  All of the processes in a single pipeline are members of
the same job.  Bash uses the @var{job} abstraction as the
basis for job control. 

To facilitate the implementation of the user interface to job
control, the operating system maintains the notion of a current terminal
process group @sc{id}.  Members of this process group (processes whose
process group @sc{id} is equal to the current terminal process group
@sc{id}) receive keyboard-generated signals such as @code{SIGINT}. 
These processes are said to be in the foreground.  Background
processes are those whose process group @sc{id} differs from the
terminal's; such processes are immune to keyboard-generated
signals.  Only foreground processes are allowed to read from or, if
the user so specifies with @code{stty tostop}, write to the terminal.
Background processes which attempt to
read from (write to when @code{stty tostop} is in effect) the
terminal are sent a @code{SIGTTIN} (@code{SIGTTOU})
signal by the kernel's terminal driver,
which, unless caught, suspends the process. 

If the operating system on which Bash is running supports
job control, Bash contains facilities to use it.  Typing the
@var{suspend} character (typically @samp{^Z}, Control-Z) while a
process is running causes that process to be stopped and returns
control to Bash.  Typing the @var{delayed suspend} character
(typically @samp{^Y}, Control-Y) causes the process to be stopped
when it attempts to read input from the terminal, and control to
be returned to Bash.  The user then manipulates the state of
this job, using the @code{bg} command to continue it in the
background, the @code{fg} command to continue it in the
foreground, or the @code{kill} command to kill it.  A @samp{^Z}
takes effect immediately, and has the additional side effect of
causing pending output and typeahead to be discarded. 

There are a number of ways to refer to a job in the shell.  The
character @samp{%} introduces a job specification (@var{jobspec}).

Job number @code{n} may be referred to as @samp{%n}.
The symbols @samp{%%} and  @samp{%+} refer to the shell's notion of the
current job, which is the last job stopped while it was in the foreground
or started in the background.
A single @samp{%} (with no accompanying job specification) also refers
to the current job.
The previous job may be referenced using @samp{%-}.
If there is only a single job, @samp{%+} and @samp{%-} can both be used
to refer to that job.
In output pertaining to jobs (e.g., the output of the @code{jobs}
command), the current job is always flagged with a @samp{+}, and the
previous job with a @samp{-}. 

A job may also be referred to
using a prefix of the name used to start it, or using a substring
that appears in its command line.  For example, @samp{%ce} refers
to a stopped @code{ce} job.  Using @samp{%?ce}, on the
other hand, refers to any job containing the string @samp{ce} in
its command line.  If the prefix or substring matches more than one job,
Bash reports an error.

Simply naming a job can be used to bring it into the foreground:
@samp{%1} is a synonym for @samp{fg %1}, bringing job 1 from the
background into the foreground.  Similarly, @samp{%1 &} resumes
job 1 in the background, equivalent to @samp{bg %1}

The shell learns immediately whenever a job changes state. 
Normally, Bash waits until it is about to print a prompt
before reporting changes in a job's status so as to not interrupt
any other output.
If the @option{-b} option to the @code{set} builtin is enabled,
Bash reports such changes immediately (@pxref{The Set Builtin}).
Any trap on @code{SIGCHLD} is executed for each child process
that exits.

If an attempt to exit Bash is made while jobs are stopped, (or running, if
the @code{checkjobs} option is enabled -- see @ref{The Shopt Builtin}), the
shell prints a warning message, and if the @code{checkjobs} option is
enabled, lists the jobs and their statuses.
The @code{jobs} command may then be used to inspect their status.
If a second attempt to exit is made without an intervening command,
Bash does not print another warning, and any stopped jobs are terminated.

@node Job Control Builtins
@section Job Control Builtins

@table @code

@item bg
@btindex bg
@example
bg [@var{jobspec} @dots{}]
@end example

Resume each suspended job @var{jobspec} in the background, as if it
had been started with @samp{&}.
If @var{jobspec} is not supplied, the current job is used.
The return status is zero unless it is run when job control is not
enabled, or, when run with job control enabled, any
@var{jobspec} was not found or specifies a job
that was started without job control.

@item fg
@btindex fg
@example
fg [@var{jobspec}]
@end example

Resume the job @var{jobspec} in the foreground and make it the current job.
If @var{jobspec} is not supplied, the current job is used.
The return status is that of the command placed into the foreground,
or non-zero if run when job control is disabled or, when run with
job control enabled, @var{jobspec} does not specify a valid job or
@var{jobspec} specifies a job that was started without job control.

@item jobs
@btindex jobs
@example
jobs [-lnprs] [@var{jobspec}]
jobs -x @var{command} [@var{arguments}]
@end example

The first form lists the active jobs.  The options have the
following meanings:

@table @code
@item -l
List process @sc{id}s in addition to the normal information.

@item -n
Display information only about jobs that have changed status since
the user was last notified of their status.

@item -p
List only the process @sc{id} of the job's process group leader.

@item -r
Display only running jobs.

@item -s
Display only stopped jobs.
@end table

If @var{jobspec} is given,
output is restricted to information about that job. 
If @var{jobspec} is not supplied, the status of all jobs is
listed.

If the @option{-x} option is supplied, @code{jobs} replaces any
@var{jobspec} found in @var{command} or @var{arguments} with the
corresponding process group @sc{id}, and executes @var{command},
passing it @var{argument}s, returning its exit status. 

@item kill
@btindex kill
@example
kill [-s @var{sigspec}] [-n @var{signum}] [-@var{sigspec}] @var{jobspec} or @var{pid}
kill -l [@var{exit_status}]
@end example

Send a signal specified by @var{sigspec} or @var{signum} to the process
named by job specification @var{jobspec} or process @sc{id} @var{pid}.
@var{sigspec} is either a case-insensitive signal name such as
@code{SIGINT} (with or without the @code{SIG} prefix)
or a signal number; @var{signum} is a signal number.
If @var{sigspec} and @var{signum} are not present, @code{SIGTERM} is used.
The @option{-l} option lists the signal names.
If any arguments are supplied when @option{-l} is given, the names of the
signals corresponding to the arguments are listed, and the return status
is zero.
@var{exit_status} is a number specifying a signal number or the exit
status of a process terminated by a signal.
The return status is zero if at least one signal was successfully sent,
or non-zero if an error occurs or an invalid option is encountered.

@item wait
@btindex wait
@example
wait [-n] [@var{jobspec} or @var{pid} @dots{}]
@end example

Wait until the child process specified by each process @sc{id} @var{pid}
or job specification @var{jobspec} exits and return the exit status of the
last command waited for.
If a job spec is given, all processes in the job are waited for.
If no arguments are given, all currently active child processes are
waited for, and the return status is zero.
If the @option{-n} option is supplied, @code{wait} waits for any job to
terminate and returns its exit status.
If neither @var{jobspec} nor @var{pid} specifies an active child process
of the shell, the return status is 127.

@item disown
@btindex disown
@example
disown [-ar] [-h] [@var{jobspec} @dots{}]
@end example

Without options, remove each @var{jobspec} from the table of
active jobs.
If the @option{-h} option is given, the job is not removed from the table,
but is marked so that @code{SIGHUP} is not sent to the job if the shell
receives a @code{SIGHUP}.
If @var{jobspec} is not present, and neither the @option{-a} nor the
@option{-r} option is supplied, the current job is used.
If no @var{jobspec} is supplied, the @option{-a} option means to remove or
mark all jobs; the @option{-r} option without a @var{jobspec}
argument restricts operation to running jobs.

@item suspend
@btindex suspend
@example
suspend [-f]
@end example

Suspend the execution of this shell until it receives a
@code{SIGCONT} signal.
A login shell cannot be suspended; the @option{-f}
option can be used to override this and force the suspension.
@end table

When job control is not active, the @code{kill} and @code{wait}
builtins do not accept @var{jobspec} arguments.  They must be
supplied process @sc{id}s.

@node Job Control Variables
@section Job Control Variables

@vtable @code

@item auto_resume
This variable controls how the shell interacts with the user and
job control.  If this variable exists then single word simple
commands without redirections are treated as candidates for resumption
of an existing job.  There is no ambiguity allowed; if there is
more than one job beginning with the string typed, then
the most recently accessed job will be selected.
The name of a stopped job, in this context, is the command line
used to start it.  If this variable is set to the value @samp{exact},
the string supplied must match the name of a stopped job exactly;
if set to @samp{substring},
the string supplied needs to match a substring of the name of a
stopped job.  The @samp{substring} value provides functionality
analogous to the @samp{%?} job @sc{id} (@pxref{Job Control Basics}).
If set to any other value, the supplied string must
be a prefix of a stopped job's name; this provides functionality
analogous to the @samp{%} job @sc{id}.

@end vtable

@set readline-appendix
@set history-appendix
@cindex Readline, how to use
@include rluser.texi
@cindex History, how to use
@include hsuser.texi
@clear readline-appendix
@clear history-appendix

@node Installing Bash
@chapter Installing Bash

This chapter provides basic instructions for installing Bash on
the various supported platforms.  The distribution supports the
@sc{gnu} operating systems, nearly every version of Unix, and several
non-Unix systems such as BeOS and Interix.
Other independent ports exist for
@sc{ms-dos}, @sc{os/2}, and Windows platforms.

@menu
* Basic Installation::	Installation instructions.
* Compilers and Options::	How to set special options for various
				systems.
* Compiling For Multiple Architectures::	How to compile Bash for more
						than one kind of system from
						the same source tree.
* Installation Names::	How to set the various paths used by the installation.
* Specifying the System Type::	How to configure Bash for a particular system.
* Sharing Defaults::	How to share default configuration values among GNU
			programs.
* Operation Controls::	Options recognized by the configuration program.
* Optional Features::	How to enable and disable optional features when
			building Bash.
@end menu

@node Basic Installation
@section Basic Installation
@cindex installation
@cindex configuration
@cindex Bash installation
@cindex Bash configuration

These are installation instructions for Bash.

The simplest way to compile Bash is:

@enumerate
@item
@code{cd} to the directory containing the source code and type
@samp{./configure} to configure Bash for your system.  If you're
using @code{csh} on an old version of System V, you might need to
type @samp{sh ./configure} instead to prevent @code{csh} from trying
to execute @code{configure} itself.

Running @code{configure} takes some time.
While running, it prints messages telling which features it is
checking for.

@item
Type @samp{make} to compile Bash and build the @code{bashbug} bug
reporting script.

@item
Optionally, type @samp{make tests} to run the Bash test suite.

@item
Type @samp{make install} to install @code{bash} and @code{bashbug}.
This will also install the manual pages and Info file.

@end enumerate

The @code{configure} shell script attempts to guess correct
values for various system-dependent variables used during
compilation.  It uses those values to create a @file{Makefile} in
each directory of the package (the top directory, the
@file{builtins}, @file{doc}, and @file{support} directories,
each directory under @file{lib}, and several others).  It also creates a
@file{config.h} file containing system-dependent definitions. 
Finally, it creates a shell script named @code{config.status} that you
can run in the future to recreate the current configuration, a
file @file{config.cache} that saves the results of its tests to
speed up reconfiguring, and a file @file{config.log} containing
compiler output (useful mainly for debugging @code{configure}). 
If at some point
@file{config.cache} contains results you don't want to keep, you
may remove or edit it. 

To find out more about the options and arguments that the
@code{configure} script understands, type 

@example
bash-2.04$ ./configure --help
@end example

@noindent
at the Bash prompt in your Bash source directory.

If you need to do unusual things to compile Bash, please
try to figure out how @code{configure} could check whether or not
to do them, and mail diffs or instructions to
@email{bash-maintainers@@gnu.org} so they can be
considered for the next release.

The file @file{configure.ac} is used to create @code{configure}
by a program called Autoconf.  You only need
@file{configure.ac} if you want to change it or regenerate
@code{configure} using a newer version of Autoconf.  If
you do this, make sure you are using Autoconf version 2.50 or
newer.

You can remove the program binaries and object files from the
source code directory by typing @samp{make clean}.  To also remove the
files that @code{configure} created (so you can compile Bash for
a different kind of computer), type @samp{make distclean}.

@node Compilers and Options
@section Compilers and Options

Some systems require unusual options for compilation or linking
that the @code{configure} script does not know about.  You can
give @code{configure} initial values for variables by setting
them in the environment.  Using a Bourne-compatible shell, you
can do that on the command line like this:

@example
CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure
@end example

On systems that have the @code{env} program, you can do it like this:

@example
env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure
@end example

The configuration process uses GCC to build Bash if it
is available.

@node Compiling For Multiple Architectures
@section Compiling For Multiple Architectures

You can compile Bash for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of @code{make} that
supports the @code{VPATH} variable, such as GNU @code{make}.
@code{cd} to the
directory where you want the object files and executables to go and run
the @code{configure} script from the source directory.  You may need to
supply the @option{--srcdir=PATH} argument to tell @code{configure} where the
source files are.  @code{configure} automatically checks for the
source code in the directory that @code{configure} is in and in `..'.

If you have to use a @code{make} that does not supports the @code{VPATH}
variable, you can compile Bash for one architecture at a
time in the source code directory.  After you have installed
Bash for one architecture, use @samp{make distclean} before
reconfiguring for another architecture.

Alternatively, if your system supports symbolic links, you can use the
@file{support/mkclone} script to create a build tree which has
symbolic links back to each file in the source directory.  Here's an
example that creates a build directory in the current directory from a
source directory @file{/usr/gnu/src/bash-2.0}:

@example
bash /usr/gnu/src/bash-2.0/support/mkclone -s /usr/gnu/src/bash-2.0 .
@end example

@noindent
The @code{mkclone} script requires Bash, so you must have already built
Bash for at least one architecture before you can create build
directories for other architectures.

@node Installation Names
@section Installation Names

By default, @samp{make install} will install into
@file{/usr/local/bin}, @file{/usr/local/man}, etc.  You can
specify an installation prefix other than @file{/usr/local} by
giving @code{configure} the option @option{--prefix=@var{PATH}},
or by specifying a value for the @code{DESTDIR} @samp{make}
variable when running @samp{make install}.

You can specify separate installation prefixes for
architecture-specific files and architecture-independent files. 
If you give @code{configure} the option
@option{--exec-prefix=@var{PATH}}, @samp{make install} will use
@var{PATH} as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix. 

@node Specifying the System Type
@section Specifying the System Type

There may be some features @code{configure} can not figure out
automatically, but need to determine by the type of host Bash
will run on.  Usually @code{configure} can figure that
out, but if it prints a message saying it can not guess the host
type, give it the @option{--host=TYPE} option.  @samp{TYPE} can
either be a short name for the system type, such as @samp{sun4},
or a canonical name with three fields: @samp{CPU-COMPANY-SYSTEM}
(e.g., @samp{i386-unknown-freebsd4.2}).

See the file @file{support/config.sub} for the possible
values of each field. 

@node Sharing Defaults
@section Sharing Defaults

If you want to set default values for @code{configure} scripts to
share, you can create a site shell script called
@code{config.site} that gives default values for variables like
@code{CC}, @code{cache_file}, and @code{prefix}.  @code{configure}
looks for @file{PREFIX/share/config.site} if it exists, then
@file{PREFIX/etc/config.site} if it exists.  Or, you can set the
@code{CONFIG_SITE} environment variable to the location of the site
script.  A warning: the Bash @code{configure} looks for a site script,
but not all @code{configure} scripts do.

@node Operation Controls
@section Operation Controls

@code{configure} recognizes the following options to control how it
operates.

@table @code

@item --cache-file=@var{file}
Use and save the results of the tests in
@var{file} instead of @file{./config.cache}.  Set @var{file} to
@file{/dev/null} to disable caching, for debugging
@code{configure}. 

@item --help
Print a summary of the options to @code{configure}, and exit.

@item --quiet
@itemx --silent
@itemx -q
Do not print messages saying which checks are being made.

@item --srcdir=@var{dir}
Look for the Bash source code in directory @var{dir}.  Usually
@code{configure} can determine that directory automatically.

@item --version
Print the version of Autoconf used to generate the @code{configure}
script, and exit.
@end table

@code{configure} also accepts some other, not widely used, boilerplate
options.  @samp{configure --help} prints the complete list.

@node Optional Features
@section Optional Features

The Bash @code{configure} has a number of @option{--enable-@var{feature}}
options, where @var{feature} indicates an optional part of Bash.
There are also several @option{--with-@var{package}} options,
where @var{package} is something like @samp{bash-malloc} or @samp{purify}.
To turn off the default use of a package, use
@option{--without-@var{package}}.  To configure Bash without a feature
that is enabled by default, use @option{--disable-@var{feature}}.

Here is a complete list of the @option{--enable-} and
@option{--with-} options that the Bash @code{configure} recognizes. 

@table @code
@item --with-afs
Define if you are using the Andrew File System from Transarc.

@item --with-bash-malloc
Use the Bash version of
@code{malloc} in the directory @file{lib/malloc}.  This is not the same
@code{malloc} that appears in @sc{gnu} libc, but an older version
originally derived from the 4.2 @sc{bsd} @code{malloc}.  This @code{malloc}
is very fast, but wastes some space on each allocation.
This option is enabled by default.
The @file{NOTES} file contains a list of systems for
which this should be turned off, and @code{configure} disables this
option automatically for a number of systems.

@item --with-curses
Use the curses library instead of the termcap library.  This should
be supplied if your system has an inadequate or incomplete termcap
database.

@item --with-gnu-malloc
A synonym for @code{--with-bash-malloc}.

@item --with-installed-readline[=@var{PREFIX}]
Define this to make Bash link with a locally-installed version of Readline
rather than the version in @file{lib/readline}.  This works only with
Readline 5.0 and later versions.  If @var{PREFIX} is @code{yes} or not
supplied, @code{configure} uses the values of the make variables
@code{includedir} and @code{libdir}, which are subdirectories of @code{prefix}
by default, to find the installed version of Readline if it is not in
the standard system include and library directories.
If @var{PREFIX} is @code{no}, Bash links with the version in
@file{lib/readline}.
If @var{PREFIX} is set to any other value, @code{configure} treats it as
a directory pathname and looks for
the installed version of Readline in subdirectories of that directory
(include files in @var{PREFIX}/@code{include} and the library in
@var{PREFIX}/@code{lib}).

@item --with-purify
Define this to use the Purify memory allocation checker from Rational
Software.

@item --enable-minimal-config
This produces a shell with minimal features, close to the historical
Bourne shell.
@end table

There are several @option{--enable-} options that alter how Bash is
compiled and linked, rather than changing run-time features.

@table @code
@item --enable-largefile
Enable support for @uref{http://www.sas.com/standards/large_file/x_open.20Mar96.html,
large files} if the operating system requires special compiler options
to build programs which can access large files.  This is enabled by
default, if the operating system provides large file support.

@item --enable-profiling
This builds a Bash binary that produces profiling information to be
processed by @code{gprof} each time it is executed.

@item --enable-static-link
This causes Bash to be linked statically, if @code{gcc} is being used.
This could be used to build a version to use as root's shell.
@end table

The @samp{minimal-config} option can be used to disable all of
the following options, but it is processed first, so individual
options may be enabled using @samp{enable-@var{feature}}. 

All of the following options except for @samp{disabled-builtins},
@samp{directpand-default}, and
@samp{xpg-echo-default} are
enabled by default, unless the operating system does not provide the
necessary support.

@table @code
@item --enable-alias
Allow alias expansion and include the @code{alias} and @code{unalias}
builtins (@pxref{Aliases}).

@item --enable-arith-for-command
Include support for the alternate form of the @code{for} command
that behaves like the C language @code{for} statement
(@pxref{Looping Constructs}).

@item --enable-array-variables
Include support for one-dimensional array shell variables
(@pxref{Arrays}).

@item --enable-bang-history
Include support for @code{csh}-like history substitution
(@pxref{History Interaction}).

@item --enable-brace-expansion
Include @code{csh}-like brace expansion
( @code{b@{a,b@}c} @expansion{} @code{bac bbc} ).
See @ref{Brace Expansion}, for a complete description.

@item --enable-casemod-attributes
Include support for case-modifying attributes in the @code{declare} builtin
and assignment statements.  Variables with the @var{uppercase} attribute,
for example, will have their values converted to uppercase upon assignment.

@item --enable-casemod-expansion
Include support for case-modifying word expansions.

@item --enable-command-timing
Include support for recognizing @code{time} as a reserved word and for
displaying timing statistics for the pipeline following @code{time}
(@pxref{Pipelines}).
This allows pipelines as well as shell builtins and functions to be timed.

@item --enable-cond-command
Include support for the @code{[[} conditional command.
(@pxref{Conditional Constructs}).

@item --enable-cond-regexp
Include support for matching @sc{posix} regular expressions using the
@samp{=~} binary operator in the @code{[[} conditional command.
(@pxref{Conditional Constructs}).

@item --enable-coprocesses
Include support for coprocesses and the @code{coproc} reserved word
(@pxref{Pipelines}).

@item --enable-debugger
Include support for the bash debugger (distributed separately).

@item --enable-direxpand-default
Cause the @code{direxpand} shell option (@pxref{The Shopt Builtin})
to be enabled by default when the shell starts.
It is normally disabled by default.

@item --enable-directory-stack
Include support for a @code{csh}-like directory stack and the
@code{pushd}, @code{popd}, and @code{dirs} builtins
(@pxref{The Directory Stack}).

@item --enable-disabled-builtins
Allow builtin commands to be invoked via @samp{builtin xxx}
even after @code{xxx} has been disabled using @samp{enable -n xxx}.
See @ref{Bash Builtins}, for details of the @code{builtin} and
@code{enable} builtin commands.

@item --enable-dparen-arithmetic
Include support for the @code{((@dots{}))} command
(@pxref{Conditional Constructs}).

@item --enable-extended-glob
Include support for the extended pattern matching features described
above under @ref{Pattern Matching}.

@item --enable-extended-glob-default
Set the default value of the @var{extglob} shell option described
above under @ref{The Shopt Builtin} to be enabled.

@item --enable-glob-asciirange-default
Set the default value of the @var{globasciiranges} shell option described
above under @ref{The Shopt Builtin} to be enabled.
This controls the behavior of character ranges when used in pattern matching
bracket expressions.

@item --enable-help-builtin
Include the @code{help} builtin, which displays help on shell builtins and
variables (@pxref{Bash Builtins}).

@item --enable-history
Include command history and the @code{fc} and @code{history}
builtin commands (@pxref{Bash History Facilities}).

@item --enable-job-control
This enables the job control features (@pxref{Job Control}),
if the operating system supports them.

@item --enable-multibyte
This enables support for multibyte characters if the operating
system provides the necessary support.

@item --enable-net-redirections
This enables the special handling of filenames of the form
@code{/dev/tcp/@var{host}/@var{port}} and
@code{/dev/udp/@var{host}/@var{port}}
when used in redirections (@pxref{Redirections}).

@item --enable-process-substitution
This enables process substitution (@pxref{Process Substitution}) if
the operating system provides the necessary support.

@item --enable-progcomp
Enable the programmable completion facilities
(@pxref{Programmable Completion}).
If Readline is not enabled, this option has no effect.

@item --enable-prompt-string-decoding
Turn on the interpretation of a number of backslash-escaped characters
in the @env{$PS1}, @env{$PS2}, @env{$PS3}, and @env{$PS4} prompt
strings.  See @ref{Controlling the Prompt}, for a complete list of prompt
string escape sequences.

@item --enable-readline
Include support for command-line editing and history with the Bash
version of the Readline library (@pxref{Command Line Editing}).

@item --enable-restricted
Include support for a @dfn{restricted shell}.  If this is enabled, Bash,
when called as @code{rbash}, enters a restricted mode.  See
@ref{The Restricted Shell}, for a description of restricted mode.

@item --enable-select
Include the @code{select} compound command, which allows the generation of
simple menus (@pxref{Conditional Constructs}).

@item --enable-separate-helpfiles
Use external files for the documentation displayed by the @code{help} builtin
instead of storing the text internally.

@item --enable-single-help-strings
Store the text displayed by the @code{help} builtin as a single string for
each help topic.  This aids in translating the text to different languages.
You may need to disable this if your compiler cannot handle very long string
literals.

@item --enable-strict-posix-default
Make Bash @sc{posix}-conformant by default (@pxref{Bash POSIX Mode}).

@item --enable-usg-echo-default
A synonym for @code{--enable-xpg-echo-default}.

@item --enable-xpg-echo-default
Make the @code{echo} builtin expand backslash-escaped characters by default,
without requiring the @option{-e} option.
This sets the default value of the @code{xpg_echo} shell option to @code{on},
which makes the Bash @code{echo} behave more like the version specified in
the Single Unix Specification, version 3.
@xref{Bash Builtins}, for a description of the escape sequences that
@code{echo} recognizes.
@end table

The file @file{config-top.h} contains C Preprocessor
@samp{#define} statements for options which are not settable from
@code{configure}.
Some of these are not meant to be changed; beware of the consequences if
you do.
Read the comments associated with each definition for more
information about its effect.

@node Reporting Bugs
@appendix Reporting Bugs

Please report all bugs you find in Bash.
But first, you should
make sure that it really is a bug, and that it appears in the latest
version of Bash.
The latest version of Bash is always available for FTP from
@uref{ftp://ftp.gnu.org/pub/gnu/bash/}.

Once you have determined that a bug actually exists, use the
@code{bashbug} command to submit a bug report.
If you have a fix, you are encouraged to mail that as well!
Suggestions and `philosophical' bug reports may be mailed
to @email{bug-bash@@gnu.org} or posted to the Usenet
newsgroup @code{gnu.bash.bug}.

All bug reports should include:
@itemize @bullet
@item
The version number of Bash.
@item
The hardware and operating system.
@item
The compiler used to compile Bash.
@item
A description of the bug behaviour.
@item
A short script or `recipe' which exercises the bug and may be used
to reproduce it.
@end itemize

@noindent
@code{bashbug} inserts the first three items automatically into
the template it provides for filing a bug report.

Please send all reports concerning this manual to
@email{bug-bash@@gnu.org}.

@node Major Differences From The Bourne Shell
@appendix Major Differences From The Bourne Shell

Bash implements essentially the same grammar, parameter and
variable expansion, redirection, and quoting as the Bourne Shell. 
Bash uses the @sc{posix} standard as the specification of
how these features are to be implemented.  There are some
differences between the traditional Bourne shell and Bash; this
section quickly details the differences of significance.  A
number of these differences are explained in greater depth in
previous sections.
This section uses the version of @code{sh} included in SVR4.2 (the
last version of the historical Bourne shell) as the baseline reference.

@itemize @bullet

@item
Bash is @sc{posix}-conformant, even where the @sc{posix} specification
differs from traditional @code{sh} behavior (@pxref{Bash POSIX Mode}).

@item
Bash has multi-character invocation options (@pxref{Invoking Bash}).

@item
Bash has command-line editing (@pxref{Command Line Editing}) and
the @code{bind} builtin.

@item
Bash provides a programmable word completion mechanism
(@pxref{Programmable Completion}), and builtin commands
@code{complete}, @code{compgen}, and @code{compopt}, to
manipulate it.

@item
Bash has command history (@pxref{Bash History Facilities}) and the
@code{history} and @code{fc} builtins to manipulate it.
The Bash history list maintains timestamp information and uses the
value of the @code{HISTTIMEFORMAT} variable to display it.

@item
Bash implements @code{csh}-like history expansion
(@pxref{History Interaction}).

@item
Bash has one-dimensional array variables (@pxref{Arrays}), and the
appropriate variable expansions and assignment syntax to use them.
Several of the Bash builtins take options to act on arrays.
Bash provides a number of built-in array variables.

@item
The @code{$'@dots{}'} quoting syntax, which expands ANSI-C
backslash-escaped characters in the text between the single quotes,
is supported (@pxref{ANSI-C Quoting}).

@item
Bash supports the @code{$"@dots{}"} quoting syntax to do
locale-specific translation of the characters between the double
quotes.  The @option{-D}, @option{--dump-strings}, and @option{--dump-po-strings}
invocation options list the translatable strings found in a script
(@pxref{Locale Translation}).

@item
Bash implements the @code{!} keyword to negate the return value of
a pipeline (@pxref{Pipelines}).
Very useful when an @code{if} statement needs to act only if a test fails.
The Bash @samp{-o pipefail} option to @code{set} will cause a pipeline to
return a failure status if any command fails.

@item
Bash has the @code{time} reserved word and command timing (@pxref{Pipelines}).
The display of the timing statistics may be controlled with the
@env{TIMEFORMAT} variable.

@item
Bash implements the @code{for (( @var{expr1} ; @var{expr2} ; @var{expr3} ))}
arithmetic for command, similar to the C language (@pxref{Looping Constructs}).

@item
Bash includes the @code{select} compound command, which allows the
generation of simple menus (@pxref{Conditional Constructs}).

@item
Bash includes the @code{[[} compound command, which makes conditional
testing part of the shell grammar (@pxref{Conditional Constructs}), including
optional regular expression matching.

@item
Bash provides optional case-insensitive matching for the @code{case} and
@code{[[} constructs.

@item
Bash includes brace expansion (@pxref{Brace Expansion}) and tilde
expansion (@pxref{Tilde Expansion}).

@item
Bash implements command aliases and the @code{alias} and @code{unalias}
builtins (@pxref{Aliases}).

@item
Bash provides shell arithmetic, the @code{((} compound command
(@pxref{Conditional Constructs}),
and arithmetic expansion (@pxref{Shell Arithmetic}).

@item
Variables present in the shell's initial environment are automatically
exported to child processes.  The Bourne shell does not normally do
this unless the variables are explicitly marked using the @code{export}
command.

@item
Bash supports the @samp{+=} assignment operator, which appends to the value
of the variable named on the left hand side.

@item
Bash includes the @sc{posix} pattern removal @samp{%}, @samp{#}, @samp{%%}
and @samp{##} expansions to remove leading or trailing substrings from
variable values (@pxref{Shell Parameter Expansion}).

@item
The expansion @code{$@{#xx@}}, which returns the length of @code{$@{xx@}},
is supported (@pxref{Shell Parameter Expansion}).

@item
The expansion @code{$@{var:}@var{offset}@code{[:}@var{length}@code{]@}},
which expands to the substring of @code{var}'s value of length
@var{length}, beginning at @var{offset}, is present
(@pxref{Shell Parameter Expansion}).

@item
The expansion
@code{$@{var/[/]}@var{pattern}@code{[/}@var{replacement}@code{]@}},
which matches @var{pattern} and replaces it with @var{replacement} in
the value of @code{var}, is available (@pxref{Shell Parameter Expansion}).

@item
The expansion @code{$@{!@var{prefix}*@}} expansion, which expands to
the names of all shell variables whose names begin with @var{prefix},
is available (@pxref{Shell Parameter Expansion}).

@item
Bash has @var{indirect} variable expansion using @code{$@{!word@}}
(@pxref{Shell Parameter Expansion}).

@item
Bash can expand positional parameters beyond @code{$9} using
@code{$@{@var{num}@}}.

@item
The @sc{posix} @code{$()} form of command substitution
is implemented (@pxref{Command Substitution}),
and preferred to the Bourne shell's @code{``} (which
is also implemented for backwards compatibility).

@item
Bash has process substitution (@pxref{Process Substitution}).

@item
Bash automatically assigns variables that provide information about the
current user (@env{UID}, @env{EUID}, and @env{GROUPS}), the current host
(@env{HOSTTYPE}, @env{OSTYPE}, @env{MACHTYPE}, and @env{HOSTNAME}),
and the instance of Bash that is running (@env{BASH},
@env{BASH_VERSION}, and @env{BASH_VERSINFO}).  @xref{Bash Variables},
for details.

@item
The @env{IFS} variable is used to split only the results of expansion,
not all words (@pxref{Word Splitting}).
This closes a longstanding shell security hole.

@item
The filename expansion bracket expression code uses @samp{!} and @samp{^}
to negate the set of characters between the brackets.
The Bourne shell uses only @samp{!}.

@item
Bash implements the full set of @sc{posix} filename expansion operators,
including @var{character classes}, @var{equivalence classes}, and
@var{collating symbols} (@pxref{Filename Expansion}).

@item
Bash implements extended pattern matching features when the @code{extglob}
shell option is enabled (@pxref{Pattern Matching}).

@item
It is possible to have a variable and a function with the same name;
@code{sh} does not separate the two name spaces.

@item
Bash functions are permitted to have local variables using the
@code{local} builtin, and thus useful recursive functions may be written
(@pxref{Bash Builtins}).

@item
Variable assignments preceding commands affect only that command, even
builtins and functions (@pxref{Environment}).
In @code{sh}, all variable assignments 
preceding commands are global unless the command is executed from the
file system.

@item
Bash performs filename expansion on filenames specified as operands
to input and output redirection operators (@pxref{Redirections}).

@item
Bash contains the @samp{<>} redirection operator, allowing a file to be
opened for both reading and writing, and the @samp{&>} redirection
operator, for directing standard output and standard error to the same
file (@pxref{Redirections}).

@item
Bash includes the @samp{<<<} redirection operator, allowing a string to
be used as the standard input to a command.

@item
Bash implements the @samp{[n]<&@var{word}} and @samp{[n]>&@var{word}}
redirection operators, which move one file descriptor to another.

@item
Bash treats a number of filenames specially when they are
used in redirection operators (@pxref{Redirections}).

@item
Bash can open network connections to arbitrary machines and services
with the redirection operators (@pxref{Redirections}).

@item
The @code{noclobber} option is available to avoid overwriting existing
files with output redirection (@pxref{The Set Builtin}).
The @samp{>|} redirection operator may be used to override @code{noclobber}.

@item
The Bash @code{cd} and @code{pwd} builtins (@pxref{Bourne Shell Builtins})
each take @option{-L} and @option{-P} options to switch between logical and
physical modes.

@item
Bash allows a function to override a builtin with the same name, and provides
access to that builtin's functionality within the function via the
@code{builtin} and @code{command} builtins (@pxref{Bash Builtins}).

@item
The @code{command} builtin allows selective disabling of functions
when command lookup is performed (@pxref{Bash Builtins}).

@item
Individual builtins may be enabled or disabled using the @code{enable}
builtin (@pxref{Bash Builtins}).

@item
The Bash @code{exec} builtin takes additional options that allow users
to control the contents of the environment passed to the executed
command, and what the zeroth argument to the command is to be
(@pxref{Bourne Shell Builtins}).

@item
Shell functions may be exported to children via the environment
using @code{export -f} (@pxref{Shell Functions}).

@item
The Bash @code{export}, @code{readonly}, and @code{declare} builtins can
take a @option{-f} option to act on shell functions, a @option{-p} option to
display variables with various attributes set in a format that can be
used as shell input, a @option{-n} option to remove various variable
attributes, and @samp{name=value} arguments to set variable attributes
and values simultaneously.

@item
The Bash @code{hash} builtin allows a name to be associated with
an arbitrary filename, even when that filename cannot be found by
searching the @env{$PATH}, using @samp{hash -p}
(@pxref{Bourne Shell Builtins}).

@item
Bash includes a @code{help} builtin for quick reference to shell
facilities (@pxref{Bash Builtins}).

@item
The @code{printf} builtin is available to display formatted output
(@pxref{Bash Builtins}).

@item
The Bash @code{read} builtin (@pxref{Bash Builtins})
will read a line ending in @samp{\} with
the @option{-r} option, and will use the @env{REPLY} variable as a
default if no non-option arguments are supplied.
The Bash @code{read} builtin
also accepts a prompt string with the @option{-p} option and will use
Readline to obtain the line when given the @option{-e} option.
The @code{read} builtin also has additional options to control input:
the @option{-s} option will turn off echoing of input characters as
they are read, the @option{-t} option will allow @code{read} to time out
if input does not arrive within a specified number of seconds, the
@option{-n} option will allow reading only a specified number of
characters rather than a full line, and the @option{-d} option will read
until a particular character rather than newline.

@item
The @code{return} builtin may be used to abort execution of scripts
executed with the @code{.} or @code{source} builtins
(@pxref{Bourne Shell Builtins}).

@item
Bash includes the @code{shopt} builtin, for finer control of shell
optional capabilities (@pxref{The Shopt Builtin}), and allows these options
to be set and unset at shell invocation (@pxref{Invoking Bash}).

@item
Bash has much more optional behavior controllable with the @code{set}
builtin (@pxref{The Set Builtin}).

@item
The @samp{-x} (@option{xtrace}) option displays commands other than
simple commands when performing an execution trace
(@pxref{The Set Builtin}).

@item
The @code{test} builtin (@pxref{Bourne Shell Builtins})
is slightly different, as it implements the @sc{posix} algorithm,
which specifies the behavior based on the number of arguments.

@item
Bash includes the @code{caller} builtin, which displays the context of
any active subroutine call (a shell function or a script executed with
the @code{.} or @code{source} builtins).  This supports the bash
debugger.

@item
The @code{trap} builtin (@pxref{Bourne Shell Builtins}) allows a
@code{DEBUG} pseudo-signal specification, similar to @code{EXIT}.
Commands specified with a @code{DEBUG} trap are executed before every
simple command, @code{for} command, @code{case} command,
@code{select} command, every arithmetic @code{for} command, and before
the first command executes in a shell function.
The @code{DEBUG} trap is not inherited by shell functions unless the
function has been given the @code{trace} attribute or the
@code{functrace} option has been enabled using the @code{shopt} builtin.
The @code{extdebug} shell option has additional effects on the
@code{DEBUG} trap.

The @code{trap} builtin (@pxref{Bourne Shell Builtins}) allows an
@code{ERR} pseudo-signal specification, similar to @code{EXIT} and @code{DEBUG}.
Commands specified with an @code{ERR} trap are executed after a simple
command fails, with a few exceptions.
The @code{ERR} trap is not inherited by shell functions unless the
@code{-o errtrace} option to the @code{set} builtin is enabled.

The @code{trap} builtin (@pxref{Bourne Shell Builtins}) allows a
@code{RETURN} pseudo-signal specification, similar to
@code{EXIT} and @code{DEBUG}.
Commands specified with an @code{RETURN} trap are executed before
execution resumes after a shell function or a shell script executed with
@code{.} or @code{source} returns.
The @code{RETURN} trap is not inherited by shell functions unless the
function has been given the @code{trace} attribute or the
@code{functrace} option has been enabled using the @code{shopt} builtin.

@item
The Bash @code{type} builtin is more extensive and gives more information
about the names it finds (@pxref{Bash Builtins}).

@item
The Bash @code{umask} builtin permits a @option{-p} option to cause
the output to be displayed in the form of a @code{umask} command
that may be reused as input (@pxref{Bourne Shell Builtins}).

@item
Bash implements a @code{csh}-like directory stack, and provides the
@code{pushd}, @code{popd}, and @code{dirs} builtins to manipulate it
(@pxref{The Directory Stack}).
Bash also makes the directory stack visible as the value of the
@env{DIRSTACK} shell variable.

@item
Bash interprets special backslash-escaped characters in the prompt
strings when interactive (@pxref{Controlling the Prompt}).

@item
The Bash restricted mode is more useful (@pxref{The Restricted Shell});
the SVR4.2 shell restricted mode is too limited.

@item
The @code{disown} builtin can remove a job from the internal shell
job table (@pxref{Job Control Builtins}) or suppress the sending
of @code{SIGHUP} to a job when the shell exits as the result of a
@code{SIGHUP}.

@item
Bash includes a number of features to support a separate debugger for
shell scripts.

@item
The SVR4.2 shell has two privilege-related builtins
(@code{mldmode} and @code{priv}) not present in Bash.

@item
Bash does not have the @code{stop} or @code{newgrp} builtins.

@item
Bash does not use the @env{SHACCT} variable or perform shell accounting.

@item
The SVR4.2 @code{sh} uses a @env{TIMEOUT} variable like Bash uses
@env{TMOUT}.

@end itemize

@noindent
More features unique to Bash may be found in @ref{Bash Features}.


@appendixsec Implementation Differences From The SVR4.2 Shell

Since Bash is a completely new implementation, it does not suffer from
many of the limitations of the SVR4.2 shell.  For instance:

@itemize @bullet

@item
Bash does not fork a subshell when redirecting into or out of
a shell control structure such as  an @code{if} or @code{while}
statement.

@item
Bash does not allow unbalanced quotes.  The SVR4.2 shell will silently
insert a needed closing quote at @code{EOF} under certain circumstances.
This can be the cause of some hard-to-find errors.

@item
The SVR4.2 shell uses a baroque memory management scheme based on
trapping @code{SIGSEGV}.  If the shell is started from a process with
@code{SIGSEGV} blocked (e.g., by using the @code{system()} C library
function call), it misbehaves badly.

@item
In a questionable attempt at security, the SVR4.2 shell,
when invoked without the @option{-p} option, will alter its real
and effective @sc{uid} and @sc{gid} if they are less than some
magic threshold value, commonly 100.
This can lead to unexpected results.

@item
The SVR4.2 shell does not allow users to trap @code{SIGSEGV},
@code{SIGALRM}, or @code{SIGCHLD}.

@item
The SVR4.2 shell does not allow the @env{IFS}, @env{MAILCHECK},
@env{PATH}, @env{PS1}, or @env{PS2} variables to be unset.

@item
The SVR4.2 shell treats @samp{^} as the undocumented equivalent of
@samp{|}.

@item
Bash allows multiple option arguments when it is invoked (@code{-x -v});
the SVR4.2 shell allows only one option argument (@code{-xv}).  In
fact, some versions of the shell dump core if the second argument begins
with a @samp{-}.

@item
The SVR4.2 shell exits a script if any builtin fails; Bash exits
a script only if one of the @sc{posix} special builtins fails, and
only for certain failures, as enumerated in the @sc{posix} standard.

@item 
The SVR4.2 shell behaves differently when invoked as @code{jsh}
(it turns on job control).
@end itemize

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi

@node Indexes
@appendix Indexes

@menu
* Builtin Index::		Index of Bash builtin commands.
* Reserved Word Index::		Index of Bash reserved words.
* Variable Index::		Quick reference helps you find the
				variable you want.
* Function Index::		Index of bindable Readline functions.
* Concept Index::		General index for concepts described in
				this manual.
@end menu

@node Builtin Index
@appendixsec Index of Shell Builtin Commands
@printindex bt

@node Reserved Word Index
@appendixsec Index of Shell Reserved Words
@printindex rw

@node Variable Index
@appendixsec Parameter and Variable Index
@printindex vr

@node Function Index
@appendixsec Function Index
@printindex fn

@node Concept Index
@appendixsec Concept Index
@printindex cp

@bye






  
